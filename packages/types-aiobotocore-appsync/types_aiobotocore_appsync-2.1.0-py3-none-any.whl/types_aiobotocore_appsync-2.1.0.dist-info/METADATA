Metadata-Version: 2.1
Name: types-aiobotocore-appsync
Version: 2.1.0
Summary: Type annotations for aiobotocore.AppSync 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore appsync type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-appsync"></a>

# mypy-boto3-appsync

[![PyPI - types-aiobotocore-appsync](https://img.shields.io/pypi/v/types-aiobotocore-appsync.svg?color=blue)](https://pypi.org/project/types-aiobotocore-appsync)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-appsync.svg?color=blue)](https://pypi.org/project/types-aiobotocore-appsync)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-appsync?color=blue)](https://pypistats.org/packages/types-aiobotocore-appsync)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.AppSync 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/appsync.html#AppSync)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-appsync docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_appsync/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-appsync](#mypy-boto3-appsync)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `AppSync`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `AppSync` service.

```bash
python -m pip install types-aiobotocore[appsync]
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[appsync]` in your environment:
  `python -m pip install 'types-aiobotocore[appsync]'`

Both type checking and auto-complete should work for `AppSync` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[appsync]` in your environment:
  `python -m pip install 'types-aiobotocore[appsync]'`

Both type checking and auto-complete should work for `AppSync` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[appsync]` in your environment:
  `python -m pip install 'types-aiobotocore[appsync]'`
- Run `mypy` as usual

Type checking should work for `AppSync` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[appsync]` in your environment:
  `python -m pip install 'types-aiobotocore[appsync]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `AppSync` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`AppSyncClient` provides annotations for `session.create_client("appsync")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_appsync import AppSyncClient

session = get_session()
with async session.create_client("appsync") as client:
    client: AppSyncClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_appsync.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_appsync import AppSyncClient
from types_aiobotocore_appsync.paginator import (
    ListApiKeysPaginator,
    ListDataSourcesPaginator,
    ListFunctionsPaginator,
    ListGraphqlApisPaginator,
    ListResolversPaginator,
    ListResolversByFunctionPaginator,
    ListTypesPaginator,
)

session = get_session()
with async session.create_client("appsync") as client:
    client: AppSyncClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_api_keys_paginator: ListApiKeysPaginator = client.get_paginator("list_api_keys")
        list_data_sources_paginator: ListDataSourcesPaginator = client.get_paginator("list_data_sources")
        list_functions_paginator: ListFunctionsPaginator = client.get_paginator("list_functions")
        list_graphql_apis_paginator: ListGraphqlApisPaginator = client.get_paginator("list_graphql_apis")
        list_resolvers_paginator: ListResolversPaginator = client.get_paginator("list_resolvers")
        list_resolvers_by_function_paginator: ListResolversByFunctionPaginator = client.get_paginator("list_resolvers_by_function")
        list_types_paginator: ListTypesPaginator = client.get_paginator("list_types")
    ```







### Literals

`types_aiobotocore_appsync.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_appsync.literals import (
    ApiCacheStatusType,
    ApiCacheTypeType,
    ApiCachingBehaviorType,
    AssociationStatusType,
    AuthenticationTypeType,
    AuthorizationTypeType,
    ConflictDetectionTypeType,
    ConflictHandlerTypeType,
    DataSourceTypeType,
    DefaultActionType,
    FieldLogLevelType,
    ListApiKeysPaginatorName,
    ListDataSourcesPaginatorName,
    ListFunctionsPaginatorName,
    ListGraphqlApisPaginatorName,
    ListResolversByFunctionPaginatorName,
    ListResolversPaginatorName,
    ListTypesPaginatorName,
    OutputTypeType,
    RelationalDatabaseSourceTypeType,
    ResolverKindType,
    SchemaStatusType,
    TypeDefinitionFormatType,
    ServiceName,
    PaginatorName,
)

def check_value(value: ApiCacheStatusType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_appsync.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_appsync.type_defs import (
    AdditionalAuthenticationProviderTypeDef,
    ApiAssociationTypeDef,
    ApiCacheTypeDef,
    ApiKeyTypeDef,
    AssociateApiRequestRequestTypeDef,
    AssociateApiResponseTypeDef,
    AuthorizationConfigTypeDef,
    AwsIamConfigTypeDef,
    CachingConfigTypeDef,
    CognitoUserPoolConfigTypeDef,
    CreateApiCacheRequestRequestTypeDef,
    CreateApiCacheResponseTypeDef,
    CreateApiKeyRequestRequestTypeDef,
    CreateApiKeyResponseTypeDef,
    CreateDataSourceRequestRequestTypeDef,
    CreateDataSourceResponseTypeDef,
    CreateDomainNameRequestRequestTypeDef,
    CreateDomainNameResponseTypeDef,
    CreateFunctionRequestRequestTypeDef,
    CreateFunctionResponseTypeDef,
    CreateGraphqlApiRequestRequestTypeDef,
    CreateGraphqlApiResponseTypeDef,
    CreateResolverRequestRequestTypeDef,
    CreateResolverResponseTypeDef,
    CreateTypeRequestRequestTypeDef,
    CreateTypeResponseTypeDef,
    DataSourceTypeDef,
    DeleteApiCacheRequestRequestTypeDef,
    DeleteApiKeyRequestRequestTypeDef,
    DeleteDataSourceRequestRequestTypeDef,
    DeleteDomainNameRequestRequestTypeDef,
    DeleteFunctionRequestRequestTypeDef,
    DeleteGraphqlApiRequestRequestTypeDef,
    DeleteResolverRequestRequestTypeDef,
    DeleteTypeRequestRequestTypeDef,
    DeltaSyncConfigTypeDef,
    DisassociateApiRequestRequestTypeDef,
    DomainNameConfigTypeDef,
    DynamodbDataSourceConfigTypeDef,
    ElasticsearchDataSourceConfigTypeDef,
    FlushApiCacheRequestRequestTypeDef,
    FunctionConfigurationTypeDef,
    GetApiAssociationRequestRequestTypeDef,
    GetApiAssociationResponseTypeDef,
    GetApiCacheRequestRequestTypeDef,
    GetApiCacheResponseTypeDef,
    GetDataSourceRequestRequestTypeDef,
    GetDataSourceResponseTypeDef,
    GetDomainNameRequestRequestTypeDef,
    GetDomainNameResponseTypeDef,
    GetFunctionRequestRequestTypeDef,
    GetFunctionResponseTypeDef,
    GetGraphqlApiRequestRequestTypeDef,
    GetGraphqlApiResponseTypeDef,
    GetIntrospectionSchemaRequestRequestTypeDef,
    GetIntrospectionSchemaResponseTypeDef,
    GetResolverRequestRequestTypeDef,
    GetResolverResponseTypeDef,
    GetSchemaCreationStatusRequestRequestTypeDef,
    GetSchemaCreationStatusResponseTypeDef,
    GetTypeRequestRequestTypeDef,
    GetTypeResponseTypeDef,
    GraphqlApiTypeDef,
    HttpDataSourceConfigTypeDef,
    LambdaAuthorizerConfigTypeDef,
    LambdaConflictHandlerConfigTypeDef,
    LambdaDataSourceConfigTypeDef,
    ListApiKeysRequestRequestTypeDef,
    ListApiKeysResponseTypeDef,
    ListDataSourcesRequestRequestTypeDef,
    ListDataSourcesResponseTypeDef,
    ListDomainNamesRequestRequestTypeDef,
    ListDomainNamesResponseTypeDef,
    ListFunctionsRequestRequestTypeDef,
    ListFunctionsResponseTypeDef,
    ListGraphqlApisRequestRequestTypeDef,
    ListGraphqlApisResponseTypeDef,
    ListResolversByFunctionRequestRequestTypeDef,
    ListResolversByFunctionResponseTypeDef,
    ListResolversRequestRequestTypeDef,
    ListResolversResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    ListTypesRequestRequestTypeDef,
    ListTypesResponseTypeDef,
    LogConfigTypeDef,
    OpenIDConnectConfigTypeDef,
    OpenSearchServiceDataSourceConfigTypeDef,
    PaginatorConfigTypeDef,
    PipelineConfigTypeDef,
    RdsHttpEndpointConfigTypeDef,
    RelationalDatabaseDataSourceConfigTypeDef,
    ResolverTypeDef,
    ResponseMetadataTypeDef,
    StartSchemaCreationRequestRequestTypeDef,
    StartSchemaCreationResponseTypeDef,
    SyncConfigTypeDef,
    TagResourceRequestRequestTypeDef,
    TypeTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateApiCacheRequestRequestTypeDef,
    UpdateApiCacheResponseTypeDef,
    UpdateApiKeyRequestRequestTypeDef,
    UpdateApiKeyResponseTypeDef,
    UpdateDataSourceRequestRequestTypeDef,
    UpdateDataSourceResponseTypeDef,
    UpdateDomainNameRequestRequestTypeDef,
    UpdateDomainNameResponseTypeDef,
    UpdateFunctionRequestRequestTypeDef,
    UpdateFunctionResponseTypeDef,
    UpdateGraphqlApiRequestRequestTypeDef,
    UpdateGraphqlApiResponseTypeDef,
    UpdateResolverRequestRequestTypeDef,
    UpdateResolverResponseTypeDef,
    UpdateTypeRequestRequestTypeDef,
    UpdateTypeResponseTypeDef,
    UserPoolConfigTypeDef,
)

def get_structure() -> AdditionalAuthenticationProviderTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-appsync` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-appsync docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_appsync/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


