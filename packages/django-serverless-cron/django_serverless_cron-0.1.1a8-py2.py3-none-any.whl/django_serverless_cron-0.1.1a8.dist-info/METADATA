Metadata-Version: 2.1
Name: django-serverless-cron
Version: 0.1.1a8
Summary: Django Serverless Cron
Home-page: https://github.com/paulonteri/django-serverless-cron
Author: Paul Onteri
Author-email: me@paulonteri.com
License: MIT
Keywords: django-serverless-cron
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: Django :: 3.1
Classifier: Framework :: Django :: 3.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: coverage (==4.4.1)

=============================
django-serverless-cron ðŸ¦¡
=============================

.. image:: https://badge.fury.io/py/django-serverless-cron.svg
    :target: https://badge.fury.io/py/django-serverless-cron

.. image:: https://github.com/paulonteri/django-serverless-cron/actions/workflows/tests.yml/badge.svg
    :target: https://github.com/paulonteri/django-serverless-cron/actions/workflows/tests.yml

.. image:: https://codecov.io/gh/paulonteri/django-serverless-cron/branch/master/graph/badge.svg
    :target: https://codecov.io/gh/paulonteri/django-serverless-cron

.. image:: https://readthedocs.org/projects/django-serverless-cron/badge/?version=latest
     :target: http://django-serverless-cron.readthedocs.io/?badge=latest

https://github.com/kentcdodds/mdx-bundler#nextjs-esbuild-enoent

django-serverless-cron is a Django app with a simpler approach running cron jobs.
This is done through exposing a HTTP endpoint to invoke the jobs.
This allows you to run any task without having to manage always-on infrastructure.

There is also an option to run jobs via management commands and the Django admin.

Why?
----

This is essentially a replacement/supplement for a traditional OS 'cron' or 'job scheduler' system:

- Serverless cron jobs no-longer a pain.
- Schedule jobs to run at a frequency that is less than 1 min. (crontab is limited to 1 min)
- The machine running crontab is no longer a single point of failure.
- The problem with the above systems is that they are often configured at the operating system level, which means their configuration is probably not easily 'portable' and 'debug-able' (if you are developing on Windows, the scheduler works differently from Linux or Unix). Also can not easily be integrated into a development environment.
- Manually triggered cron jobs. Eg: via the Django Admin.
- Alternative to cron services that aren't always available on free (and sometimes paid) web hosting services.
- Easier access to cron job execution logs and monitoring execution failures.
- No need to learn crontab. Think of it as a friendlier alternative to traditional cron jobs. Simple cron job creation. No need for cron syntax, no guessing on job frequency. Easy controls.

Documentation
-------------

Documentation is graciously hosted at https://django-serverless-cron.readthedocs.io.

Quickstart
----------

Installation
^^^^^^^^^^^^

Install Django Serverless Cron::

    pip install django-serverless-cron


Settings
^^^^^^^^

Add it to your `INSTALLED_APPS`:

.. code-block:: python

    INSTALLED_APPS = (
        # ...
        'django_serverless_cron'
        # ...
    )

Add jobs to your settings file:

.. code-block:: python

    CRONJOBS = [
        # (
        #   '1_hours',                       # frequency (seconds, minutes, hours, days, weeks) -> in this case, every one hour
        #   'mail.jobs.send_mail_function',  # path to task/function functions -> in this case, send_mail_function()
        #   {'kwarg1': 'foo'}                # kwargs passed to the function
        # ),
        (
            '1_day',
            'your_app.services.your_job_function',
            {'kwarg1': 'foo', 'kwarg2': 'bar'}
        ),
        (
            '1_hour',
            'mail.jobs.send_mail_function',
            {"is_bulk": True}
        ),
    ]


URL patterns
^^^^^^^^^^^^
Add the jobs to your URL patterns:

.. code-block:: python

    from django_serverless_cron import urls as django_serverless_cron_urls


    urlpatterns = [
        # ...
        url(r'^', include(django_serverless_cron_urls))
        #...
    ]

Running Jobs
------------

In Development
^^^^^^^^^^^^^^

Running Jobs through HTTP requests
""""""""""""""""""""""""""""""""""

Call the `/run` path to run all jobs:

Example:

.. code-block:: bash

    curl http://localhost:8000/run

or

.. code-block:: python

    import requests

    x = requests.get('http://localhost:8000/run')
    
    
Running Jobs through the management command
"""""""""""""""""""""""""""""""""""""""""""

This will run the jobs every 30 seconds:

.. code-block:: bash

    python manage.py serverless_cron_run

You can alternatively add the `--single_run='True'` option to run the jobs just once.

In Production
^^^^^^^^^^^^^

Similar to in development, we can call the `/run` path via managed services which are usually ridiculously cheap. Examples:

- https://cloud.google.com/scheduler -> Great feature set, easy to use, reasonable free tier & very cheap.
- https://aws.amazon.com/eventbridge
- https://azure.microsoft.com/en-gb/services/logic-apps formerly https://docs.microsoft.com/en-us/azure/scheduler/scheduler-intro
- https://cron-job.org/en/ -> Absolutely free and open-source: https://github.com/pschlan/cron-job.org
- https://www.easycron.com
- https://cronhub.io
- https://cronless.com -> Has 30 Second Cron Jobs
- https://www.cronjob.de
- https://catalyst.zoho.com/help/cron.html
- https://www.cronjobservices.com

Related
-------

- https://dev.to/googlecloud/when-you-re-not-around-trigger-cloud-run-on-a-schedule-53p4
- https://aws.amazon.com/blogs/compute/using-api-destinations-with-amazon-eventbridge/
- https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/RunLambdaSchedule.html

Credits
-------

Tools used in rendering this package:

*  Cookiecutter_
*  `cookiecutter-djangopackage`_

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage





