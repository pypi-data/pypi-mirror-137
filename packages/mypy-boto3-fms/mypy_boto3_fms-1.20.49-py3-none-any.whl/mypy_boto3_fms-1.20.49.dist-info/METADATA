Metadata-Version: 2.1
Name: mypy-boto3-fms
Version: 1.20.49
Summary: Type annotations for boto3.FMS 1.20.49 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 fms type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-fms"></a>

# mypy-boto3-fms

[![PyPI - mypy-boto3-fms](https://img.shields.io/pypi/v/mypy-boto3-fms.svg?color=blue)](https://pypi.org/project/mypy-boto3-fms)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-fms.svg?color=blue)](https://pypi.org/project/mypy-boto3-fms)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/mypy-boto3-fms?color=blue)](https://pypistats.org/packages/mypy-boto3-fms)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.FMS 1.20.49](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/fms.html#FMS)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[mypy-boto3-fms docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_fms/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-fms](#mypy-boto3-fms)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `FMS`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `boto3-stubs` for `FMS` service.

```bash
# install with boto3 type annotations
python -m pip install 'boto3-stubs[fms]'

# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'boto3-stubs-lite[fms]'

# standalone installation
python -m pip install mypy-boto3-fms
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `boto3-stubs[fms]` in your environment:
  `python -m pip install 'boto3-stubs[fms]'`

Both type checking and auto-complete should work for `FMS` service. No explicit
type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `boto3-stubs[fms]` in your environment:
  `python -m pip install 'boto3-stubs[fms]'`

Both type checking and auto-complete should work for `FMS` service. No explicit
type annotations required, write your `boto3` code as usual. Auto-complete can
be slow on big projects or if you have a lot of installed `boto3-stubs`
submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `boto3-stubs[fms]` in your environment:
  `python -m pip install 'boto3-stubs[fms]'`
- Run `mypy` as usual

Type checking should work for `FMS` service. No explicit type annotations
required, write your `boto3` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `boto3-stubs[fms]` in your environment:
  `python -m pip install 'boto3-stubs[fms]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `FMS` service. No explicit type annotations
required, write your `boto3` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`FMSClient` provides annotations for `boto3.client("fms")`.

```python
from boto3.session import Session

from mypy_boto3_fms import FMSClient

client: FMSClient = Session().client("fms")

# now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`mypy_boto3_fms.paginator` module contains type annotations for all paginators.

```python
from boto3.session import Session

from mypy_boto3_fms import FMSClient
from mypy_boto3_fms.paginator import (
    ListAppsListsPaginator,
    ListComplianceStatusPaginator,
    ListMemberAccountsPaginator,
    ListPoliciesPaginator,
    ListProtocolsListsPaginator,
)

client: FMSClient = Session().client("fms")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
list_apps_lists_paginator: ListAppsListsPaginator = client.get_paginator("list_apps_lists")
list_compliance_status_paginator: ListComplianceStatusPaginator = client.get_paginator("list_compliance_status")
list_member_accounts_paginator: ListMemberAccountsPaginator = client.get_paginator("list_member_accounts")
list_policies_paginator: ListPoliciesPaginator = client.get_paginator("list_policies")
list_protocols_lists_paginator: ListProtocolsListsPaginator = client.get_paginator("list_protocols_lists")
```

<a id="literals"></a>

### Literals

`mypy_boto3_fms.literals` module contains literals extracted from shapes that
can be used in user code for type checking.

```python
from mypy_boto3_fms.literals import (
    AccountRoleStatusType,
    CustomerPolicyScopeIdTypeType,
    DependentServiceNameType,
    DestinationTypeType,
    ListAppsListsPaginatorName,
    ListComplianceStatusPaginatorName,
    ListMemberAccountsPaginatorName,
    ListPoliciesPaginatorName,
    ListProtocolsListsPaginatorName,
    PolicyComplianceStatusTypeType,
    RemediationActionTypeType,
    SecurityServiceTypeType,
    TargetTypeType,
    ViolationReasonType,
    ServiceName,
    PaginatorName,
)

def check_value(value: AccountRoleStatusType) -> bool:
    ...
```

<a id="typed-dictionaries"></a>

### Typed dictionaries

`mypy_boto3_fms.type_defs` module contains structures and shapes assembled to
typed dictionaries for additional type checking.

```python
from mypy_boto3_fms.type_defs import (
    ActionTargetTypeDef,
    AppTypeDef,
    AppsListDataSummaryTypeDef,
    AppsListDataTypeDef,
    AssociateAdminAccountRequestRequestTypeDef,
    AwsEc2InstanceViolationTypeDef,
    AwsEc2NetworkInterfaceViolationTypeDef,
    AwsVPCSecurityGroupViolationTypeDef,
    ComplianceViolatorTypeDef,
    DeleteAppsListRequestRequestTypeDef,
    DeletePolicyRequestRequestTypeDef,
    DeleteProtocolsListRequestRequestTypeDef,
    DnsDuplicateRuleGroupViolationTypeDef,
    DnsRuleGroupLimitExceededViolationTypeDef,
    DnsRuleGroupPriorityConflictViolationTypeDef,
    EC2AssociateRouteTableActionTypeDef,
    EC2CopyRouteTableActionTypeDef,
    EC2CreateRouteActionTypeDef,
    EC2CreateRouteTableActionTypeDef,
    EC2DeleteRouteActionTypeDef,
    EC2ReplaceRouteActionTypeDef,
    EC2ReplaceRouteTableAssociationActionTypeDef,
    EvaluationResultTypeDef,
    ExpectedRouteTypeDef,
    GetAdminAccountResponseTypeDef,
    GetAppsListRequestRequestTypeDef,
    GetAppsListResponseTypeDef,
    GetComplianceDetailRequestRequestTypeDef,
    GetComplianceDetailResponseTypeDef,
    GetNotificationChannelResponseTypeDef,
    GetPolicyRequestRequestTypeDef,
    GetPolicyResponseTypeDef,
    GetProtectionStatusRequestRequestTypeDef,
    GetProtectionStatusResponseTypeDef,
    GetProtocolsListRequestRequestTypeDef,
    GetProtocolsListResponseTypeDef,
    GetViolationDetailsRequestRequestTypeDef,
    GetViolationDetailsResponseTypeDef,
    ListAppsListsRequestRequestTypeDef,
    ListAppsListsResponseTypeDef,
    ListComplianceStatusRequestRequestTypeDef,
    ListComplianceStatusResponseTypeDef,
    ListMemberAccountsRequestRequestTypeDef,
    ListMemberAccountsResponseTypeDef,
    ListPoliciesRequestRequestTypeDef,
    ListPoliciesResponseTypeDef,
    ListProtocolsListsRequestRequestTypeDef,
    ListProtocolsListsResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    NetworkFirewallBlackHoleRouteDetectedViolationTypeDef,
    NetworkFirewallInternetTrafficNotInspectedViolationTypeDef,
    NetworkFirewallInvalidRouteConfigurationViolationTypeDef,
    NetworkFirewallMissingExpectedRTViolationTypeDef,
    NetworkFirewallMissingExpectedRoutesViolationTypeDef,
    NetworkFirewallMissingFirewallViolationTypeDef,
    NetworkFirewallMissingSubnetViolationTypeDef,
    NetworkFirewallPolicyDescriptionTypeDef,
    NetworkFirewallPolicyModifiedViolationTypeDef,
    NetworkFirewallUnexpectedFirewallRoutesViolationTypeDef,
    NetworkFirewallUnexpectedGatewayRoutesViolationTypeDef,
    PaginatorConfigTypeDef,
    PartialMatchTypeDef,
    PolicyComplianceDetailTypeDef,
    PolicyComplianceStatusTypeDef,
    PolicySummaryTypeDef,
    PolicyTypeDef,
    PossibleRemediationActionTypeDef,
    PossibleRemediationActionsTypeDef,
    ProtocolsListDataSummaryTypeDef,
    ProtocolsListDataTypeDef,
    PutAppsListRequestRequestTypeDef,
    PutAppsListResponseTypeDef,
    PutNotificationChannelRequestRequestTypeDef,
    PutPolicyRequestRequestTypeDef,
    PutPolicyResponseTypeDef,
    PutProtocolsListRequestRequestTypeDef,
    PutProtocolsListResponseTypeDef,
    RemediationActionTypeDef,
    RemediationActionWithOrderTypeDef,
    ResourceTagTypeDef,
    ResourceViolationTypeDef,
    ResponseMetadataTypeDef,
    RouteTypeDef,
    SecurityGroupRemediationActionTypeDef,
    SecurityGroupRuleDescriptionTypeDef,
    SecurityServicePolicyDataTypeDef,
    StatefulRuleGroupTypeDef,
    StatelessRuleGroupTypeDef,
    TagResourceRequestRequestTypeDef,
    TagTypeDef,
    UntagResourceRequestRequestTypeDef,
    ViolationDetailTypeDef,
)

def get_structure() -> ActionTargetTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`mypy-boto3-fms` version is the same as related `boto3` version and follows
[PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[mypy-boto3-fms docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_fms/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


