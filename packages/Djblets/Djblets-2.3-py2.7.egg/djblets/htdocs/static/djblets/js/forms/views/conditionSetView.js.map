{"version":3,"sources":["conditionSetView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AAGZ;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,oBAAoB,GAAG,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;AAC9C,IAAA,OAAO,EAAE,IADqC;AAE9C,IAAA,SAAS,EAAE,sBAFmC;AAI9C,IAAA,MAAM,EAAE;AACJ,4CAAsC;AADlC,KAJsC;;AAQ9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,UAnB8C,sBAmBnC,OAnBmC,EAmB1B;AAAA;;AAChB,WAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,SAA1B,EAAqC,YAAM;AACvC,QAAA,KAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,OAAO,CAAC,mBAAzB,EACiB,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CADjB;AAEH,OAHD;AAIH,KAxB6C;;AA0B9C;AACJ;AACA;AACA;AACA;AACI,IAAA,gBA/B8C,4BA+B7B,CA/B6B,EA+B1B;AAChB,MAAA,CAAC,CAAC,eAAF;AACA,MAAA,CAAC,CAAC,cAAF;AAEA,WAAK,KAAL,CAAW,OAAX;AACH;AApC6C,GAArB,CAA7B;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM,gBAAgB,GAAG,oBAAoB,CAAC,MAArB,CAA4B;AACjD,IAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW,CACjB,sEADiB,EAEjB,6CAFiB,EAGjB,WAHiB,EAIjB,+CAJiB,EAKjB,qBALiB,EAMjB,uDANiB,EAOjB,UAPiB,EAQjB,kDARiB,EASjB,oDATiB,EAUjB,iDAViB,EAWjB,SAXiB,EAYnB,IAZmB,CAYd,EAZc,CAAX,CADuC;AAejD,IAAA,MAAM,EAAE,CAAC,CAAC,MAAF,CAAS;AACb,gDAA0C,wBAD7B;AAEb,kDAA4C;AAF/B,KAAT,EAGL,oBAAoB,CAAC,SAArB,CAA+B,MAH1B,CAfyC;;AAoBjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,UAnCiD,sBAmCtC,OAnCsC,EAmC7B;AAChB,MAAA,oBAAoB,CAAC,SAArB,CAA+B,UAA/B,CAA0C,IAA1C,CAA+C,IAA/C,EAAqD,OAArD;AAEA,WAAK,YAAL,GAAoB,OAAO,CAAC,YAA5B;AAEA,WAAK,QAAL,GAAgB,IAAhB;AACA,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,cAAL,GAAsB,IAAtB;AACA,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,kBAAL,GAA0B,IAA1B;AACA,WAAK,WAAL,GAAmB,IAAnB;AACH,KA9CgD;;AAgDjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,MA1DiD,oBA0DxC;AAAA;;AACL,WAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc,KAAK,KAAL,CAAW,UAAzB,CAAd;AAEA,UAAM,WAAW,GAAG,KAAK,GAAL,CAAS,QAAT,CAAkB,+BAAlB,CAApB;AACA,UAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,GAAlB,CAAsB,WAAtB,CAAlB;AACA,UAAM,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,IAAf,CAAf;AAEA;;AACA,WAAK,QAAL,GAAgB,CAAC,CAAC,WAAD,CAAD,CACX,IADW,CACN,MADM,YACK,SADL,qBACyB,MADzB,OAAhB;AAGA,WAAK,YAAL,CAAkB,OAAlB,CAA0B,IAA1B,CAA+B,UAAA,MAAM,EAAI;AACrC,QAAA,MAAI,CAAC,QAAL,CAAc,MAAd,CAAqB,CAAC,CAAC,WAAD,CAAD,CAChB,GADgB,CACZ,MAAM,CAAC,EADK,EAEhB,IAFgB,CAEX,MAAM,CAAC,GAAP,CAAW,MAAX,CAFW,CAArB;AAGH,OAJD;;AAMA,WAAK,QAAL,CACK,QADL,CACc,WAAW,CAAC,QAAZ,CAAqB,0BAArB,CADd;AAGA;AACR;AACA;AACA;;;AACQ,WAAK,UAAL,GAAkB,CAAC,CAAC,WAAD,CAAD,CACb,IADa,CACR,MADQ,YACG,SADH,uBACyB,MADzB,QAEb,QAFa,CAEJ,WAAW,CAAC,QAAZ,CAAqB,4BAArB,CAFI,CAAlB;AAIA,WAAK,cAAL,GAAsB,WAAW,CAAC,QAAZ,CAAqB,yBAArB,CAAtB;AAEA;AACR;AACA;AACA;;AACQ,WAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,eAA1B,EAA2C,KAAK,gBAAhD;AACA,WAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,iBAA1B,EAA6C,KAAK,kBAAlD;AACA,WAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,cAA1B,EAA0C,KAAK,eAA/C;AAEA;;AACA,WAAK,gBAAL;;AACA,WAAK,kBAAL;;AACA,WAAK,eAAL;;AAEA,aAAO,IAAP;AACH,KAtGgD;;AAwGjD;AACJ;AACA;AACA;AACA;AACA;AACI,IAAA,gBA9GiD,8BA8G9B;AAAA;;AACf,UAAM,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,QAAf,CAAf;AACA,UAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,GAAlB,CAAsB,WAAtB,CAAlB;AACA,UAAM,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,IAAf,CAAf;;AAEA,WAAK,QAAL,CAAc,GAAd,CAAkB,MAAM,CAAC,EAAzB;;AAEA,WAAK,kBAAL,GAA0B,MAAM,CAAC,gBAAP,WACnB,SADmB,oBACA,MADA,OAA1B;AAGA;;AACA,WAAK,UAAL,CAAgB,KAAhB;;AAEA,MAAA,MAAM,CAAC,SAAP,CAAiB,IAAjB,CAAsB,UAAA,QAAQ,EAAI;AAC9B,QAAA,MAAI,CAAC,UAAL,CAAgB,MAAhB,CACI,CAAC,CAAC,WAAD,CAAD,CACK,GADL,CACS,QAAQ,CAAC,EADlB,EAEK,IAFL,CAEU,QAAQ,CAAC,GAAT,CAAa,MAAb,CAFV,CADJ;AAIH,OALD;;AAOA,WAAK,UAAL,CAAgB,GAAhB,CAAoB,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,EAA2B,EAA/C;AACH,KAnIgD;;AAqIjD;AACJ;AACA;AACA;AACA;AACA;AACI,IAAA,kBA3IiD,gCA2I5B;AACjB,UAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,CAAjB;AACA,UAAI,aAAJ;;AAEA,WAAK,UAAL,CAAgB,GAAhB,CAAoB,QAAQ,CAAC,EAA7B;;AACA,WAAK,cAAL,CAAoB,UAApB,CAA+B,QAAQ,CAAC,GAAT,CAAa,UAAb,CAA/B;;AAEA,UAAI,QAAQ,CAAC,GAAT,CAAa,YAAb,MAA+B,IAAnC,EAAyC;AACrC,YAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,GAAlB,CAAsB,WAAtB,CAAlB;AACA,YAAM,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,IAAf,CAAf;AAEA,QAAA,aAAa,GAAG,QAAQ,CAAC,gBAAT,WACT,SADS,oBACU,MADV,OAAhB;AAEH,OAND,MAMO;AACH,QAAA,aAAa,GAAG,KAAK,kBAArB;AACH;;AAED,UAAI,aAAa,KAAK,KAAK,WAA3B,EAAwC;AACpC;AACA,YAAI,KAAK,UAAL,KAAoB,IAApB,IAA4B,aAAa,KAAK,KAAK,WAAvD,EAAoE;AAChE,eAAK,UAAL,CAAgB,MAAhB;;AACA,eAAK,UAAL,GAAkB,IAAlB;AACH;;AAED,aAAK,WAAL,GAAmB,aAAnB;AAEA,aAAK,UAAL,GAAkB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,GAA1B,CACb,QADa,CACJ,KAAK,cADD,CAAlB;AAEH;AACJ,KAxKgD;;AA0KjD;AACJ;AACA;AACA;AACA;AACI,IAAA,eA/KiD,6BA+K/B;AACd,WAAK,WAAL,CAAiB,QAAjB,CAA0B,KAAK,KAAL,CAAW,GAAX,CAAe,OAAf,CAA1B;AACH,KAjLgD;;AAmLjD;AACJ;AACA;AACA;AACA;AACI,IAAA,sBAxLiD,oCAwLxB;AACrB,WAAK,KAAL,CAAW,GAAX,CAAe,QAAf,EACe,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,CAA8B,KAAK,QAAL,CAAc,GAAd,EAA9B,CADf;AAEH,KA3LgD;;AA6LjD;AACJ;AACA;AACA;AACA;AACI,IAAA,wBAlMiD,sCAkMtB;AACvB,UAAM,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,QAAf,CAAf;AAEA,WAAK,KAAL,CAAW,GAAX,CAAe,UAAf,EAA2B,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,KAAK,UAAL,CAAgB,GAAhB,EAArB,CAA3B;AACH;AAtMgD,GAA5B,CAAzB;AA0MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM,wBAAwB,GAAG,oBAAoB,CAAC,MAArB,CAA4B;AACzD,IAAA,MADyD,oBAChD;AACL,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,OAAf,CAAd;;AAEA,UAAI,KAAK,KAAK,IAAd,EAAoB;AAChB,aAAK,CAAL,CAAO,yBAAP,EAAkC,IAAlC,CAAuC,KAAvC;AACH;;AAED,aAAO,IAAP;AACH;AATwD,GAA5B,CAAjC;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,EAAA,OAAO,CAAC,KAAR,CAAc,gBAAd,GAAiC,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;AAClD,IAAA,8BAA8B,EAAE,GADkB;AAGlD,IAAA,MAAM,EAAE;AACJ,+CAAyC,kBADrC;AAEJ,uCAAiC;AAF7B,KAH0C;;AAQlD;AACJ;AACA;AACI,IAAA,UAXkD,sBAWvC,OAXuC,EAW9B;AAChB,WAAK,oBAAL,GAA4B,OAAO,CAAC,mBAAR,IACA,KAAK,8BADjC;AAGA,WAAK,QAAL,GAAgB,IAAhB;AACA,WAAK,MAAL,GAAc,IAAd;AACH,KAjBiD;;AAmBlD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,MA9BkD,oBA8BzC;AAAA;;AACL,UAAM,SAAS,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,WAAf,CAAlB;AACA,UAAM,UAAU,GAAG,KAAK,KAAL,CAAW,UAA9B;AAEA,WAAK,QAAL,GAAgB,KAAK,GAAL,CAAS,QAAT,sBAAgC,SAAhC,gBACX,YADW,CACE,OADF,EACW,KAAK,KADhB,EACuB,QADvB,CAAhB;AAEA,WAAK,MAAL,GAAc,KAAK,CAAL,CAAO,wBAAP,CAAd;AACA,WAAK,eAAL,GAAuB,KAAK,CAAL,CAAO,kCAAP,CAAvB;AACA,WAAK,MAAL,GAAc,KAAK,eAAL,CAAqB,QAArB,CAA8B,wBAA9B,CAAd;AAEA;;AACA,UAAM,SAAS,GAAG,KAAK,MAAL,CAAY,QAAZ,EAAlB;;AAEA,MAAA,UAAU,CAAC,IAAX,CAAgB,UAAC,SAAD,EAAY,CAAZ,EAAkB;AAC9B,QAAA,MAAI,CAAC,gBAAL,CAAsB,SAAtB,EAAiC,SAAS,CAAC,CAAD,CAA1C;AACH,OAFD;AAIA;;AACA,WAAK,QAAL,CAAc,UAAd,EAA0B,KAA1B,EACc,UAAA,SAAS;AAAA,eAAI,MAAI,CAAC,gBAAL,CAAsB,SAAtB,CAAJ;AAAA,OADvB;;AAGA,WAAK,uBAAL;;AAEA,aAAO,IAAP;AACH,KAtDiD;;AAwDlD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,gBAtEkD,4BAsEjC,SAtEiC,EAsEtB,MAtEsB,EAsEd;AAChC,UAAM,UAAU,GAAG,SAAS,CAAC,GAAV,CAAc,OAAd,IACE,gBADF,GAEE,wBAFrB;AAIA,UAAM,OAAO,GAAG,IAAI,UAAJ,CAAe;AAC3B,QAAA,YAAY,EAAE,KAAK,KADQ;AAE3B,QAAA,EAAE,EAAE,MAFuB;AAG3B,QAAA,KAAK,EAAE,SAHoB;AAI3B,QAAA,mBAAmB,EAAE,KAAK;AAJC,OAAf,CAAhB;AAMA,MAAA,OAAO,CAAC,MAAR;;AAEA,UAAI,MAAM,KAAK,SAAf,EAA0B;AACtB,QAAA,OAAO,CAAC,GAAR,CACK,IADL,GAEK,QAFL,CAEc,KAAK,MAFnB,EAGK,SAHL,CAGe,KAAK,oBAHpB;AAIH;AACJ,KAzFiD;;AA2FlD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,gBArGkD,4BAqGjC,CArGiC,EAqG9B;AAChB,MAAA,CAAC,CAAC,eAAF;AACA,MAAA,CAAC,CAAC,cAAF;AAEA,WAAK,KAAL,CAAW,eAAX;AACH,KA1GiD;;AA4GlD;AACJ;AACA;AACA;AACA;AACI,IAAA,uBAjHkD,qCAiHxB;AACtB,UAAM,IAAI,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,UAAnB,EAA+B,GAA/B,EAAb;;AAEA,WAAK,eAAL,CAAqB,UAArB,CAAgC,IAAI,KAAK,QAAzC;AACH;AArHiD,GAArB,CAAjC;AAyHC,CA5ZD","file":"conditionSetView.js","sourcesContent":["(function() {\n\n\n/**\n * Base view for condition rows.\n *\n * This is responsible for handling common logic for condition row views. It's\n * mainly used to handle deletion of the row.\n */\nconst BaseConditionRowView = Backbone.View.extend({\n    tagName: 'li',\n    className: 'conditions-field-row',\n\n    events: {\n        'click .conditions-field-row-delete': '_onDeleteClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     rowAnimationSpeedMS (number):\n     *         The animation speed for adding/removing rows.\n     */\n    initialize(options) {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.slideUp(options.rowAnimationSpeedMS,\n                             this.remove.bind(this));\n        });\n    },\n\n    /**\n     * Callback for when the delete button is clicked.\n     *\n     * Deletes the model, which will in turn delete this row.\n     */\n    _onDeleteClicked(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.model.destroy();\n    }\n});\n\n\n/**\n * A view representing a row containing a choice, operator, and value.\n *\n * This is responsible for allowing a user to choose the values for one\n * condition. Choosing a choice will populate a list of operators, and choosing\n * an operator will show or hide a value field (depending on the operator).\n */\nconst ConditionRowView = BaseConditionRowView.extend({\n    template: _.template([\n        '<span class=\"conditions-field-action conditions-field-row-delete\">\\n',\n        ' <span class=\"fa fa-minus-circle\"></span>\\n',\n        '</span>\\n',\n        '<span class=\"conditions-field-row-options\">\\n',\n        ' <% if (error) { %>',\n        '  <ul class=\"error-list\"><li><%- error %></li></ul>\\n',\n        ' <% } %>',\n        ' <span class=\"conditions-field-choice\"></span>\\n',\n        ' <span class=\"conditions-field-operator\"></span>\\n',\n        ' <span class=\"conditions-field-value\"></span>\\n',\n        '</span>'\n    ].join('')),\n\n    events: _.extend({\n        'change .conditions-field-choice select': '_onSelectChoiceChanged',\n        'change .conditions-field-operator select': '_onSelectOperatorChanged'\n    }, BaseConditionRowView.prototype.events),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     conditionSet (Djblets.Forms.ConditionSet):\n     *         The condition set defining the choices allowed. This is\n     *         required.\n     *\n     *     rowAnimationSpeedMS (number):\n     *         The animation speed for adding/removing rows.\n     */\n    initialize(options) {\n        BaseConditionRowView.prototype.initialize.call(this, options);\n\n        this.conditionSet = options.conditionSet;\n\n        this._$choice = null;\n        this._$operator = null;\n        this._$valueWrapper = null;\n        this._$newValue = null;\n        this._defaultValueField = null;\n        this._valueField = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will create and populate the choice, operator and value fields,\n     * based on the contents of the model, and begin listening to events.\n     *\n     * Returns:\n     *     ConditionRowView:\n     *     The instance, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n\n        const $rowOptions = this.$el.children('.conditions-field-row-options');\n        const fieldName = this.conditionSet.get('fieldName');\n        const rowNum = this.model.get('id');\n\n        /* Build the list of choices. This will be populated up-front. */\n        this._$choice = $('<select/>')\n            .attr('name', `${fieldName}_choice[${rowNum}]`);\n\n        this.conditionSet.choices.each(choice => {\n            this._$choice.append($('<option/>')\n                .val(choice.id)\n                .text(choice.get('name')));\n        });\n\n        this._$choice\n            .appendTo($rowOptions.children('.conditions-field-choice'));\n\n        /*\n         * Build the list for the operators. This will be populated when\n         * calling _onChoiceChanged, and whenever the choice changes.\n         */\n        this._$operator = $('<select/>')\n            .attr('name', `${fieldName}_operator[${rowNum}]`)\n            .appendTo($rowOptions.children('.conditions-field-operator'));\n\n        this._$valueWrapper = $rowOptions.children('.conditions-field-value');\n\n        /*\n         * Bind all the events so the attributes and inputs reflect each other.\n         * We'll also be binding visibility.\n         */\n        this.listenTo(this.model, 'change:choice', this._onChoiceChanged);\n        this.listenTo(this.model, 'change:operator', this._onOperatorChanged);\n        this.listenTo(this.model, 'change:value', this._onValueChanged);\n\n        /* Set the initial state for the choice and operator from the model. */\n        this._onChoiceChanged();\n        this._onOperatorChanged();\n        this._onValueChanged();\n\n        return this;\n    },\n\n    /**\n     * Callback for when the choice attribute changes on the model.\n     *\n     * Updates the list of operators and sets up a new field for the value,\n     * getting rid of the old one.\n     */\n    _onChoiceChanged() {\n        const choice = this.model.get('choice');\n        const fieldName = this.conditionSet.get('fieldName');\n        const rowNum = this.model.get('id');\n\n        this._$choice.val(choice.id);\n\n        this._defaultValueField = choice.createValueField(\n            `${fieldName}_value[${rowNum}]`);\n\n        /* Rebuild the list of operators for the choice. */\n        this._$operator.empty();\n\n        choice.operators.each(operator => {\n            this._$operator.append(\n                $('<option/>')\n                    .val(operator.id)\n                    .text(operator.get('name')));\n        });\n\n        this._$operator.val(this.model.get('operator').id);\n    },\n\n    /**\n     * Callback for when the operator changes on the model.\n     *\n     * Updates the visibility of the value, based on whether the operator\n     * needs one.\n     */\n    _onOperatorChanged() {\n        const operator = this.model.get('operator');\n        let newValueField;\n\n        this._$operator.val(operator.id);\n        this._$valueWrapper.setVisible(operator.get('useValue'));\n\n        if (operator.get('valueField') !== null) {\n            const fieldName = this.conditionSet.get('fieldName');\n            const rowNum = this.model.get('id');\n\n            newValueField = operator.createValueField(\n                `${fieldName}_value[${rowNum}]`);\n        } else {\n            newValueField = this._defaultValueField;\n        }\n\n        if (newValueField !== this._valueField) {\n            /* Replace the old value field with a new one for this choice. */\n            if (this._$newValue !== null && newValueField !== this._valueField) {\n                this._$newValue.remove();\n                this._$newValue = null;\n            }\n\n            this._valueField = newValueField;\n\n            this._$newValue = this._valueField.render().$el\n                .appendTo(this._$valueWrapper);\n        }\n    },\n\n    /**\n     * Callback for when the value changes on the model.\n     *\n     * Updates the field to reflect the new value.\n     */\n    _onValueChanged() {\n        this._valueField.setValue(this.model.get('value'));\n    },\n\n    /**\n     * Callback for when a new condition choice is chosen in the drop-down.\n     *\n     * Updates the choice in the model.\n     */\n    _onSelectChoiceChanged() {\n        this.model.set('choice',\n                       this.conditionSet.choices.get(this._$choice.val()));\n    },\n\n    /**\n     * Callback for when a new operator is chosen in the drop-down.\n     *\n     * Updates the operator in the model.\n     */\n    _onSelectOperatorChanged() {\n        const choice = this.model.get('choice');\n\n        this.model.set('operator', choice.operators.get(this._$operator.val()));\n    }\n});\n\n\n/**\n * A view representing a disabled condition row.\n *\n * This is used for conditions that are considered invalid (ones whose choice\n * or operator could not be found when loading). The condition is shown in a\n * disabled state, with the raw value alongside it (if set). It can only be\n * removed.\n */\nconst DisabledConditionRowView = BaseConditionRowView.extend({\n    render() {\n        const value = this.model.get('value');\n\n        if (value !== null) {\n            this.$('.conditions-field-value').text(value);\n        }\n\n        return this;\n    }\n});\n\n\n/**\n * A view for creating, editing, and deleting a set of conditions.\n *\n * This starts off by listing all the conditions already configured (as\n * represented by the data in the associated model), and allows those\n * conditions to be edited/deleted or new ones to be created.\n *\n * Options:\n *     rowAnimationSpeedMS (number):\n *         The animation speed (in milliseconds) for adding or removing\n *         condition rows.\n */\nDjblets.Forms.ConditionSetView = Backbone.View.extend({\n    DEFAULT_ROW_ANIMATION_SPEED_MS: 300,\n\n    events: {\n        'click .conditions-field-add-condition': '_onAddRowClicked',\n        'change #conditions_mode input': '_onConditionModeChanged',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize(options) {\n        this._rowAnimationSpeedMS = options.rowAnimationSpeedMS ||\n                                    this.DEFAULT_ROW_ANIMATION_SPEED_MS;\n\n        this._$lastID = null;\n        this._$rows = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will construct a :js:class:`ConditionRowView` for each condition\n     * that has been provided, and hook up events to handle the creation or\n     * deletion of conditions.\n     *\n     * Returns:\n     *     Djblets.Forms.ConditionSetView:\n     *     This instance, for chaining.\n     */\n    render() {\n        const fieldName = this.model.get('fieldName');\n        const conditions = this.model.conditions;\n\n        this._$lastID = this.$el.children(`input[name=${fieldName}_last_id]`)\n            .bindProperty('value', this.model, 'lastID');\n        this._$mode = this.$('#conditions_mode input');\n        this._$rowsContainer = this.$('.conditions-field-rows-container');\n        this._$rows = this._$rowsContainer.children('.conditions-field-rows');\n\n        /* Render rows for any existing conditions. */\n        const $rowItems = this._$rows.children();\n\n        conditions.each((condition, i) => {\n            this._addConditionRow(condition, $rowItems[i]);\n        });\n\n        /* Begin listening for any events that impact the rows or inputs. */\n        this.listenTo(conditions, 'add',\n                      condition => this._addConditionRow(condition));\n\n        this._onConditionModeChanged();\n\n        return this;\n    },\n\n    /**\n     * Add a condition row to the UI.\n     *\n     * This is called when a new condition has been added in the models. It\n     * constructs a :js:class:`ConditionRowView` and renders it in the list.\n     *\n     * Args:\n     *     condition (Djblets.Forms.Condition):\n     *         The condition being added.\n     *\n     *     $rowEl (jQuery):\n     *         The element to use for the row. If not provided, a new one\n     *         will be created.\n     */\n    _addConditionRow(condition, $rowEl) {\n        const RowViewCls = condition.get('valid')\n                           ? ConditionRowView\n                           : DisabledConditionRowView;\n\n        const rowView = new RowViewCls({\n            conditionSet: this.model,\n            el: $rowEl,\n            model: condition,\n            rowAnimationSpeedMS: this._rowAnimationSpeedMS\n        });\n        rowView.render();\n\n        if ($rowEl === undefined) {\n            rowView.$el\n                .hide()\n                .appendTo(this._$rows)\n                .slideDown(this._rowAnimationSpeedMS);\n        }\n    },\n\n    /**\n     * Handler for when \"Add a new condition\" is clicked.\n     *\n     * This adds a new condition to the model, which will in turn render the\n     * new row to the list.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event.\n     */\n    _onAddRowClicked(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.model.addNewCondition();\n    },\n\n    /**\n     * Handler for when the condition mode changes.\n     *\n     * If the current mode is \"Always\", hide the conditions list.\n     */\n    _onConditionModeChanged() {\n        const mode = this._$mode.filter(':checked').val();\n\n        this._$rowsContainer.setVisible(mode !== 'always');\n    },\n});\n\n\n})();\n"]}