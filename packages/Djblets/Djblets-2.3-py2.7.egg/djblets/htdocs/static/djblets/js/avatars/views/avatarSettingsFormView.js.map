{"version":3,"sources":["avatarSettingsFormView.es6.js"],"names":[],"mappings":"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","file":"avatarSettingsFormView.js","sourcesContent":["(function() {\n\n\nconst [readyPromise, resolve] = Promise.withResolver();\n\n\n/**\n * A form for managing the settings of avatar services.\n *\n * This form lets you select the avatar service you wish to use, as well as\n * configure the settings for that avatar service.\n */\nDjblets.Avatars.SettingsFormView = Backbone.View.extend({\n    events: {\n        'change #id_avatar_service_id': '_onServiceChanged',\n        'submit': '_onSubmit'\n    },\n\n    /**\n     * Initialize the form.\n     */\n    initialize() {\n        console.assert(Djblets.Avatars.SettingsFormView.instance === null);\n        Djblets.Avatars.SettingsFormView.instance = this;\n        this._configForms = new Map();\n\n        this._$config = this.$('.avatar-service-configuration');\n\n        const services = this.model.get('services');\n        this.listenTo(this.model, 'change:serviceID',\n                      () => this._showHideForms());\n\n        /*\n         * The promise continuations will only be executed once the stack is\n         * unwound.\n         */\n        resolve();\n    },\n\n    /**\n     * Validate the current form upon submission.\n     *\n     * Args:\n     *     e (Event):\n     *         The form submission event.\n     */\n    _onSubmit(e) {\n        const serviceID = this.model.get('serviceID');\n        const currentForm = this._configForms.get(serviceID);\n\n        if (currentForm && !currentForm.validate()) {\n            e.preventDefault();\n        }\n    },\n\n    /**\n     * Render the child forms.\n     *\n     * This will show the for the currently selected service if it has one.\n     *\n     * Returns:\n     *     Djblets.Avatars.SettingsFormView:\n     *     This view (for chaining).\n     */\n    renderForms() {\n        for (const form of this._configForms.values()) {\n            form.render();\n        }\n\n        /*\n         * Ensure that if the browser sets the value of the <select> upon\n         * refresh that we update the model accordingly.\n         */\n        this.$('#id_avatar_service_id').change();\n        this._showHideForms(true);\n\n        return this;\n    },\n\n    /**\n     * Show or hide the configuration form.\n     */\n    _showHideForms() {\n        const services = this.model.get('services');\n        const serviceID = this.model.get('serviceID');\n        const currentForm = this._configForms.get(serviceID);\n        const previousID = this.model.previous('serviceID');\n        const previousForm = previousID\n            ? this._configForms.get(previousID)\n            : undefined;\n\n        if (previousForm && currentForm) {\n            previousForm.$el.hide();\n            currentForm.$el.show();\n        } else if (previousForm) {\n            previousForm.$el.hide();\n            this._$config.hide();\n        } else if (currentForm) {\n            currentForm.$el.show();\n            this._$config.show();\n        }\n\n    },\n\n    /**\n     * Handle the service being changed.\n     *\n     * Args:\n     *     e (Event):\n     *         The change event.\n     */\n    _onServiceChanged(e) {\n        const $target = $(e.target);\n        this.model.set('serviceID', $target.val());\n    }\n}, {\n    /**\n     * The form instance.\n     */\n    instance: null,\n\n    /**\n     * Add a configuration form to the instance.\n     *\n     * Args:\n     *     serviceID (string):\n     *         The unique ID for the avatar service.\n     *\n     *     formClass (constructor):\n     *         The view to use for the form.\n     */\n    addConfigForm(serviceID, formClass) {\n        Djblets.Avatars.SettingsFormView.instance._configForms.set(\n            serviceID,\n            new formClass({\n                el: $(`[data-avatar-service-id=\"${serviceID}\"]`),\n                model: Djblets.Avatars.SettingsFormView.instance.model\n            }));\n    },\n\n    /**\n     * A promise that is resolved when the avatar services form has been\n     * initialized.\n     */\n    ready: readyPromise\n});\n\n\n})();\n"]}