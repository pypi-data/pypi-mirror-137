{"version":3,"sources":["conditionSetModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,KAAR,CAAc,YAAd,GAA6B,QAAQ,CAAC,KAAT,CAAe,MAAf,CAAsB;AAC/C,EAAA,QAAQ,EAAE;AACN,IAAA,SAAS,EAAE,IADL;AAEN,IAAA,MAAM,EAAE;AAFF,GADqC;;AAM/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UAb+C,sBAapC,UAboC,EAaxB;AAAA;;AACnB,SAAK,OAAL,GAAe,IAAI,QAAQ,CAAC,UAAb,CAAwB,UAAU,CAAC,WAAnC,EAAgD;AAC3D,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,eADsC;AAE3D,MAAA,KAAK,EAAE;AAFoD,KAAhD,CAAf;AAKA,SAAK,UAAL,GAAkB,IAAI,QAAQ,CAAC,UAAb,CAAwB,UAAU,CAAC,cAAnC,EAAmD;AACjE,MAAA,KAAK,EAAE,eAAC,KAAD,EAAQ,OAAR,EAAoB;AACvB,YAAM,MAAM,GAAG,KAAK,CAAC,MAAN,IACA,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,KAAK,CAAC,QAAvB,CADf;;AAEA,YAAM,QAAQ,GAAG,KAAK,CAAC,QAAN,KACC,MAAM,GACJ,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,KAAK,CAAC,UAA3B,CADI,GAEJ,IAHH,CAAjB;;AAIA,YAAM,MAAM,GAAG,KAAI,CAAC,GAAL,CAAS,QAAT,CAAf;;AACA,YAAM,WAAW,GAAI,MAAM,KAAK,IAAX,GAAkB,CAAlB,GAAsB,MAAM,GAAG,CAApD;;AAEA,QAAA,KAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,WAAnB;;AAEA,eAAO,IAAI,OAAO,CAAC,KAAR,CAAc,SAAlB,CACH;AACI,UAAA,EAAE,EAAE,WADR;AAEI,UAAA,MAAM,EAAE,MAFZ;AAGI,UAAA,QAAQ,EAAE,QAHd;AAII,UAAA,KAAK,EAAE,KAAK,CAAC,KAJjB;AAKI,UAAA,KAAK,EAAE,KAAK,CAAC,KALjB;AAMI,UAAA,KAAK,EAAE,KAAK,CAAC;AANjB,SADG,EASH,OATG,CAAP;AAUH;AAvBgE,KAAnD,CAAlB;AAyBH,GA5C8C;;AA8C/C;AACJ;AACA;AACA;AACA;AACA;AACI,EAAA,eApD+C,6BAoD7B;AACd,QAAM,MAAM,GAAG,KAAK,OAAL,CAAa,KAAb,EAAf;AAEA,SAAK,UAAL,CAAgB,GAAhB,CAAoB;AAChB,MAAA,MAAM,EAAE,MADQ;AAEhB,MAAA,QAAQ,EAAE,MAAM,CAAC,SAAP,CAAiB,KAAjB;AAFM,KAApB;AAIH,GA3D8C;;AA6D/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,KA3E+C,iBA2EzC,IA3EyC,EA2EnC;AACR,WAAO;AACH,MAAA,SAAS,EAAE,IAAI,CAAC;AADb,KAAP;AAGH;AA/E8C,CAAtB,CAA7B","file":"conditionSetModel.js","sourcesContent":["/**\n * A set of configured conditions, and available choices.\n *\n * This tracks all the conditions that are being configured, handling assigning\n * each one an ID and tracking their state. It also provides information on\n * each choice available for a condition.\n *\n * Attributes:\n *     choices (Backbone.Collection):\n *         A collection of possible choices for a condition. Each entry is a\n *         :js:class:`Djblets.Forms.ConditionChoice`.\n *\n *     conditions (Backbone.Collection):\n *         A collection of configured conditions. Each entry is a\n *         :js:class:`Djblets.Forms.Condition`.\n *\n * Model Attributes:\n *     fieldName (string):\n *         The name of the form field for the main conditions element.\n *\n *     lastID (number):\n *         The last condition row ID used.\n */\nDjblets.Forms.ConditionSet = Backbone.Model.extend({\n    defaults: {\n        fieldName: null,\n        lastID: null\n    },\n\n    /**\n     * Initialize the model.\n     *\n     * Args:\n     *     attributes (object):\n     *         Attribute values passed to the constructor.\n     */\n    initialize(attributes) {\n        this.choices = new Backbone.Collection(attributes.choicesData, {\n            model: Djblets.Forms.ConditionChoice,\n            parse: true\n        });\n\n        this.conditions = new Backbone.Collection(attributes.conditionsData, {\n            model: (attrs, options) => {\n                const choice = attrs.choice ||\n                               this.choices.get(attrs.choiceID);\n                const operator = attrs.operator ||\n                                 (choice\n                                  ? choice.operators.get(attrs.operatorID)\n                                  : null);\n                const lastID = this.get('lastID');\n                const conditionID = (lastID === null ? 0 : lastID + 1);\n\n                this.set('lastID', conditionID);\n\n                return new Djblets.Forms.Condition(\n                    {\n                        id: conditionID,\n                        choice: choice,\n                        operator: operator,\n                        value: attrs.value,\n                        valid: attrs.valid,\n                        error: attrs.error\n                    },\n                    options);\n            }\n        });\n    },\n\n    /**\n     * Add a new condition.\n     *\n     * This will construct a new condition with defaults and add it to the\n     * collection.\n     */\n    addNewCondition() {\n        const choice = this.choices.first();\n\n        this.conditions.add({\n            choice: choice,\n            operator: choice.operators.first()\n        });\n    },\n\n    /**\n     * Parse the attribute data passed to the model.\n     *\n     * This will extract only the ``fieldName`` attribute, leaving the rest\n     * to be specially handled by :js:func:`initialize`.\n     *\n     * Args:\n     *     data (object):\n     *         The attribute data passed to the model.\n     *\n     * Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(data) {\n        return {\n            fieldName: data.fieldName\n        };\n    }\n});\n"]}