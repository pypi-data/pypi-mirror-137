{"version":3,"sources":["conditionChoiceModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,KAAR,CAAc,eAAd,GAAgC,QAAQ,CAAC,KAAT,CAAe,MAAf,CAAsB;AAClD,EAAA,QAAQ,EAAE;AACN,IAAA,IAAI,EAAE,IADA;AAEN,IAAA,UAAU,EAAE;AAFN,GADwC;;AAMlD;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UAbkD,sBAavC,UAbuC,EAa3B;AACnB,SAAK,SAAL,GAAiB,IAAI,QAAQ,CAAC,UAAb,CAAwB,UAAU,CAAC,SAAnC,EAA8C;AAC3D,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,CAAc,iBADsC;AAE3D,MAAA,KAAK,EAAE;AAFoD,KAA9C,CAAjB;AAIH,GAlBiD;;AAoBlD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,gBAlCkD,4BAkCjC,SAlCiC,EAkCtB;AACxB,QAAM,UAAU,GAAG,KAAK,GAAL,CAAS,YAAT,CAAnB;AAEA,WAAO,IAAI,UAAU,CAAC,SAAf,CAAyB,CAAC,CAAC,QAAF,CAAW;AACvC,MAAA,KAAK,EAAE,IAAI,UAAU,CAAC,UAAf,CAA0B,CAAC,CAAC,QAAF,CAAW;AACxC,QAAA,SAAS,EAAE;AAD6B,OAAX,EAE9B,UAAU,CAAC,SAFmB,CAA1B;AADgC,KAAX,EAI7B,UAAU,CAAC,QAJkB,CAAzB,CAAP;AAKH,GA1CiD;;AA4ClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,KAvDkD,iBAuD5C,IAvD4C,EAuDtC;AACR,WAAO;AACH,MAAA,EAAE,EAAE,IAAI,CAAC,EADN;AAEH,MAAA,IAAI,EAAE,IAAI,CAAC,IAFR;AAGH,MAAA,UAAU,EAAE,OAAO,CAAC,KAAR,CAAc,eAAd,CAA8B,mBAA9B,CACR,IAAI,CAAC,UADG;AAHT,KAAP;AAMH;AA9DiD,CAAtB,EA+D7B;AACC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,mBAhBD,+BAgBqB,IAhBrB,EAgB2B;AACtB,QAAI,UAAU,GAAG,IAAjB;;AAEA,QAAI,IAAI,KAAK,SAAb,EAAwB;AACpB,UAAM,cAAc,GAAG,IAAI,CAAC,KAA5B;AACA,UAAM,aAAa,GAAG,IAAI,CAAC,IAA3B;AAEA,MAAA,UAAU,GAAG;AACT,QAAA,UAAU,EAAE,OAAO,CAAC,eAAR,CAAwB,cAAc,CAAC,SAAvC,CADH;AAET,QAAA,SAAS,EAAE,cAAc,CAAC,IAFjB;AAGT,QAAA,SAAS,EAAE,OAAO,CAAC,eAAR,CAAwB,aAAa,CAAC,SAAtC,CAHF;AAIT,QAAA,QAAQ,EAAE,aAAa,CAAC;AAJf,OAAb;AAMH;;AAED,WAAO,UAAP;AACH;AAhCF,CA/D6B,CAAhC","file":"conditionChoiceModel.js","sourcesContent":["/**\n * A possible choice for a condition.\n *\n * This represents a single choice for a condition, such as a summary or list of\n * objects, that a condition processor will inspect and match against\n * configurations. A condition contains a list of possible operators (such as\n * \"Is,\" \"Is not,\" \"Starts with,\" etc.) and a field for handling any values\n * for the choice and operator.\n *\n * Attributes:\n *     operators (Backbone.Collection):\n *         A collection of operators that are valid for this condition. Each\n *         entry is a :js:class:`Djblets.Forms.ConditionOperator`.\n *\n * Model Attributes:\n *     name (string):\n *         The name of the condition. This is what will be displayed to the\n *         user.\n *\n *     valueField (object):\n *         Information about the object handling the storage and manipulation\n *         of values for the condition. This will be the default value field\n *         for all operators on the choice, but operators can provide their own.\n *\n *         This will have ``modelClass` and ``viewClass`` keys pointing to the\n *         object constructors for the model and view for the value field,\n *         along with ``modelData`` and ``viewData`` controlling the model\n *         attributes and view options, respectively.\n */\nDjblets.Forms.ConditionChoice = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        valueField: null\n    },\n\n    /**\n     * Initialize the choice.\n     *\n     * Attributes:\n     *     operators (Array):\n     *         The list of operators to populate the operators collection.\n     */\n    initialize(attributes) {\n        this.operators = new Backbone.Collection(attributes.operators, {\n            model: Djblets.Forms.ConditionOperator,\n            parse: true\n        });\n    },\n\n    /**\n     * Create the value field for the choice.\n     *\n     * This will construct a new instance of the view used to take values for\n     * this choice.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name for the form field.\n     *\n     * Returns:\n     *     Djblets.Forms.BaseConditionValueFieldView:\n     *     The view for the field.\n     */\n    createValueField(fieldName) {\n        const valueField = this.get('valueField');\n\n        return new valueField.viewClass(_.defaults({\n            model: new valueField.modelClass(_.defaults({\n                fieldName: fieldName\n            }, valueField.modelData))\n        }, valueField.viewData));\n    },\n\n    /**\n     * Parse the attribute data passed to the model.\n     *\n     * Args:\n     *     data (object):\n     *         The attribute data passed to the model.\n     *\n     *  Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(data) {\n        return {\n            id: data.id,\n            name: data.name,\n            valueField: Djblets.Forms.ConditionChoice.parseValueFieldData(\n                data.valueField)\n        };\n    }\n}, {\n    /**\n     * Parse value field data into a standard structure.\n     *\n     * This can be used by any choice-related class that needs to deal with\n     * value fields. It's intended for internal use only.\n     *\n     * Args:\n     *     data (object):\n     *         The value field data to parse.\n     *\n     * Returns:\n     *     dict:\n     *     The resulting value field information, or ``null`` if the data\n     *     provided is ``undefined``.\n     */\n    parseValueFieldData(data) {\n        let valueField = null;\n\n        if (data !== undefined) {\n            const fieldModelInfo = data.model;\n            const fieldViewInfo = data.view;\n\n            valueField = {\n                modelClass: Djblets.getObjectByName(fieldModelInfo.className),\n                modelData: fieldModelInfo.data,\n                viewClass: Djblets.getObjectByName(fieldViewInfo.className),\n                viewData: fieldViewInfo.data\n            };\n        }\n\n        return valueField;\n    }\n});\n"]}