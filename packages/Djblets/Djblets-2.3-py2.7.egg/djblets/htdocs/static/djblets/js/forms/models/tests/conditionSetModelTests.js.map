{"version":3,"sources":["conditionSetModelTests.es6.js"],"names":[],"mappings":"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","file":"conditionSetModelTests.js","sourcesContent":["suite('djblets/forms/models/ConditionSet', function() {\n    describe('Initialization', function() {\n        it('choicesData parsed', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                fieldName: 'my-conditions',\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice'\n                }]\n            });\n\n            expect(conditionSet.choices.length).toBe(1);\n            expect(conditionSet.choices.at(0).id).toBe('my-choice');\n            expect(conditionSet.get('lastID')).toBe(null);\n        });\n\n        it('conditionsData parsed', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [\n                        {\n                            id: 'my-op-1',\n                            name: 'My Op 1'\n                        },\n                        {\n                            id: 'my-op-2',\n                            name: 'My Op 2'\n                        }\n                    ]\n                }],\n                conditionsData: [\n                    {\n                        choiceID: 'my-choice',\n                        operatorID: 'my-op-1',\n                        value: 'abc123',\n                        valid: false,\n                        error: 'My error'\n                    },\n                    {\n                        choiceID: 'my-choice',\n                        operatorID: 'my-op-2',\n                        value: 42,\n                        valid: true\n                    }\n                ]\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(2);\n\n            let condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op-1');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            condition = conditions.at(1);\n            expect(condition.id).toBe(1);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op-2');\n            expect(condition.get('value')).toBe(42);\n            expect(condition.get('valid')).toBe(true);\n            expect(condition.get('error')).toBe(null);\n\n            expect(conditionSet.get('lastID')).toBe(1);\n        });\n\n        it('conditionsData parsed with bad choiceID', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [\n                        {\n                            id: 'my-op-1',\n                            name: 'My Op 1'\n                        },\n                        {\n                            id: 'my-op-2',\n                            name: 'My Op 2'\n                        }\n                    ]\n                }],\n                conditionsData: [\n                    {\n                        choiceID: 'invalid-choice',\n                        operatorID: 'my-op-1',\n                        value: 'abc123',\n                        valid: false,\n                        error: 'My error'\n                    }\n                ]\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice')).toBe(null);\n            expect(condition.get('operator')).toBe(null);\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n    });\n\n    describe('Adding to conditions collection', function() {\n        let conditionSet;\n\n        beforeEach(function() {\n            conditionSet = new Djblets.Forms.ConditionSet({\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [\n                        {\n                            id: 'my-op',\n                            name: 'My Op'\n                        }\n                    ]\n                }]\n            });\n\n            expect(conditionSet.get('lastID')).toBe(null);\n        });\n\n        it('Using choice and operator IDs', function() {\n            conditionSet.conditions.add({\n                choiceID: 'my-choice',\n                operatorID: 'my-op',\n                value: 'abc123',\n                valid: false,\n                error: 'My error'\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n\n        it('Using choice instance', function() {\n            conditionSet.conditions.add({\n                choiceID: conditionSet.choices.at(0),\n                operatorID: 'my-op',\n                value: 'abc123',\n                valid: false,\n                error: 'My error'\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n\n        it('Using operator instance', function() {\n            conditionSet.conditions.add({\n                choiceID: 'my-choice',\n                operatorID: conditionSet.choices.at(0).operators.at(0),\n                value: 'abc123',\n                valid: false,\n                error: 'My error'\n            });\n\n            const conditions = conditionSet.conditions;\n            expect(conditions.length).toBe(1);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n            expect(condition.get('value')).toBe('abc123');\n            expect(condition.get('valid')).toBe(false);\n            expect(condition.get('error')).toBe('My error');\n\n            expect(conditionSet.get('lastID')).toBe(0);\n        });\n    });\n\n    describe('Methods', function() {\n        it('addNewCondition', function() {\n            const conditionSet = new Djblets.Forms.ConditionSet({\n                fieldName: 'my-conditions',\n                choicesData: [{\n                    id: 'my-choice',\n                    name: 'My Choice',\n                    operators: [{\n                        id: 'my-op',\n                        name: 'My Op'\n                    }]\n                }]\n            });\n\n            const conditions = conditionSet.conditions;\n\n            expect(conditions.length).toBe(0);\n            expect(conditionSet.get('lastID')).toBe(null);\n\n            conditionSet.addNewCondition();\n\n            expect(conditions.length).toBe(1);\n            expect(conditionSet.get('lastID')).toBe(0);\n\n            const condition = conditions.at(0);\n            expect(condition.id).toBe(0);\n            expect(condition.get('choice').id).toBe('my-choice');\n            expect(condition.get('operator').id).toBe('my-op');\n        });\n    });\n});\n"]}