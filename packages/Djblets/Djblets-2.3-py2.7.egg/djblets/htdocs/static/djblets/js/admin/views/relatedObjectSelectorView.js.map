{"version":3,"sources":["relatedObjectSelectorView.es6.js"],"names":[],"mappings":"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","file":"relatedObjectSelectorView.js","sourcesContent":["/**\n * A widget to select related objects using search and autocomplete.\n *\n * This is particularly useful for models where there can be a ton of rows in\n * the database. The built-in admin widgets provide a pretty poor\n * experience--either populating the list with the entire contents of the\n * table, which is super slow, or just listing PKs, which isn't usable.\n */\nDjblets.RelatedObjectSelectorView = Backbone.View.extend({\n    className: 'related-object-selector',\n\n    /**\n     * The search placeholder text.\n     *\n     * Subclasses should override this.\n     */\n    searchPlaceholderText: '',\n\n    /**\n     * The element template.\n     *\n     * Subclasses may override this to change rendering.\n     */\n    template: _.template(dedent`\n        <select placeholder=\"<%- searchPlaceholderText %>\"\n                class=\"related-object-options\"></select>\n        <% if (multivalued) { %>\n        <ul class=\"related-object-selected\"></ul>\n        <% } %>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $input (jQuery):\n     *         The ``<input>`` element which should be populated with the list\n     *         of selected item PKs.\n     *\n     *     initialOptions (Array of object):\n     *         The initially selected options.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multiple\n     *         values.\n     *\n     *     selectizeOptions (object):\n     *          Additional options to pass in to $.selectize.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$input = options.$input;\n        this._selectizeOptions = options.selectizeOptions;\n        this._selectedIDs = new Map();\n\n        _.bindAll(this, 'renderOption');\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.RelatedObjectSelectorView:\n     *     This object, for chaining.\n     */\n    render() {\n        const self = this;\n\n        this.$el.html(this.template({\n            searchPlaceholderText: this.searchPlaceholderText,\n            multivalued: this.options.multivalued,\n        }));\n\n        this._$selected = this.$('.related-object-selected');\n\n        const renderItem = this.options.multivalued\n                           ? () => ''\n                           : this.renderOption;\n\n        const selectizeOptions = _.defaults(this._selectizeOptions, {\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            preload: 'focus',\n            render: {\n                item: renderItem,\n                option: this.renderOption,\n            },\n            load(query, callback) {\n                self.loadOptions(\n                    query,\n                    data => callback(data.filter(\n                        item => !self._selectedIDs.has(item.id)\n                    ))\n                );\n            },\n            onChange(selected) {\n                if (selected) {\n                    self._onItemSelected(this.options[selected], true);\n\n                    if (self.options.multivalued) {\n                        this.removeOption(selected);\n                    }\n                }\n\n                if (self.options.multivalued) {\n                    this.clear();\n                }\n            },\n        });\n\n        if (!this.options.multivalued && this.options.initialOptions.length) {\n            const item = this.options.initialOptions[0];\n            selectizeOptions.options = this.options.initialOptions;\n            selectizeOptions.items = [item[selectizeOptions.valueField]];\n        }\n\n        this.$('select').selectize(selectizeOptions);\n\n        if (this.options.multivalued) {\n            this.options.initialOptions.forEach(\n                item => this._onItemSelected(item, false)\n            );\n        }\n\n        this._$input.after(this.$el);\n        return this;\n    },\n\n    /**\n     * Update the \"official\" ``<input>`` element.\n     *\n     * This copies the list of selected item IDs into the form field which will\n     * be submitted.\n     */\n    _updateInput() {\n        this._$input.val(Array.from(this._selectedIDs.keys()).join(','));\n    },\n\n    /**\n     * Callback for when an item is selected.\n     *\n     * Args:\n     *     item (object):\n     *         The newly-selected item.\n     *\n     *     addToInput (boolean):\n     *         Whether the ID of the item should be added to the ``<input>``\n     *         field.\n     *\n     *         This will be ``false`` when populating the visible list from the\n     *         value of the form field when the page is initially loaded, and\n     *         ``true`` when adding items interactively.\n     */\n    _onItemSelected(item, addToInput) {\n        if (this.options.multivalued) {\n            const $li = $('<li>').html(this.renderOption(item));\n            const $items = this._$selected.children();\n            const text = $li.text();\n\n            $('<span class=\"remove-item fa fa-close\">')\n                .click(() => this._onItemRemoved($li, item))\n                .appendTo($li);\n\n            let attached = false;\n\n            for (let i = 0; i < $items.length; i++) {\n                const $item = $items.eq(i);\n\n                if ($item.text().localeCompare(text) > 0) {\n                    $item.before($li);\n                    attached = true;\n                    break;\n                }\n            }\n\n            if (!attached) {\n                $li.appendTo(this._$selected);\n            }\n\n            this._selectedIDs.set(item.id, item);\n\n            if (addToInput) {\n                this._updateInput();\n            }\n        } else {\n            this._selectedIDs = new Map([[item.id, item]]);\n            this._updateInput();\n        }\n    },\n\n    /**\n     * Callback for when an item is removed from the list.\n     *\n     * Args:\n     *     $li (jQuery):\n     *         The element representing the item in the selected list.\n     *\n     *     item (object):\n     *         The item being removed.\n     */\n    _onItemRemoved($li, item) {\n        $li.remove();\n        this._selectedIDs.delete(item.id);\n        this._updateInput();\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * This should be overridden in order to render type-specific data.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(/* item */) {\n        return '';\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * This should be overridden in order to make necessary API requests.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        callback();\n    },\n});\n"]}