{"version":3,"sources":["conditionOperatorModelTests.es6.js"],"names":[],"mappings":"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","file":"conditionOperatorModelTests.js","sourcesContent":["suite('djblets/forms/models/ConditionOperator', function() {\n    describe('Initialization', function() {\n        it('With parse and data', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator',\n                useValue: true,\n                valueField: {\n                    model: {\n                        className: 'Djblets.Forms.ConditionValueField',\n                        data: {\n                            myModelKey: 'my-value'\n                        }\n                    },\n                    view: {\n                        className: 'Djblets.Forms.ConditionValueFormFieldView',\n                        data: {\n                            myViewKey: 'my-value'\n                        }\n                    }\n                }\n            }, {\n                parse: true\n            });\n\n            expect(op.id).toBe('my-op');\n            expect(op.get('name')).toBe('My Operator');\n            expect(op.get('useValue')).toBe(true);\n            expect(op.get('valueField')).toEqual({\n                modelClass: Djblets.Forms.ConditionValueField,\n                modelData: {\n                    myModelKey: 'my-value'\n                },\n                viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                viewData: {\n                    myViewKey: 'my-value'\n                }\n            });\n        });\n\n        it('With parse and data, but no valueField', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator',\n                useValue: true\n            }, {\n                parse: true\n            });\n\n            expect(op.id).toBe('my-op');\n            expect(op.get('name')).toBe('My Operator');\n            expect(op.get('valueField')).toBe(null);\n            expect(op.get('useValue')).toBe(true);\n        });\n    });\n\n    describe('createValueField', function() {\n        it('With custom valueField', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator',\n                valueField: {\n                    modelClass: Djblets.Forms.ConditionValueField,\n                    modelData: {\n                        myModelKey: 'my-value'\n                    },\n                    viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                    viewData: {\n                        myViewKey: 'my-value'\n                    }\n                }\n            });\n\n            const valueField = op.createValueField('my-field');\n            expect(valueField.model.get('fieldName')).toBe('my-field');\n        });\n\n        it('Without custom valueField', function() {\n            const op = new Djblets.Forms.ConditionOperator({\n                id: 'my-op',\n                name: 'My Operator'\n            });\n\n            expect(() => op.createValueField('my-field')).toThrowError(\n                'This operator does not have a custom valueField.');\n        });\n    });\n});\n"]}