{"version":3,"sources":["extensionManagerView.es6.js"],"names":[],"mappings":"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","file":"extensionManagerView.js","sourcesContent":["(function() {\n\n\n/**\n * An item in the list of registered extensions.\n *\n * This will contain information on the extension and actions for toggling\n * the enabled state, reloading the extension, or configuring the extension.\n */\nconst ExtensionItem = Djblets.Config.ListItem.extend({\n    defaults: _.defaults({\n        extension: null,\n    }, Djblets.Config.ListItem.prototype.defaults),\n\n    /**\n     * Initialize the item.\n     *\n     * This will set up the initial state and then listen for any changes\n     * to the extension's state (caused by enabling/disabling/reloading the\n     * extension).\n     */\n    initialize() {\n        Djblets.Config.ListItem.prototype.initialize.apply(this, arguments);\n\n        this._updateActions();\n        this._updateItemState();\n\n        this.listenTo(\n            this.get('extension'),\n            'change:loadable change:loadError change:enabled',\n            () => {\n                this._updateItemState();\n                this._updateActions();\n            });\n    },\n\n    /**\n     * Update the actions for the extension.\n     *\n     * If the extension is disabled, this will add an Enabled action.\n     *\n     * If it's enabled, but has a load error, it will add a Reload action.\n     *\n     * If it's enabled, it will provide actions for Configure and Database,\n     * if enabled by the extension, along with a Disable action.\n     */\n    _updateActions() {\n        const extension = this.get('extension');\n        const actions = [];\n\n        if (!extension.get('loadable')) {\n            /* Add an action for reloading the extension. */\n            actions.push({\n                id: 'reload',\n                label: _`Reload`,\n            });\n        } else if (extension.get('enabled')) {\n            /*\n             * Show all the actions for enabled extensions.\n             *\n             * Note that the order used is here to ensure visual alignment\n             * for most-frequently-used options.\n             */\n            const configURL = extension.get('configURL');\n            const dbURL = extension.get('dbURL');\n\n            if (dbURL) {\n                actions.push({\n                    id: 'database',\n                    label: _`Database`,\n                    url: dbURL,\n                });\n            }\n\n            if (configURL) {\n                actions.push({\n                    id: 'configure',\n                    label: _`Configure`,\n                    primary: true,\n                    url: configURL,\n                });\n            }\n\n            actions.push({\n                id: 'disable',\n                label: _`Disable`,\n                danger: true,\n            });\n        } else {\n            /* Add an action for enabling a disabled extension. */\n            actions.push({\n                id: 'enable',\n                label: _`Enable`,\n                primary: true,\n            });\n        }\n\n        this.setActions(actions);\n    },\n\n    /**\n     * Update the state of this item.\n     *\n     * This will set the \"error\", \"enabled\", or \"disabled\" state of the\n     * item, depending on the corresponding state in the extension.\n     */\n    _updateItemState() {\n        const extension = this.get('extension');\n        let itemState;\n\n        if (!extension.get('loadable')) {\n            itemState = 'error';\n        } else if (extension.get('enabled')) {\n            itemState = 'enabled';\n        } else {\n            itemState = 'disabled';\n        }\n\n        this.set('itemState', itemState);\n    },\n});\n\n\n/**\n * Displays an extension in the Manage Extensions list.\n *\n * This will show information about the extension, and provide links for\n * enabling/disabling the extension, and (depending on the extension's\n * capabilities) configuring it or viewing its database.\n */\nconst ExtensionItemView = Djblets.Config.TableItemView.extend({\n    className: 'djblets-c-extension-item djblets-c-config-forms-list__item',\n\n    actionHandlers: {\n        'disable': '_onDisableClicked',\n        'enable': '_onEnableClicked',\n        'reload': '_onReloadClicked',\n    },\n\n    template: _.template(dedent`\n        <td class=\"djblets-c-config-forms-list__item-main\">\n         <div class=\"djblets-c-extension-item__header\">\n          <h3 class=\"djblets-c-extension-item__name\"><%- name %></h3>\n          <span class=\"djblets-c-extension-item__version\"><%- version %></span>\n          <div class=\"djblets-c-extension-item__author\">\n           <% if (authorURL) { %>\n            <a href=\"<%- authorURL %>\"><%- author %></a>\n           <% } else { %>\n            <%- author %>\n           <% } %>\n          </div>\n         </div>\n         <p class=\"djblets-c-extension-item__description\">\n          <%- summary %>\n         </p>\n         <% if (!loadable) { %>\n          <pre class=\"djblets-c-extension-item__load-error\"><%- loadError %></pre>\n         <% } %>\n        </td>\n        <td class=\"djblets-c-config-forms-list__item-state\"></td>\n        <td></td>\n    `),\n\n    /**\n     * Return context data for rendering the item's template.\n     *\n     * Returns:\n     *     object:\n     *     Context data for the render.\n     */\n    getRenderContext() {\n        return this.model.get('extension').attributes;\n    },\n\n    /**\n     * Handle a click on the Disable action.\n     *\n     * This will make an asynchronous request to disable the extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the disable request. This will resolve once the\n     *     API has handled the request.\n     */\n    _onDisableClicked() {\n        return this.model.get('extension').disable()\n            .catch(error => {\n                alert(_`Failed to disable the extension: ${error.message}.`);\n            });\n    },\n\n    /**\n     * Handle a click on the Enable action.\n     *\n     * This will make an asynchronous request to enable the extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the enable request. This will resolve once the\n     *     API has handled the request.\n     */\n    _onEnableClicked() {\n        return this.model.get('extension').enable()\n            .catch(error => {\n                alert(_`Failed to enable the extension: ${error.message}.`);\n            });\n    },\n\n    /**\n     * Handle a click on the Reload action.\n     *\n     * This will trigger an event on the item that tells the extension\n     * manager to perform a full reload of all extensions, this one included.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise for the enable request. This will never resolve, in\n     *     practice, but is returned to enable the action's spinner until\n     *     the page reloads.\n     */\n    _onReloadClicked() {\n        return new Promise(() => this.model.trigger('needsReload'));\n    },\n});\n\n\n/**\n * Displays the interface showing all installed extensions.\n *\n * This loads the list of installed extensions and displays each in a list.\n */\nDjblets.ExtensionManagerView = Backbone.View.extend({\n    events: {\n        'click .djblets-c-extensions__reload': '_reloadFull',\n    },\n\n    listItemsCollectionType: Djblets.Config.ListItems,\n    listItemType: ExtensionItem,\n    listItemViewType: ExtensionItemView,\n    listViewType: Djblets.Config.TableView,\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.list = new Djblets.Config.List(\n            {},\n            {\n                collection: new this.listItemsCollectionType(\n                    [],\n                    {\n                        model: this.listItemType,\n                    })\n            });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     Djblets.ExtensionManagerView:\n     *     This object, for chaining.\n     */\n    render() {\n        const model = this.model;\n        const list = this.list;\n\n        this.listView = new this.listViewType({\n            el: this.$('.djblets-c-config-forms-list'),\n            model: list,\n            ItemView: this.listItemViewType,\n        });\n        this.listView.render().$el\n            .removeAttr('aria-busy')\n            .addClass('-all-items-are-multiline');\n\n        this._$listContainer = this.listView.$el.parent();\n\n        this.listenTo(model, 'loading', () => list.collection.reset());\n        this.listenTo(model, 'loaded', this._onLoaded);\n        model.load();\n\n        return this;\n    },\n\n    /**\n     * Handler for when the list of extensions is loaded.\n     *\n     * Renders each extension in the list. If the list is empty, this will\n     * display that there are no extensions installed.\n     */\n    _onLoaded() {\n        const items = this.list.collection;\n\n        this.model.installedExtensions.each(extension => {\n            const item = items.add({\n                extension: extension,\n            });\n\n            this.listenTo(item, 'needsReload', this._reloadFull);\n        });\n    },\n\n    /**\n     * Perform a full reload of the list of extensions on the server.\n     *\n     * This submits our form, which is set in the template to tell the\n     * ExtensionManager to do a full reload.\n     */\n    _reloadFull() {\n        this.el.submit();\n    },\n});\n\n\n})();\n"]}