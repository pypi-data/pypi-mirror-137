{"version":3,"sources":["conditionChoiceModelTests.es6.js"],"names":[],"mappings":"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","file":"conditionChoiceModelTests.js","sourcesContent":["suite('djblets/forms/models/ConditionChoice', function() {\n    describe('Initialization', function() {\n        it('With parse and data', function() {\n            const choice = new Djblets.Forms.ConditionChoice({\n                id: 'my-choice',\n                name: 'My Choice',\n                valueField: {\n                    model: {\n                        className: 'Djblets.Forms.ConditionValueField',\n                        data: {\n                            myModelKey: 'my-value'\n                        }\n                    },\n                    view: {\n                        className: 'Djblets.Forms.ConditionValueFormFieldView',\n                        data: {\n                            myViewKey: 'my-value'\n                        }\n                    }\n                },\n                operators: [\n                    {\n                        id: 'my-op',\n                        name: 'My Op',\n                        useValue: false\n                    }\n                ]\n            }, {\n                parse: true\n            });\n\n            expect(choice.id).toBe('my-choice');\n            expect(choice.get('name')).toBe('My Choice');\n            expect(choice.get('valueField')).toEqual({\n                modelClass: Djblets.Forms.ConditionValueField,\n                modelData: {\n                    myModelKey: 'my-value'\n                },\n                viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                viewData: {\n                    myViewKey: 'my-value'\n                }\n            });\n            expect(choice.operators.length).toBe(1);\n\n            const op = choice.operators.at(0);\n            expect(op.id).toBe('my-op');\n            expect(op.get('name')).toBe('My Op');\n            expect(op.get('useValue')).toBe(false);\n        });\n    });\n\n    describe('Methods', function() {\n        it('createValueField', function() {\n            const choice = new Djblets.Forms.ConditionChoice({\n                id: 'my-choice',\n                name: 'My Choice',\n                valueField: {\n                    modelClass: Djblets.Forms.ConditionValueField,\n                    modelData: {\n                        myModelKey: 'my-value'\n                    },\n                    viewClass: Djblets.Forms.ConditionValueFormFieldView,\n                    viewData: {\n                        myViewKey: 'my-value'\n                    }\n                }\n            });\n\n            const valueField = choice.createValueField('my-field');\n            expect(valueField.model.get('fieldName')).toBe('my-field');\n        });\n    });\n});\n"]}