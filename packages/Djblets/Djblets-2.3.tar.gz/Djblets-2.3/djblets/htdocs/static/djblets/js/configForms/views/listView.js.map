{"version":3,"sources":["listView.es6.js"],"names":[],"mappings":"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","file":"listView.js","sourcesContent":["/**\n * Display a list of items.\n *\n * This will render each item in a list, and update that list when the\n * items in the collection changes.\n *\n * It can also filter the displayed list of items.\n *\n * If loading the list through the API, this will display a loading indicator\n * until the items have been loaded.\n *\n * If 'options.animateItems' is true, then newly added or removed items will\n * be faded in/out.\n */\nDjblets.Config.ListView = Backbone.View.extend({\n    tagName: 'ul',\n    className: 'djblets-c-config-forms-list',\n    defaultItemView: Djblets.Config.ListItemView,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object, optional):\n     *         The view options.\n     *\n     * Option Args:\n     *     ItemView (object):\n     *         The item view class to use. This argument defaults to\n     *         :js:attr:`defaultItemView`.\n     *\n     *     animateItems (boolean):\n     *         Whether or not items should be animated. This argument\n     *         defaults to ``false``.\n     */\n    initialize(options={}) {\n        const collection = this.model.collection;\n\n        this.ItemView = options.ItemView || this.defaultItemView;\n        this.views = [];\n        this.animateItems = !!options.animateItems;\n\n        this.once('rendered', () => {\n            this.listenTo(collection, 'add', this._addItem);\n            this.listenTo(collection, 'remove', this._removeItem);\n            this.listenTo(collection, 'reset', this._renderItems);\n        });\n    },\n\n    /**\n     * Return the body element.\n     *\n     * This can be overridden by subclasses if the list items should be\n     * rendered to a child element of this view.\n     *\n     * Returns:\n     *     jQuery:\n     *     Where the list view should be rendered.\n     */\n    getBody() {\n        return this.$el;\n    },\n\n    /**\n     * Render the list of items.\n     *\n     * This will loop through all items and render each one.\n     *\n     * Returns:\n     *     Djblets.Config.ListView:\n     *     This view.\n     */\n    render() {\n        this.$listBody = this.getBody();\n\n        this._renderItems();\n        this.trigger('rendered');\n\n        return this;\n    },\n\n    /**\n     * Create a view for an item and adds it.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The model to add.\n     *\n     *     collection (Backbone.Collection):\n     *         Ignored.\n     *\n     *     options (object, optional):\n     *         Options for adding the item.\n     *\n     * Option Args:\n     *     animate (boolean):\n     *         Whether or not to animate adding the item. This argument defaults\n     *         to ``true``.\n     */\n    _addItem(item, collection, options={}) {\n        const animateItem = (options.animate !== false);\n        const view = new this.ItemView({\n            model: item\n        });\n\n        view.render();\n\n        /*\n         * If this ListView has animation enabled, and this specific\n         * item is being animated (the default unless options.animate\n         * is false), we'll fade in the item.\n         */\n        if (this.animateItems && animateItem) {\n            view.$el.fadeIn();\n        }\n\n        this.$listBody.append(view.$el);\n        this.views.push(view);\n    },\n\n    /**\n     * Handle an item being removed from the collection.\n     *\n     * Removes the element from the list.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The model to remove.\n     *\n     *     collection (Backbone.Collection):\n     *         Ignored.\n     *\n     *     options (object, optional):\n     *         Options for removing the element.\n     *\n     * Option Args:\n     *     animate (boolean):\n     *         Whether or not the removal should be animated. This defaults\n     *         to ``true``.\n     */\n    _removeItem(item, collection, options={}) {\n        const animateItem = (options.animate !== false);\n        const view = _.find(this.views, view => view.model === item);\n\n        if (view) {\n            this.views = _.without(this.views, view);\n\n            /*\n             * If this ListView has animation enabled, and this specific\n             * item is being animated (the default unless options.animate\n             * is false), we'll fade out the item.\n             */\n            if (this.animateItems && animateItem) {\n                view.$el.fadeOut(function() {\n                    view.remove();\n                });\n            } else {\n                view.remove();\n            }\n        }\n    },\n\n    /**\n     * Render all items from the list.\n     */\n    _renderItems() {\n        this.views.forEach(function(view) {\n            view.remove();\n        });\n        this.views = [];\n        this.$listBody.empty();\n\n        this.model.collection.each(item => {\n            this._addItem(item, item.collection, {\n                animate: false\n            });\n        });\n    },\n});\n"]}