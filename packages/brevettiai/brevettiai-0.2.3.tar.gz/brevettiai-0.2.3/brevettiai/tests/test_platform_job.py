import os
import unittest
from copy import deepcopy

from brevettiai.platform import Job
from brevettiai.io import path


class TestPlatformJob(unittest.TestCase):
    def test_default_schema_class_mapping_and_classes(self):
        assert any([x for x in self.example_schema["fields"] if x.get("model", "") == "class_mapping"])
        assert any([x for x in self.example_schema["fields"] if x.get("model", "") == "classes"])

    def test_load_schema(self):
        Job(job_dir="", schema=self.example_schema, **self.example_parameters)

    def test_load_schema_missing_param(self):
        param = deepcopy(self.example_parameters)
        del param['settings']['validation']

        # Monkey patch settings
        class Settings(Job.Settings):
            def __init__(self, validation: list, **kwargs):
                self.validation = validation
                return super(Settings, self).__init__(**kwargs)
        Job.Settings = Settings

        with self.assertRaises(Exception) as context:
            Job(job_dir="", schema=self.example_schema, **param)

        self.assertTrue("Missing settings:" in context.exception.args[0], msg="Settings error not raised")

    def test_get_paths(self):
        config = Job(job_dir="", schema=self.example_schema, **self.example_parameters)
        paths = ["models", "cp"]
        self.assertEqual(config.temp_path(*paths), os.path.join(config._temporary_path.name, *paths))

        self.assertEqual(config.artifact_path(*paths), path.join(config.job_dir, "artifacts", *paths))
        config._temporary_path.cleanup()

    example_schema = {'fields': [
        {'type': 'label', 'label': 'Data'},
        {'type': 'input',
         'inputType': 'number',
         'min': 96,
         'max': 4096,
         'label': 'Network input width',
         'model': 'input_width',
         'default': 224,
         'required': True},
        {'type': 'input',
         'inputType': 'number',
         'min': 96,
         'max': 4096,
         'label': 'Network input height',
         'model': 'input_height',
         'default': 224,
         'required': True},
        {'type': 'select',
         'values': ['greyscale', 'bayer', 'rgb'],
         'isJson': False,
         'label': 'Color mode',
         'model': 'color_mode',
         'default': 'greyscale',
         'required': True},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Image rois. E.g. [[[100, 100], [400, 500]], [[500, 100], [800, 500]]]',
         'model': 'rois',
         'default': '[]',
         'required': False},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Output classes as json list',
         'model': 'classes',
         'default': '',
         'required': False},
        {'type': 'textArea',
         'hint': 'Max 5000 characters',
         'placeholder': 'Map classes to folder names',
         'rows': 4,
         'max': 5000,
         'isJson': True,
         'label': 'Json class mapping',
         'model': 'class_mapping',
         'default': '{}',
         'required': True},
        {'type': 'checkbox',
         'label': 'Keep aspect ratio',
         'model': 'keep_aspect_ratio',
         'default': True,
         'required': True},
        {'type': 'input',
         'inputType': 'text',
         'isJson': False,
         'label': 'Local cache path',
         'model': 'cache_path',
         'default': 'default',
         'required': False},
        {'type': 'label', 'label': 'Training'},
        {'type': 'input',
         'inputType': 'number',
         'min': 1,
         'max': 50,
         'label': 'Epochs',
         'model': 'epochs',
         'default': 50,
         'required': True},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Learning rate',
         'model': 'learning_rate',
         'default': 0.0001,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1000,
         'label': 'Early stopping patience',
         'model': 'patience',
         'default': 10,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 1,
         'max': 64,
         'label': 'Batch size',
         'model': 'batch_size',
         'default': 16,
         'required': True},
        {'type': 'input',
         'inputType': 'number',
         'min': 1,
         'max': 1000000,
         'label': 'Max samples per epoch',
         'model': 'max_epoch_samples',
         'default': 4096,
         'required': False},
        {'type': 'textArea',
         'hint': 'Max 5000 characters',
         'placeholder': 'Weight some classes more than others',
         'rows': 4,
         'max': 5000,
         'isJson': True,
         'label': 'Json class weights, defaults to 1',
         'model': 'class_weight',
         'default': '{}',
         'required': True},
        {'type': 'label', 'label': 'Validation'},
        {'type': 'select',
         'values': ['by_class', 'by_holder'],
         'isJson': False,
         'label': 'Splitting strategy',
         'model': 'validation',
         'default': 'by_class',
         'required': True},
        {'type': 'label', 'label': 'Data Augmentation'},
        {'type': 'checkbox',
         'label': 'Enable data augmentation?',
         'model': 'data_augmentation.enable',
         'default': True,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 100,
         'label': 'Vertical translation range in percent',
         'model': 'data_augmentation.transform.vertical_translation_range',
         'default': 0,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 100,
         'label': 'Horizontal translation range in percent',
         'model': 'data_augmentation.transform.horizontal_translation_range',
         'default': 0,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 100,
         'label': 'Scaling range in percent',
         'model': 'data_augmentation.transform.scaling_range',
         'default': 0,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 180,
         'label': 'Rotation range in degrees',
         'model': 'data_augmentation.transform.rotation_angle',
         'default': 5,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Shear range',
         'model': 'data_augmentation.transform.shear_range',
         'default': 0,
         'required': False},
        {'type': 'checklist',
         'listbox': True,
         'values': ['Horizontal', 'Vertical'],
         'label': 'Image flip',
         'model': 'data_augmentation.transform.flip',
         'default': [],
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Elastic transformation enable ratio',
         'model': 'data_augmentation.transform.elastic.enable',
         'default': 0,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1000,
         'label': 'Elastic transformation alpha (strength) approx 10 times sigma',
         'model': 'data_augmentation.transform.elastic.alpha',
         'default': 200,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1000,
         'label': 'Elastic transformation sigma (smoothness)',
         'model': 'data_augmentation.transform.elastic.sigma',
         'default': 30,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Light correction possibility',
         'model': 'data_augmentation.light.enable',
         'default': 0.5,
         'required': False},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Light gain',
         'model': 'data_augmentation.light.gain',
         'default': '[0.8, 1.2]',
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 50,
         'label': 'Hue Saturation correction',
         'model': 'data_augmentation.light.add_hue_sat',
         'default': 5,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Focus correction possibility',
         'model': 'data_augmentation.focus.enable',
         'default': 0.5,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Focus change percentage',
         'model': 'data_augmentation.focus.p',
         'default': 0.2,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 10,
         'label': 'Gaussian blur max size',
         'model': 'data_augmentation.focus.gaussian_blur',
         'default': 2,
         'required': False},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Emboss alpha range',
         'model': 'data_augmentation.focus.emboss.alpha',
         'default': '[0, 1]',
         'required': False},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Emboss strength range [0-2]',
         'model': 'data_augmentation.focus.emboss.strength',
         'default': '[0.75, 1.25]',
         'required': False},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Average blur kernel range',
         'model': 'data_augmentation.focus.avg_blur',
         'default': '[3, 3]',
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Gaussian Noise scale',
         'model': 'data_augmentation.noise.additive_gaussian.scale',
         'default': 0.15,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Hard noise addition possibility',
         'model': 'data_augmentation.noise.hardnoise_enable',
         'default': 0.5,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Dropout max percentage',
         'model': 'data_augmentation.noise.dropout.max_p',
         'default': 0,
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Coarse dropout max percentage',
         'model': 'data_augmentation.noise.dropout.coarse_max_p',
         'default': 0,
         'required': False},
        {'type': 'input',
         'inputType': 'text',
         'isJson': True,
         'label': 'Coarse Dropout size percentage',
         'model': 'data_augmentation.noise.dropout.coarse_size_p',
         'default': '[0.001, 0.05]',
         'required': False},
        {'type': 'input',
         'inputType': 'number',
         'min': 0,
         'max': 1,
         'label': 'Salt and pepper',
         'model': 'data_augmentation.noise.salt_pepper.p',
         'default': 0,
         'required': False},
        {'type': 'label', 'label': 'Export'},
        {'type': 'select',
         'values': ['bmp', 'jpeg', 'png'],
         'isJson': False,
         'label': 'Input image format in production',
         'model': 'img_format',
         'default': 'bmp',
         'required': True}]}

    example_parameters = {'settings': {'loss': 'weighted_binary_crossentropy',
                                       'data_augmentation': {'flip_horizontal': True, 'rotation_angle': 5,
                                                             'color_correct': True, 'horizontal_translation_range': 1,
                                                             'flip_vertical': False, 'scaling_range': 0,
                                                             'shear_range': 0, 'vertical_translation_range': 1},
                                       'input_height': 224, 'class_mapping': '',
                                       'validation': {'split_strategy': 'by_class', 'split_percentage': 20},
                                       'batch_size': 10, 'img_format': 'bmp', 'class_weight': '{}',
                                       'color_mode': "greyscale",
                                       'epochs': 1, 'classes': '["A", "B"]', 'input_width': 224,
                                       "keep_aspect_ratio": True},
                          'complete_url': '/api/models/c30facd2-e0e7-4b6d-9339-14a1d22bbd54/complete?key=2FJpSa10x7x1odb07anQbxZY&modelPath=',
                          'name': 'Test Py3.5 image classification',
                          'remote_url': '/api/models/c30facd2-e0e7-4b6d-9339-14a1d22bbd54/remotemonitor?key=2FJpSa10x7x1odb07anQbxZY',
                          'api_key': '2FJpSa10x7x1odb07anQbxZY', 'host_name': 'https://app.criterion.ai',
                          'id': 'c30facd2-e0e7-4b6d-9339-14a1d22bbd54',
                          'charts_url': '/api/models/c30facd2-e0e7-4b6d-9339-14a1d22bbd54/charts?key=2FJpSa10x7x1odb07anQbxZY',
                          'datasets': [{
                              'bucket': 'C:\\data\\novo\\images\\datasets.criterion.ai',
                              'name': 'NeurIPS vials CnD', 'id': '22df6831-5de9-4545-af17-cdfe2e8b2049'}, {
                              'bucket': 'C:\\data\\novo\\images\\datasets.criterion.ai',
                              'name': 'Data', 'id': '555bdea5-8b57-4352-beab-fc0006232d21'}]}

if __name__ == '__main__':
    unittest.main()
