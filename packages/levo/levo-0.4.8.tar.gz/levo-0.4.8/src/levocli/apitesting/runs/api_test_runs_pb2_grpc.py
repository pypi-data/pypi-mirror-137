# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import (
    api_test_runs_pb2 as ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2,
)


class ApiTestRunsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetApiTestRuns = channel.unary_unary(
            "/ai.levo.apitesting.runs.v1.ApiTestRunsService/GetApiTestRuns",
            request_serializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunsRequest.SerializeToString,
            response_deserializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.GetApiTestRunsResponse.FromString,
        )
        self.GetApiTestRunDetails = channel.unary_unary(
            "/ai.levo.apitesting.runs.v1.ApiTestRunsService/GetApiTestRunDetails",
            request_serializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunDetailsRequest.SerializeToString,
            response_deserializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunDetails.FromString,
        )


class ApiTestRunsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetApiTestRuns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetApiTestRunDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ApiTestRunsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetApiTestRuns": grpc.unary_unary_rpc_method_handler(
            servicer.GetApiTestRuns,
            request_deserializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunsRequest.FromString,
            response_serializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.GetApiTestRunsResponse.SerializeToString,
        ),
        "GetApiTestRunDetails": grpc.unary_unary_rpc_method_handler(
            servicer.GetApiTestRunDetails,
            request_deserializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunDetailsRequest.FromString,
            response_serializer=ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunDetails.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ai.levo.apitesting.runs.v1.ApiTestRunsService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ApiTestRunsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetApiTestRuns(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ai.levo.apitesting.runs.v1.ApiTestRunsService/GetApiTestRuns",
            ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunsRequest.SerializeToString,
            ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.GetApiTestRunsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetApiTestRunDetails(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ai.levo.apitesting.runs.v1.ApiTestRunsService/GetApiTestRunDetails",
            ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunDetailsRequest.SerializeToString,
            ai_dot_levo_dot_apitesting_dot_runs_dot_api__test__runs__pb2.ApiTestRunDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
