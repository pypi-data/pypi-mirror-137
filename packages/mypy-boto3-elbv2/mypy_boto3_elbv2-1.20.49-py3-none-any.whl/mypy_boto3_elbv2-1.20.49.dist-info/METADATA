Metadata-Version: 2.1
Name: mypy-boto3-elbv2
Version: 1.20.49
Summary: Type annotations for boto3.ElasticLoadBalancingv2 1.20.49 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 elbv2 type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-elbv2"></a>

# mypy-boto3-elbv2

[![PyPI - mypy-boto3-elbv2](https://img.shields.io/pypi/v/mypy-boto3-elbv2.svg?color=blue)](https://pypi.org/project/mypy-boto3-elbv2)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-elbv2.svg?color=blue)](https://pypi.org/project/mypy-boto3-elbv2)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/mypy-boto3-elbv2?color=blue)](https://pypistats.org/packages/mypy-boto3-elbv2)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.ElasticLoadBalancingv2 1.20.49](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2.html#ElasticLoadBalancingv2)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[mypy-boto3-elbv2 docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_elbv2/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-elbv2](#mypy-boto3-elbv2)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Waiters annotations](#waiters-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `ElasticLoadBalancingv2`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `boto3-stubs` for `ElasticLoadBalancingv2` service.

```bash
# install with boto3 type annotations
python -m pip install 'boto3-stubs[elbv2]'

# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'boto3-stubs-lite[elbv2]'

# standalone installation
python -m pip install mypy-boto3-elbv2
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `boto3-stubs[elbv2]` in your environment:
  `python -m pip install 'boto3-stubs[elbv2]'`

Both type checking and auto-complete should work for `ElasticLoadBalancingv2`
service. No explicit type annotations required, write your `boto3` code as
usual.

<a id="pycharm"></a>

### PyCharm

- Install `boto3-stubs[elbv2]` in your environment:
  `python -m pip install 'boto3-stubs[elbv2]'`

Both type checking and auto-complete should work for `ElasticLoadBalancingv2`
service. No explicit type annotations required, write your `boto3` code as
usual. Auto-complete can be slow on big projects or if you have a lot of
installed `boto3-stubs` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `boto3-stubs[elbv2]` in your environment:
  `python -m pip install 'boto3-stubs[elbv2]'`
- Run `mypy` as usual

Type checking should work for `ElasticLoadBalancingv2` service. No explicit
type annotations required, write your `boto3` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `boto3-stubs[elbv2]` in your environment:
  `python -m pip install 'boto3-stubs[elbv2]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `ElasticLoadBalancingv2` service. No explicit
type annotations required, write your `boto3` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`ElasticLoadBalancingv2Client` provides annotations for
`boto3.client("elbv2")`.

```python
from boto3.session import Session

from mypy_boto3_elbv2 import ElasticLoadBalancingv2Client

client: ElasticLoadBalancingv2Client = Session().client("elbv2")

# now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`mypy_boto3_elbv2.paginator` module contains type annotations for all
paginators.

```python
from boto3.session import Session

from mypy_boto3_elbv2 import ElasticLoadBalancingv2Client
from mypy_boto3_elbv2.paginator import (
    DescribeAccountLimitsPaginator,
    DescribeListenerCertificatesPaginator,
    DescribeListenersPaginator,
    DescribeLoadBalancersPaginator,
    DescribeRulesPaginator,
    DescribeSSLPoliciesPaginator,
    DescribeTargetGroupsPaginator,
)

client: ElasticLoadBalancingv2Client = Session().client("elbv2")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
describe_account_limits_paginator: DescribeAccountLimitsPaginator = client.get_paginator("describe_account_limits")
describe_listener_certificates_paginator: DescribeListenerCertificatesPaginator = client.get_paginator("describe_listener_certificates")
describe_listeners_paginator: DescribeListenersPaginator = client.get_paginator("describe_listeners")
describe_load_balancers_paginator: DescribeLoadBalancersPaginator = client.get_paginator("describe_load_balancers")
describe_rules_paginator: DescribeRulesPaginator = client.get_paginator("describe_rules")
describe_ssl_policies_paginator: DescribeSSLPoliciesPaginator = client.get_paginator("describe_ssl_policies")
describe_target_groups_paginator: DescribeTargetGroupsPaginator = client.get_paginator("describe_target_groups")
```

<a id="waiters-annotations"></a>

### Waiters annotations

`mypy_boto3_elbv2.waiter` module contains type annotations for all waiters.

```python
from boto3.session import Session

from mypy_boto3_elbv2 import ElasticLoadBalancingv2Client
from mypy_boto3_elbv2.waiter import (
    LoadBalancerAvailableWaiter,
    LoadBalancerExistsWaiter,
    LoadBalancersDeletedWaiter,
    TargetDeregisteredWaiter,
    TargetInServiceWaiter,
)

client: ElasticLoadBalancingv2Client = Session().client("elbv2")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
load_balancer_available_waiter: LoadBalancerAvailableWaiter = client.get_waiter("load_balancer_available")
load_balancer_exists_waiter: LoadBalancerExistsWaiter = client.get_waiter("load_balancer_exists")
load_balancers_deleted_waiter: LoadBalancersDeletedWaiter = client.get_waiter("load_balancers_deleted")
target_deregistered_waiter: TargetDeregisteredWaiter = client.get_waiter("target_deregistered")
target_in_service_waiter: TargetInServiceWaiter = client.get_waiter("target_in_service")
```

<a id="literals"></a>

### Literals

`mypy_boto3_elbv2.literals` module contains literals extracted from shapes that
can be used in user code for type checking.

```python
from mypy_boto3_elbv2.literals import (
    ActionTypeEnumType,
    AuthenticateCognitoActionConditionalBehaviorEnumType,
    AuthenticateOidcActionConditionalBehaviorEnumType,
    DescribeAccountLimitsPaginatorName,
    DescribeListenerCertificatesPaginatorName,
    DescribeListenersPaginatorName,
    DescribeLoadBalancersPaginatorName,
    DescribeRulesPaginatorName,
    DescribeSSLPoliciesPaginatorName,
    DescribeTargetGroupsPaginatorName,
    IpAddressTypeType,
    LoadBalancerAvailableWaiterName,
    LoadBalancerExistsWaiterName,
    LoadBalancerSchemeEnumType,
    LoadBalancerStateEnumType,
    LoadBalancerTypeEnumType,
    LoadBalancersDeletedWaiterName,
    ProtocolEnumType,
    RedirectActionStatusCodeEnumType,
    TargetDeregisteredWaiterName,
    TargetGroupIpAddressTypeEnumType,
    TargetHealthReasonEnumType,
    TargetHealthStateEnumType,
    TargetInServiceWaiterName,
    TargetTypeEnumType,
    ServiceName,
    PaginatorName,
    WaiterName,
)

def check_value(value: ActionTypeEnumType) -> bool:
    ...
```

<a id="typed-dictionaries"></a>

### Typed dictionaries

`mypy_boto3_elbv2.type_defs` module contains structures and shapes assembled to
typed dictionaries for additional type checking.

```python
from mypy_boto3_elbv2.type_defs import (
    ActionTypeDef,
    AddListenerCertificatesInputRequestTypeDef,
    AddListenerCertificatesOutputTypeDef,
    AddTagsInputRequestTypeDef,
    AuthenticateCognitoActionConfigTypeDef,
    AuthenticateOidcActionConfigTypeDef,
    AvailabilityZoneTypeDef,
    CertificateTypeDef,
    CipherTypeDef,
    CreateListenerInputRequestTypeDef,
    CreateListenerOutputTypeDef,
    CreateLoadBalancerInputRequestTypeDef,
    CreateLoadBalancerOutputTypeDef,
    CreateRuleInputRequestTypeDef,
    CreateRuleOutputTypeDef,
    CreateTargetGroupInputRequestTypeDef,
    CreateTargetGroupOutputTypeDef,
    DeleteListenerInputRequestTypeDef,
    DeleteLoadBalancerInputRequestTypeDef,
    DeleteRuleInputRequestTypeDef,
    DeleteTargetGroupInputRequestTypeDef,
    DeregisterTargetsInputRequestTypeDef,
    DescribeAccountLimitsInputRequestTypeDef,
    DescribeAccountLimitsOutputTypeDef,
    DescribeListenerCertificatesInputRequestTypeDef,
    DescribeListenerCertificatesOutputTypeDef,
    DescribeListenersInputRequestTypeDef,
    DescribeListenersOutputTypeDef,
    DescribeLoadBalancerAttributesInputRequestTypeDef,
    DescribeLoadBalancerAttributesOutputTypeDef,
    DescribeLoadBalancersInputRequestTypeDef,
    DescribeLoadBalancersOutputTypeDef,
    DescribeRulesInputRequestTypeDef,
    DescribeRulesOutputTypeDef,
    DescribeSSLPoliciesInputRequestTypeDef,
    DescribeSSLPoliciesOutputTypeDef,
    DescribeTagsInputRequestTypeDef,
    DescribeTagsOutputTypeDef,
    DescribeTargetGroupAttributesInputRequestTypeDef,
    DescribeTargetGroupAttributesOutputTypeDef,
    DescribeTargetGroupsInputRequestTypeDef,
    DescribeTargetGroupsOutputTypeDef,
    DescribeTargetHealthInputRequestTypeDef,
    DescribeTargetHealthOutputTypeDef,
    FixedResponseActionConfigTypeDef,
    ForwardActionConfigTypeDef,
    HostHeaderConditionConfigTypeDef,
    HttpHeaderConditionConfigTypeDef,
    HttpRequestMethodConditionConfigTypeDef,
    LimitTypeDef,
    ListenerTypeDef,
    LoadBalancerAddressTypeDef,
    LoadBalancerAttributeTypeDef,
    LoadBalancerStateTypeDef,
    LoadBalancerTypeDef,
    MatcherTypeDef,
    ModifyListenerInputRequestTypeDef,
    ModifyListenerOutputTypeDef,
    ModifyLoadBalancerAttributesInputRequestTypeDef,
    ModifyLoadBalancerAttributesOutputTypeDef,
    ModifyRuleInputRequestTypeDef,
    ModifyRuleOutputTypeDef,
    ModifyTargetGroupAttributesInputRequestTypeDef,
    ModifyTargetGroupAttributesOutputTypeDef,
    ModifyTargetGroupInputRequestTypeDef,
    ModifyTargetGroupOutputTypeDef,
    PaginatorConfigTypeDef,
    PathPatternConditionConfigTypeDef,
    QueryStringConditionConfigTypeDef,
    QueryStringKeyValuePairTypeDef,
    RedirectActionConfigTypeDef,
    RegisterTargetsInputRequestTypeDef,
    RemoveListenerCertificatesInputRequestTypeDef,
    RemoveTagsInputRequestTypeDef,
    ResponseMetadataTypeDef,
    RuleConditionTypeDef,
    RulePriorityPairTypeDef,
    RuleTypeDef,
    SetIpAddressTypeInputRequestTypeDef,
    SetIpAddressTypeOutputTypeDef,
    SetRulePrioritiesInputRequestTypeDef,
    SetRulePrioritiesOutputTypeDef,
    SetSecurityGroupsInputRequestTypeDef,
    SetSecurityGroupsOutputTypeDef,
    SetSubnetsInputRequestTypeDef,
    SetSubnetsOutputTypeDef,
    SourceIpConditionConfigTypeDef,
    SslPolicyTypeDef,
    SubnetMappingTypeDef,
    TagDescriptionTypeDef,
    TagTypeDef,
    TargetDescriptionTypeDef,
    TargetGroupAttributeTypeDef,
    TargetGroupStickinessConfigTypeDef,
    TargetGroupTupleTypeDef,
    TargetGroupTypeDef,
    TargetHealthDescriptionTypeDef,
    TargetHealthTypeDef,
    WaiterConfigTypeDef,
)

def get_structure() -> ActionTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`mypy-boto3-elbv2` version is the same as related `boto3` version and follows
[PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[mypy-boto3-elbv2 docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_elbv2/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


