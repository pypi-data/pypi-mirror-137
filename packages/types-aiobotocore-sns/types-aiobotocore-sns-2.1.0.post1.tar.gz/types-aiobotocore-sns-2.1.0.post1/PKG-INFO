Metadata-Version: 2.1
Name: types-aiobotocore-sns
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.SNS 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore sns type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="mypy-boto3-sns"></a>

# mypy-boto3-sns

[![PyPI - types-aiobotocore-sns](https://img.shields.io/pypi/v/types-aiobotocore-sns.svg?color=blue)](https://pypi.org/project/types-aiobotocore-sns)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-sns.svg?color=blue)](https://pypi.org/project/types-aiobotocore-sns)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-sns?color=blue)](https://pypistats.org/packages/types-aiobotocore-sns)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.SNS 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-sns docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_sns/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-sns](#mypy-boto3-sns)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
- [Explicit type annotations are optional here](#explicit-type-annotations-are-optional-here)
- [Type should be correctly discovered by mypy and IDEs](#type-should-be-correctly-discovered-by-mypy-and-ides)
- [Explicit type annotations are optional here](#explicit-type-annotations-are-optional-here)
- [Type should be correctly discovered by mypy and IDEs](#type-should-be-correctly-discovered-by-mypy-and-ides)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `SNS`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `SNS` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[sns]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[sns]'

# standalone installation
python -m pip install types-aiobotocore-sns
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[sns]` in your environment:
  `python -m pip install 'types-aiobotocore[sns]'`

Both type checking and auto-complete should work for `SNS` service. No explicit
type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[sns]` in your environment:
  `python -m pip install 'types-aiobotocore[sns]'`

Both type checking and auto-complete should work for `SNS` service. No explicit
type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[sns]` in your environment:
  `python -m pip install 'types-aiobotocore[sns]'`
- Run `mypy` as usual

Type checking should work for `SNS` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[sns]` in your environment:
  `python -m pip install 'types-aiobotocore[sns]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `SNS` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`SNSClient` provides annotations for `session.create_client("sns")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_sns import SNSClient

session = get_session()
async with session.create_client("sns") as client:
    client: SNSClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_sns.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_sns import SNSClient
from types_aiobotocore_sns.paginator import (
    ListEndpointsByPlatformApplicationPaginator,
    ListOriginationNumbersPaginator,
    ListPhoneNumbersOptedOutPaginator,
    ListPlatformApplicationsPaginator,
    ListSMSSandboxPhoneNumbersPaginator,
    ListSubscriptionsPaginator,
    ListSubscriptionsByTopicPaginator,
    ListTopicsPaginator,
)

session = get_session()
async with session.create_client("sns") as client:
    client: SNSClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_endpoints_by_platform_application_paginator: ListEndpointsByPlatformApplicationPaginator = client.get_paginator("list_endpoints_by_platform_application")
        list_origination_numbers_paginator: ListOriginationNumbersPaginator = client.get_paginator("list_origination_numbers")
        list_phone_numbers_opted_out_paginator: ListPhoneNumbersOptedOutPaginator = client.get_paginator("list_phone_numbers_opted_out")
        list_platform_applications_paginator: ListPlatformApplicationsPaginator = client.get_paginator("list_platform_applications")
        list_sms_sandbox_phone_numbers_paginator: ListSMSSandboxPhoneNumbersPaginator = client.get_paginator("list_sms_sandbox_phone_numbers")
        list_subscriptions_paginator: ListSubscriptionsPaginator = client.get_paginator("list_subscriptions")
        list_subscriptions_by_topic_paginator: ListSubscriptionsByTopicPaginator = client.get_paginator("list_subscriptions_by_topic")
        list_topics_paginator: ListTopicsPaginator = client.get_paginator("list_topics")
    ```




### Service Resource annotations

`SNSServiceResource` provides annotations for `aiobotocore.resource("sns")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_sns import SNSServiceResource

session = get_session()
async with session.resource("sns") as resource:
    resource: SNSServiceResource
    # now resource usage is checked by mypy and IDE should provide code auto-complete
````

### Other resources annotations

`types_aiobotocore_sns.service_resource` module contains type annotations for
all resources.

```python
from aiobotocore.session import get_session

from types_aiobotocore_sns import SNSServiceResource
from types_aiobotocore_sns.service_resource import (
    PlatformApplication,
    PlatformEndpoint,
    Subscription,
    Topic,
)

session = get_session()
async with session.resource("sns") as resource:
    resource: SNSServiceResource

<a id="explicit-type-annotations-are-optional-here"></a>

# Explicit type annotations are optional here
<a id="type-should-be-correctly-discovered-by-mypy-and-ides"></a>

# Type should be correctly discovered by mypy and IDEs
    my_platform_application: PlatformApplication = resource.PlatformApplication(...)
    my_platform_endpoint: PlatformEndpoint = resource.PlatformEndpoint(...)
    my_subscription: Subscription = resource.Subscription(...)
    my_topic: Topic = resource.Topic(...)
```

### Collections annotations

`types_aiobotocore_sns.service_resource` module contains type annotations for
all `SNSServiceResource` collections.

```python
from aiobotocore.session import get_session

from types_aiobotocore_sns import SNSServiceResource
from types_aiobotocore_sns.service_resource import (
    ServiceResourcePlatformApplicationsCollection,
    ServiceResourceSubscriptionsCollection,
    ServiceResourceTopicsCollection,
)

session = get_session()
async with session.resource("sns") as resource:
    resource: SNSServiceResource

<a id="explicit-type-annotations-are-optional-here"></a>

# Explicit type annotations are optional here
<a id="type-should-be-correctly-discovered-by-mypy-and-ides"></a>

# Type should be correctly discovered by mypy and IDEs
    platform_applications: sns_resources.ServiceResourcePlatformApplicationsCollection = resource.platform_applications
    subscriptions: sns_resources.ServiceResourceSubscriptionsCollection = resource.subscriptions
    topics: sns_resources.ServiceResourceTopicsCollection = resource.topics
```

### Literals

`types_aiobotocore_sns.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_sns.literals import (
    LanguageCodeStringType,
    ListEndpointsByPlatformApplicationPaginatorName,
    ListOriginationNumbersPaginatorName,
    ListPhoneNumbersOptedOutPaginatorName,
    ListPlatformApplicationsPaginatorName,
    ListSMSSandboxPhoneNumbersPaginatorName,
    ListSubscriptionsByTopicPaginatorName,
    ListSubscriptionsPaginatorName,
    ListTopicsPaginatorName,
    NumberCapabilityType,
    RouteTypeType,
    SMSSandboxPhoneNumberVerificationStatusType,
    ServiceName,
    PaginatorName,
)

def check_value(value: LanguageCodeStringType) -> bool:
    ...
```

### Typed dictionaries

`types_aiobotocore_sns.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_sns.type_defs import (
    AddPermissionInputRequestTypeDef,
    AddPermissionInputTopicTypeDef,
    BatchResultErrorEntryTypeDef,
    CheckIfPhoneNumberIsOptedOutInputRequestTypeDef,
    CheckIfPhoneNumberIsOptedOutResponseTypeDef,
    ConfirmSubscriptionInputRequestTypeDef,
    ConfirmSubscriptionInputTopicTypeDef,
    ConfirmSubscriptionResponseTypeDef,
    CreateEndpointResponseTypeDef,
    CreatePlatformApplicationInputRequestTypeDef,
    CreatePlatformApplicationInputServiceResourceTypeDef,
    CreatePlatformApplicationResponseTypeDef,
    CreatePlatformEndpointInputPlatformApplicationTypeDef,
    CreatePlatformEndpointInputRequestTypeDef,
    CreateSMSSandboxPhoneNumberInputRequestTypeDef,
    CreateTopicInputRequestTypeDef,
    CreateTopicInputServiceResourceTypeDef,
    CreateTopicResponseTypeDef,
    DeleteEndpointInputRequestTypeDef,
    DeletePlatformApplicationInputRequestTypeDef,
    DeleteSMSSandboxPhoneNumberInputRequestTypeDef,
    DeleteTopicInputRequestTypeDef,
    EndpointTypeDef,
    GetEndpointAttributesInputRequestTypeDef,
    GetEndpointAttributesResponseTypeDef,
    GetPlatformApplicationAttributesInputRequestTypeDef,
    GetPlatformApplicationAttributesResponseTypeDef,
    GetSMSAttributesInputRequestTypeDef,
    GetSMSAttributesResponseTypeDef,
    GetSMSSandboxAccountStatusResultTypeDef,
    GetSubscriptionAttributesInputRequestTypeDef,
    GetSubscriptionAttributesResponseTypeDef,
    GetTopicAttributesInputRequestTypeDef,
    GetTopicAttributesResponseTypeDef,
    ListEndpointsByPlatformApplicationInputRequestTypeDef,
    ListEndpointsByPlatformApplicationResponseTypeDef,
    ListOriginationNumbersRequestRequestTypeDef,
    ListOriginationNumbersResultTypeDef,
    ListPhoneNumbersOptedOutInputRequestTypeDef,
    ListPhoneNumbersOptedOutResponseTypeDef,
    ListPlatformApplicationsInputRequestTypeDef,
    ListPlatformApplicationsResponseTypeDef,
    ListSMSSandboxPhoneNumbersInputRequestTypeDef,
    ListSMSSandboxPhoneNumbersResultTypeDef,
    ListSubscriptionsByTopicInputRequestTypeDef,
    ListSubscriptionsByTopicResponseTypeDef,
    ListSubscriptionsInputRequestTypeDef,
    ListSubscriptionsResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    ListTopicsInputRequestTypeDef,
    ListTopicsResponseTypeDef,
    MessageAttributeValueTypeDef,
    OptInPhoneNumberInputRequestTypeDef,
    PaginatorConfigTypeDef,
    PhoneNumberInformationTypeDef,
    PlatformApplicationTypeDef,
    PublishBatchInputRequestTypeDef,
    PublishBatchRequestEntryTypeDef,
    PublishBatchResponseTypeDef,
    PublishBatchResultEntryTypeDef,
    PublishInputPlatformEndpointTypeDef,
    PublishInputRequestTypeDef,
    PublishInputTopicTypeDef,
    PublishResponseTypeDef,
    RemovePermissionInputRequestTypeDef,
    RemovePermissionInputTopicTypeDef,
    ResponseMetadataTypeDef,
    SMSSandboxPhoneNumberTypeDef,
    ServiceResourcePlatformApplicationRequestTypeDef,
    ServiceResourcePlatformEndpointRequestTypeDef,
    ServiceResourceSubscriptionRequestTypeDef,
    ServiceResourceTopicRequestTypeDef,
    SetEndpointAttributesInputPlatformEndpointTypeDef,
    SetEndpointAttributesInputRequestTypeDef,
    SetPlatformApplicationAttributesInputPlatformApplicationTypeDef,
    SetPlatformApplicationAttributesInputRequestTypeDef,
    SetSMSAttributesInputRequestTypeDef,
    SetSubscriptionAttributesInputRequestTypeDef,
    SetSubscriptionAttributesInputSubscriptionTypeDef,
    SetTopicAttributesInputRequestTypeDef,
    SetTopicAttributesInputTopicTypeDef,
    SubscribeInputRequestTypeDef,
    SubscribeInputTopicTypeDef,
    SubscribeResponseTypeDef,
    SubscriptionTypeDef,
    TagResourceRequestRequestTypeDef,
    TagTypeDef,
    TopicTypeDef,
    UnsubscribeInputRequestTypeDef,
    UntagResourceRequestRequestTypeDef,
    VerifySMSSandboxPhoneNumberInputRequestTypeDef,
)

def get_structure() -> AddPermissionInputRequestTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-sns` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-sns docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_sns/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


