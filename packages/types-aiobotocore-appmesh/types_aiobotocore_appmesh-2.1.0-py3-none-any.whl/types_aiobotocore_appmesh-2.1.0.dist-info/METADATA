Metadata-Version: 2.1
Name: types-aiobotocore-appmesh
Version: 2.1.0
Summary: Type annotations for aiobotocore.AppMesh 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore appmesh type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-appmesh"></a>

# mypy-boto3-appmesh

[![PyPI - types-aiobotocore-appmesh](https://img.shields.io/pypi/v/types-aiobotocore-appmesh.svg?color=blue)](https://pypi.org/project/types-aiobotocore-appmesh)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-appmesh.svg?color=blue)](https://pypi.org/project/types-aiobotocore-appmesh)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-appmesh?color=blue)](https://pypistats.org/packages/types-aiobotocore-appmesh)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.AppMesh 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/appmesh.html#AppMesh)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-appmesh docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_appmesh/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-appmesh](#mypy-boto3-appmesh)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `AppMesh`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `AppMesh` service.

```bash
python -m pip install types-aiobotocore[appmesh]
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[appmesh]` in your environment:
  `python -m pip install 'types-aiobotocore[appmesh]'`

Both type checking and auto-complete should work for `AppMesh` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[appmesh]` in your environment:
  `python -m pip install 'types-aiobotocore[appmesh]'`

Both type checking and auto-complete should work for `AppMesh` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[appmesh]` in your environment:
  `python -m pip install 'types-aiobotocore[appmesh]'`
- Run `mypy` as usual

Type checking should work for `AppMesh` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[appmesh]` in your environment:
  `python -m pip install 'types-aiobotocore[appmesh]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `AppMesh` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`AppMeshClient` provides annotations for `session.create_client("appmesh")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_appmesh import AppMeshClient

session = get_session()
with async session.create_client("appmesh") as client:
    client: AppMeshClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_appmesh.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_appmesh import AppMeshClient
from types_aiobotocore_appmesh.paginator import (
    ListGatewayRoutesPaginator,
    ListMeshesPaginator,
    ListRoutesPaginator,
    ListTagsForResourcePaginator,
    ListVirtualGatewaysPaginator,
    ListVirtualNodesPaginator,
    ListVirtualRoutersPaginator,
    ListVirtualServicesPaginator,
)

session = get_session()
with async session.create_client("appmesh") as client:
    client: AppMeshClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_gateway_routes_paginator: ListGatewayRoutesPaginator = client.get_paginator("list_gateway_routes")
        list_meshes_paginator: ListMeshesPaginator = client.get_paginator("list_meshes")
        list_routes_paginator: ListRoutesPaginator = client.get_paginator("list_routes")
        list_tags_for_resource_paginator: ListTagsForResourcePaginator = client.get_paginator("list_tags_for_resource")
        list_virtual_gateways_paginator: ListVirtualGatewaysPaginator = client.get_paginator("list_virtual_gateways")
        list_virtual_nodes_paginator: ListVirtualNodesPaginator = client.get_paginator("list_virtual_nodes")
        list_virtual_routers_paginator: ListVirtualRoutersPaginator = client.get_paginator("list_virtual_routers")
        list_virtual_services_paginator: ListVirtualServicesPaginator = client.get_paginator("list_virtual_services")
    ```







### Literals

`types_aiobotocore_appmesh.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_appmesh.literals import (
    DefaultGatewayRouteRewriteType,
    DnsResponseTypeType,
    DurationUnitType,
    EgressFilterTypeType,
    GatewayRouteStatusCodeType,
    GrpcRetryPolicyEventType,
    HttpMethodType,
    HttpSchemeType,
    ListGatewayRoutesPaginatorName,
    ListMeshesPaginatorName,
    ListRoutesPaginatorName,
    ListTagsForResourcePaginatorName,
    ListVirtualGatewaysPaginatorName,
    ListVirtualNodesPaginatorName,
    ListVirtualRoutersPaginatorName,
    ListVirtualServicesPaginatorName,
    ListenerTlsModeType,
    MeshStatusCodeType,
    PortProtocolType,
    RouteStatusCodeType,
    TcpRetryPolicyEventType,
    VirtualGatewayListenerTlsModeType,
    VirtualGatewayPortProtocolType,
    VirtualGatewayStatusCodeType,
    VirtualNodeStatusCodeType,
    VirtualRouterStatusCodeType,
    VirtualServiceStatusCodeType,
    ServiceName,
    PaginatorName,
)

def check_value(value: DefaultGatewayRouteRewriteType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_appmesh.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_appmesh.type_defs import (
    AccessLogTypeDef,
    AwsCloudMapInstanceAttributeTypeDef,
    AwsCloudMapServiceDiscoveryTypeDef,
    BackendDefaultsTypeDef,
    BackendTypeDef,
    ClientPolicyTlsTypeDef,
    ClientPolicyTypeDef,
    ClientTlsCertificateTypeDef,
    CreateGatewayRouteInputRequestTypeDef,
    CreateGatewayRouteOutputTypeDef,
    CreateMeshInputRequestTypeDef,
    CreateMeshOutputTypeDef,
    CreateRouteInputRequestTypeDef,
    CreateRouteOutputTypeDef,
    CreateVirtualGatewayInputRequestTypeDef,
    CreateVirtualGatewayOutputTypeDef,
    CreateVirtualNodeInputRequestTypeDef,
    CreateVirtualNodeOutputTypeDef,
    CreateVirtualRouterInputRequestTypeDef,
    CreateVirtualRouterOutputTypeDef,
    CreateVirtualServiceInputRequestTypeDef,
    CreateVirtualServiceOutputTypeDef,
    DeleteGatewayRouteInputRequestTypeDef,
    DeleteGatewayRouteOutputTypeDef,
    DeleteMeshInputRequestTypeDef,
    DeleteMeshOutputTypeDef,
    DeleteRouteInputRequestTypeDef,
    DeleteRouteOutputTypeDef,
    DeleteVirtualGatewayInputRequestTypeDef,
    DeleteVirtualGatewayOutputTypeDef,
    DeleteVirtualNodeInputRequestTypeDef,
    DeleteVirtualNodeOutputTypeDef,
    DeleteVirtualRouterInputRequestTypeDef,
    DeleteVirtualRouterOutputTypeDef,
    DeleteVirtualServiceInputRequestTypeDef,
    DeleteVirtualServiceOutputTypeDef,
    DescribeGatewayRouteInputRequestTypeDef,
    DescribeGatewayRouteOutputTypeDef,
    DescribeMeshInputRequestTypeDef,
    DescribeMeshOutputTypeDef,
    DescribeRouteInputRequestTypeDef,
    DescribeRouteOutputTypeDef,
    DescribeVirtualGatewayInputRequestTypeDef,
    DescribeVirtualGatewayOutputTypeDef,
    DescribeVirtualNodeInputRequestTypeDef,
    DescribeVirtualNodeOutputTypeDef,
    DescribeVirtualRouterInputRequestTypeDef,
    DescribeVirtualRouterOutputTypeDef,
    DescribeVirtualServiceInputRequestTypeDef,
    DescribeVirtualServiceOutputTypeDef,
    DnsServiceDiscoveryTypeDef,
    DurationTypeDef,
    EgressFilterTypeDef,
    FileAccessLogTypeDef,
    GatewayRouteDataTypeDef,
    GatewayRouteHostnameMatchTypeDef,
    GatewayRouteHostnameRewriteTypeDef,
    GatewayRouteRefTypeDef,
    GatewayRouteSpecTypeDef,
    GatewayRouteStatusTypeDef,
    GatewayRouteTargetTypeDef,
    GatewayRouteVirtualServiceTypeDef,
    GrpcGatewayRouteActionTypeDef,
    GrpcGatewayRouteMatchTypeDef,
    GrpcGatewayRouteMetadataTypeDef,
    GrpcGatewayRouteRewriteTypeDef,
    GrpcGatewayRouteTypeDef,
    GrpcMetadataMatchMethodTypeDef,
    GrpcRetryPolicyTypeDef,
    GrpcRouteActionTypeDef,
    GrpcRouteMatchTypeDef,
    GrpcRouteMetadataMatchMethodTypeDef,
    GrpcRouteMetadataTypeDef,
    GrpcRouteTypeDef,
    GrpcTimeoutTypeDef,
    HeaderMatchMethodTypeDef,
    HealthCheckPolicyTypeDef,
    HttpGatewayRouteActionTypeDef,
    HttpGatewayRouteHeaderTypeDef,
    HttpGatewayRouteMatchTypeDef,
    HttpGatewayRoutePathRewriteTypeDef,
    HttpGatewayRoutePrefixRewriteTypeDef,
    HttpGatewayRouteRewriteTypeDef,
    HttpGatewayRouteTypeDef,
    HttpPathMatchTypeDef,
    HttpQueryParameterTypeDef,
    HttpRetryPolicyTypeDef,
    HttpRouteActionTypeDef,
    HttpRouteHeaderTypeDef,
    HttpRouteMatchTypeDef,
    HttpRouteTypeDef,
    HttpTimeoutTypeDef,
    ListGatewayRoutesInputRequestTypeDef,
    ListGatewayRoutesOutputTypeDef,
    ListMeshesInputRequestTypeDef,
    ListMeshesOutputTypeDef,
    ListRoutesInputRequestTypeDef,
    ListRoutesOutputTypeDef,
    ListTagsForResourceInputRequestTypeDef,
    ListTagsForResourceOutputTypeDef,
    ListVirtualGatewaysInputRequestTypeDef,
    ListVirtualGatewaysOutputTypeDef,
    ListVirtualNodesInputRequestTypeDef,
    ListVirtualNodesOutputTypeDef,
    ListVirtualRoutersInputRequestTypeDef,
    ListVirtualRoutersOutputTypeDef,
    ListVirtualServicesInputRequestTypeDef,
    ListVirtualServicesOutputTypeDef,
    ListenerTimeoutTypeDef,
    ListenerTlsAcmCertificateTypeDef,
    ListenerTlsCertificateTypeDef,
    ListenerTlsFileCertificateTypeDef,
    ListenerTlsSdsCertificateTypeDef,
    ListenerTlsTypeDef,
    ListenerTlsValidationContextTrustTypeDef,
    ListenerTlsValidationContextTypeDef,
    ListenerTypeDef,
    LoggingTypeDef,
    MatchRangeTypeDef,
    MeshDataTypeDef,
    MeshRefTypeDef,
    MeshSpecTypeDef,
    MeshStatusTypeDef,
    OutlierDetectionTypeDef,
    PaginatorConfigTypeDef,
    PortMappingTypeDef,
    QueryParameterMatchTypeDef,
    ResourceMetadataTypeDef,
    ResponseMetadataTypeDef,
    RouteDataTypeDef,
    RouteRefTypeDef,
    RouteSpecTypeDef,
    RouteStatusTypeDef,
    ServiceDiscoveryTypeDef,
    SubjectAlternativeNameMatchersTypeDef,
    SubjectAlternativeNamesTypeDef,
    TagRefTypeDef,
    TagResourceInputRequestTypeDef,
    TcpRouteActionTypeDef,
    TcpRouteTypeDef,
    TcpTimeoutTypeDef,
    TlsValidationContextAcmTrustTypeDef,
    TlsValidationContextFileTrustTypeDef,
    TlsValidationContextSdsTrustTypeDef,
    TlsValidationContextTrustTypeDef,
    TlsValidationContextTypeDef,
    UntagResourceInputRequestTypeDef,
    UpdateGatewayRouteInputRequestTypeDef,
    UpdateGatewayRouteOutputTypeDef,
    UpdateMeshInputRequestTypeDef,
    UpdateMeshOutputTypeDef,
    UpdateRouteInputRequestTypeDef,
    UpdateRouteOutputTypeDef,
    UpdateVirtualGatewayInputRequestTypeDef,
    UpdateVirtualGatewayOutputTypeDef,
    UpdateVirtualNodeInputRequestTypeDef,
    UpdateVirtualNodeOutputTypeDef,
    UpdateVirtualRouterInputRequestTypeDef,
    UpdateVirtualRouterOutputTypeDef,
    UpdateVirtualServiceInputRequestTypeDef,
    UpdateVirtualServiceOutputTypeDef,
    VirtualGatewayAccessLogTypeDef,
    VirtualGatewayBackendDefaultsTypeDef,
    VirtualGatewayClientPolicyTlsTypeDef,
    VirtualGatewayClientPolicyTypeDef,
    VirtualGatewayClientTlsCertificateTypeDef,
    VirtualGatewayConnectionPoolTypeDef,
    VirtualGatewayDataTypeDef,
    VirtualGatewayFileAccessLogTypeDef,
    VirtualGatewayGrpcConnectionPoolTypeDef,
    VirtualGatewayHealthCheckPolicyTypeDef,
    VirtualGatewayHttp2ConnectionPoolTypeDef,
    VirtualGatewayHttpConnectionPoolTypeDef,
    VirtualGatewayListenerTlsAcmCertificateTypeDef,
    VirtualGatewayListenerTlsCertificateTypeDef,
    VirtualGatewayListenerTlsFileCertificateTypeDef,
    VirtualGatewayListenerTlsSdsCertificateTypeDef,
    VirtualGatewayListenerTlsTypeDef,
    VirtualGatewayListenerTlsValidationContextTrustTypeDef,
    VirtualGatewayListenerTlsValidationContextTypeDef,
    VirtualGatewayListenerTypeDef,
    VirtualGatewayLoggingTypeDef,
    VirtualGatewayPortMappingTypeDef,
    VirtualGatewayRefTypeDef,
    VirtualGatewaySpecTypeDef,
    VirtualGatewayStatusTypeDef,
    VirtualGatewayTlsValidationContextAcmTrustTypeDef,
    VirtualGatewayTlsValidationContextFileTrustTypeDef,
    VirtualGatewayTlsValidationContextSdsTrustTypeDef,
    VirtualGatewayTlsValidationContextTrustTypeDef,
    VirtualGatewayTlsValidationContextTypeDef,
    VirtualNodeConnectionPoolTypeDef,
    VirtualNodeDataTypeDef,
    VirtualNodeGrpcConnectionPoolTypeDef,
    VirtualNodeHttp2ConnectionPoolTypeDef,
    VirtualNodeHttpConnectionPoolTypeDef,
    VirtualNodeRefTypeDef,
    VirtualNodeServiceProviderTypeDef,
    VirtualNodeSpecTypeDef,
    VirtualNodeStatusTypeDef,
    VirtualNodeTcpConnectionPoolTypeDef,
    VirtualRouterDataTypeDef,
    VirtualRouterListenerTypeDef,
    VirtualRouterRefTypeDef,
    VirtualRouterServiceProviderTypeDef,
    VirtualRouterSpecTypeDef,
    VirtualRouterStatusTypeDef,
    VirtualServiceBackendTypeDef,
    VirtualServiceDataTypeDef,
    VirtualServiceProviderTypeDef,
    VirtualServiceRefTypeDef,
    VirtualServiceSpecTypeDef,
    VirtualServiceStatusTypeDef,
    WeightedTargetTypeDef,
)

def get_structure() -> AccessLogTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-appmesh` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-appmesh docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_appmesh/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


