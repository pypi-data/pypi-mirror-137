Metadata-Version: 2.1
Name: types-aiobotocore-license-manager
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.LicenseManager 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore license-manager type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-license-manager"></a>

# mypy-boto3-license-manager

[![PyPI - types-aiobotocore-license-manager](https://img.shields.io/pypi/v/types-aiobotocore-license-manager.svg?color=blue)](https://pypi.org/project/types-aiobotocore-license-manager)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-license-manager.svg?color=blue)](https://pypi.org/project/types-aiobotocore-license-manager)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-license-manager?color=blue)](https://pypistats.org/packages/types-aiobotocore-license-manager)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.LicenseManager 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/license-manager.html#LicenseManager)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-license-manager docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_license_manager/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-license-manager](#mypy-boto3-license-manager)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `LicenseManager`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `LicenseManager` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[license-manager]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[license-manager]'

# standalone installation
python -m pip install types-aiobotocore-license-manager
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[license-manager]` in your environment:
  `python -m pip install 'types-aiobotocore[license-manager]'`

Both type checking and auto-complete should work for `LicenseManager` service.
No explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[license-manager]` in your environment:
  `python -m pip install 'types-aiobotocore[license-manager]'`

Both type checking and auto-complete should work for `LicenseManager` service.
No explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[license-manager]` in your environment:
  `python -m pip install 'types-aiobotocore[license-manager]'`
- Run `mypy` as usual

Type checking should work for `LicenseManager` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[license-manager]` in your environment:
  `python -m pip install 'types-aiobotocore[license-manager]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `LicenseManager` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`LicenseManagerClient` provides annotations for
`session.create_client("license-manager")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_license_manager import LicenseManagerClient

session = get_session()
async with session.create_client("license-manager") as client:
    client: LicenseManagerClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_license_manager.paginator` module contains type annotations
for all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_license_manager import LicenseManagerClient
from types_aiobotocore_license_manager.paginator import (
    ListAssociationsForLicenseConfigurationPaginator,
    ListLicenseConfigurationsPaginator,
    ListLicenseSpecificationsForResourcePaginator,
    ListResourceInventoryPaginator,
    ListUsageForLicenseConfigurationPaginator,
)

session = get_session()
async with session.create_client("license-manager") as client:
    client: LicenseManagerClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_associations_for_license_configuration_paginator: ListAssociationsForLicenseConfigurationPaginator = client.get_paginator("list_associations_for_license_configuration")
        list_license_configurations_paginator: ListLicenseConfigurationsPaginator = client.get_paginator("list_license_configurations")
        list_license_specifications_for_resource_paginator: ListLicenseSpecificationsForResourcePaginator = client.get_paginator("list_license_specifications_for_resource")
        list_resource_inventory_paginator: ListResourceInventoryPaginator = client.get_paginator("list_resource_inventory")
        list_usage_for_license_configuration_paginator: ListUsageForLicenseConfigurationPaginator = client.get_paginator("list_usage_for_license_configuration")
    ```







### Literals

`types_aiobotocore_license_manager.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_license_manager.literals import (
    AllowedOperationType,
    CheckoutTypeType,
    DigitalSignatureMethodType,
    EntitlementDataUnitType,
    EntitlementUnitType,
    GrantStatusType,
    InventoryFilterConditionType,
    LicenseConfigurationStatusType,
    LicenseConversionTaskStatusType,
    LicenseCountingTypeType,
    LicenseDeletionStatusType,
    LicenseStatusType,
    ListAssociationsForLicenseConfigurationPaginatorName,
    ListLicenseConfigurationsPaginatorName,
    ListLicenseSpecificationsForResourcePaginatorName,
    ListResourceInventoryPaginatorName,
    ListUsageForLicenseConfigurationPaginatorName,
    ReceivedStatusType,
    RenewTypeType,
    ReportFrequencyTypeType,
    ReportTypeType,
    ResourceTypeType,
    TokenTypeType,
    ServiceName,
    PaginatorName,
)

def check_value(value: AllowedOperationType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_license_manager.type_defs` module contains structures and
shapes assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_license_manager.type_defs import (
    AcceptGrantRequestRequestTypeDef,
    AcceptGrantResponseTypeDef,
    AutomatedDiscoveryInformationTypeDef,
    BorrowConfigurationTypeDef,
    CheckInLicenseRequestRequestTypeDef,
    CheckoutBorrowLicenseRequestRequestTypeDef,
    CheckoutBorrowLicenseResponseTypeDef,
    CheckoutLicenseRequestRequestTypeDef,
    CheckoutLicenseResponseTypeDef,
    ConsumedLicenseSummaryTypeDef,
    ConsumptionConfigurationTypeDef,
    CreateGrantRequestRequestTypeDef,
    CreateGrantResponseTypeDef,
    CreateGrantVersionRequestRequestTypeDef,
    CreateGrantVersionResponseTypeDef,
    CreateLicenseConfigurationRequestRequestTypeDef,
    CreateLicenseConfigurationResponseTypeDef,
    CreateLicenseConversionTaskForResourceRequestRequestTypeDef,
    CreateLicenseConversionTaskForResourceResponseTypeDef,
    CreateLicenseManagerReportGeneratorRequestRequestTypeDef,
    CreateLicenseManagerReportGeneratorResponseTypeDef,
    CreateLicenseRequestRequestTypeDef,
    CreateLicenseResponseTypeDef,
    CreateLicenseVersionRequestRequestTypeDef,
    CreateLicenseVersionResponseTypeDef,
    CreateTokenRequestRequestTypeDef,
    CreateTokenResponseTypeDef,
    DatetimeRangeTypeDef,
    DeleteGrantRequestRequestTypeDef,
    DeleteGrantResponseTypeDef,
    DeleteLicenseConfigurationRequestRequestTypeDef,
    DeleteLicenseManagerReportGeneratorRequestRequestTypeDef,
    DeleteLicenseRequestRequestTypeDef,
    DeleteLicenseResponseTypeDef,
    DeleteTokenRequestRequestTypeDef,
    EntitlementDataTypeDef,
    EntitlementTypeDef,
    EntitlementUsageTypeDef,
    ExtendLicenseConsumptionRequestRequestTypeDef,
    ExtendLicenseConsumptionResponseTypeDef,
    FilterTypeDef,
    GetAccessTokenRequestRequestTypeDef,
    GetAccessTokenResponseTypeDef,
    GetGrantRequestRequestTypeDef,
    GetGrantResponseTypeDef,
    GetLicenseConfigurationRequestRequestTypeDef,
    GetLicenseConfigurationResponseTypeDef,
    GetLicenseConversionTaskRequestRequestTypeDef,
    GetLicenseConversionTaskResponseTypeDef,
    GetLicenseManagerReportGeneratorRequestRequestTypeDef,
    GetLicenseManagerReportGeneratorResponseTypeDef,
    GetLicenseRequestRequestTypeDef,
    GetLicenseResponseTypeDef,
    GetLicenseUsageRequestRequestTypeDef,
    GetLicenseUsageResponseTypeDef,
    GetServiceSettingsResponseTypeDef,
    GrantTypeDef,
    GrantedLicenseTypeDef,
    InventoryFilterTypeDef,
    IssuerDetailsTypeDef,
    IssuerTypeDef,
    LicenseConfigurationAssociationTypeDef,
    LicenseConfigurationTypeDef,
    LicenseConfigurationUsageTypeDef,
    LicenseConversionContextTypeDef,
    LicenseConversionTaskTypeDef,
    LicenseOperationFailureTypeDef,
    LicenseSpecificationTypeDef,
    LicenseTypeDef,
    LicenseUsageTypeDef,
    ListAssociationsForLicenseConfigurationRequestRequestTypeDef,
    ListAssociationsForLicenseConfigurationResponseTypeDef,
    ListDistributedGrantsRequestRequestTypeDef,
    ListDistributedGrantsResponseTypeDef,
    ListFailuresForLicenseConfigurationOperationsRequestRequestTypeDef,
    ListFailuresForLicenseConfigurationOperationsResponseTypeDef,
    ListLicenseConfigurationsRequestRequestTypeDef,
    ListLicenseConfigurationsResponseTypeDef,
    ListLicenseConversionTasksRequestRequestTypeDef,
    ListLicenseConversionTasksResponseTypeDef,
    ListLicenseManagerReportGeneratorsRequestRequestTypeDef,
    ListLicenseManagerReportGeneratorsResponseTypeDef,
    ListLicenseSpecificationsForResourceRequestRequestTypeDef,
    ListLicenseSpecificationsForResourceResponseTypeDef,
    ListLicenseVersionsRequestRequestTypeDef,
    ListLicenseVersionsResponseTypeDef,
    ListLicensesRequestRequestTypeDef,
    ListLicensesResponseTypeDef,
    ListReceivedGrantsRequestRequestTypeDef,
    ListReceivedGrantsResponseTypeDef,
    ListReceivedLicensesRequestRequestTypeDef,
    ListReceivedLicensesResponseTypeDef,
    ListResourceInventoryRequestRequestTypeDef,
    ListResourceInventoryResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    ListTokensRequestRequestTypeDef,
    ListTokensResponseTypeDef,
    ListUsageForLicenseConfigurationRequestRequestTypeDef,
    ListUsageForLicenseConfigurationResponseTypeDef,
    ManagedResourceSummaryTypeDef,
    MetadataTypeDef,
    OrganizationConfigurationTypeDef,
    PaginatorConfigTypeDef,
    ProductInformationFilterTypeDef,
    ProductInformationTypeDef,
    ProvisionalConfigurationTypeDef,
    ReceivedMetadataTypeDef,
    RejectGrantRequestRequestTypeDef,
    RejectGrantResponseTypeDef,
    ReportContextTypeDef,
    ReportFrequencyTypeDef,
    ReportGeneratorTypeDef,
    ResourceInventoryTypeDef,
    ResponseMetadataTypeDef,
    S3LocationTypeDef,
    TagResourceRequestRequestTypeDef,
    TagTypeDef,
    TokenDataTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateLicenseConfigurationRequestRequestTypeDef,
    UpdateLicenseManagerReportGeneratorRequestRequestTypeDef,
    UpdateLicenseSpecificationsForResourceRequestRequestTypeDef,
    UpdateServiceSettingsRequestRequestTypeDef,
)

def get_structure() -> AcceptGrantRequestRequestTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-license-manager` version is the same as related `boto3`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

## Documentation

All type annotations can be found in
[types-aiobotocore-license-manager docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_license_manager/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


