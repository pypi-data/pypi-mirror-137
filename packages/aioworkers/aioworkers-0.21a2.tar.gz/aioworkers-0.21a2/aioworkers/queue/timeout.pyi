import asyncio
from .base import AbstractQueue as AbstractQueue, ScoreQueueMixin as ScoreQueueMixin
from typing import Any

class TimeoutItem:
    def __init__(self, value, *, timeout: float = ..., add: float = ...) -> None: ...
    @property
    def value(self): ...
    @property
    def timeout(self): ...
    @timeout.setter
    def timeout(self, timeout: float): ...
    def __lt__(self, other): ...
    def __iter__(self): ...

class TimestampQueue(ScoreQueueMixin, AbstractQueue):
    default_score: str
    def __init__(self, *args, **kwargs) -> None: ...
    def set_config(self, config) -> None: ...
    def set_context(self, context): ...
    def cleanup(self) -> None: ...
    def __len__(self): ...
    @property
    def loop(self) -> asyncio.AbstractEventLoop: ...
    def get(self, score: bool = ...): ...
    async def put(self, value, score: Any | None = ...) -> None: ...

class UniqueQueue(TimestampQueue):
    def __init__(self, *args, **kwargs) -> None: ...
