Metadata-Version: 2.1
Name: types-aiobotocore-codepipeline
Version: 2.1.0
Summary: Type annotations for aiobotocore.CodePipeline 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore codepipeline type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-codepipeline"></a>

# mypy-boto3-codepipeline

[![PyPI - types-aiobotocore-codepipeline](https://img.shields.io/pypi/v/types-aiobotocore-codepipeline.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codepipeline)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-codepipeline.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codepipeline)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-codepipeline?color=blue)](https://pypistats.org/packages/types-aiobotocore-codepipeline)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.CodePipeline 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/codepipeline.html#CodePipeline)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-codepipeline docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_codepipeline/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-codepipeline](#mypy-boto3-codepipeline)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `CodePipeline`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `CodePipeline` service.

```bash
python -m pip install types-aiobotocore[codepipeline]
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[codepipeline]` in your environment:
  `python -m pip install 'types-aiobotocore[codepipeline]'`

Both type checking and auto-complete should work for `CodePipeline` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[codepipeline]` in your environment:
  `python -m pip install 'types-aiobotocore[codepipeline]'`

Both type checking and auto-complete should work for `CodePipeline` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[codepipeline]` in your environment:
  `python -m pip install 'types-aiobotocore[codepipeline]'`
- Run `mypy` as usual

Type checking should work for `CodePipeline` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[codepipeline]` in your environment:
  `python -m pip install 'types-aiobotocore[codepipeline]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `CodePipeline` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`CodePipelineClient` provides annotations for
`session.create_client("codepipeline")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_codepipeline import CodePipelineClient

session = get_session()
with async session.create_client("codepipeline") as client:
    client: CodePipelineClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_codepipeline.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_codepipeline import CodePipelineClient
from types_aiobotocore_codepipeline.paginator import (
    ListActionExecutionsPaginator,
    ListActionTypesPaginator,
    ListPipelineExecutionsPaginator,
    ListPipelinesPaginator,
    ListTagsForResourcePaginator,
    ListWebhooksPaginator,
)

session = get_session()
with async session.create_client("codepipeline") as client:
    client: CodePipelineClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_action_executions_paginator: ListActionExecutionsPaginator = client.get_paginator("list_action_executions")
        list_action_types_paginator: ListActionTypesPaginator = client.get_paginator("list_action_types")
        list_pipeline_executions_paginator: ListPipelineExecutionsPaginator = client.get_paginator("list_pipeline_executions")
        list_pipelines_paginator: ListPipelinesPaginator = client.get_paginator("list_pipelines")
        list_tags_for_resource_paginator: ListTagsForResourcePaginator = client.get_paginator("list_tags_for_resource")
        list_webhooks_paginator: ListWebhooksPaginator = client.get_paginator("list_webhooks")
    ```







### Literals

`types_aiobotocore_codepipeline.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_codepipeline.literals import (
    ActionCategoryType,
    ActionConfigurationPropertyTypeType,
    ActionExecutionStatusType,
    ActionOwnerType,
    ApprovalStatusType,
    ArtifactLocationTypeType,
    ArtifactStoreTypeType,
    BlockerTypeType,
    EncryptionKeyTypeType,
    ExecutorTypeType,
    FailureTypeType,
    JobStatusType,
    ListActionExecutionsPaginatorName,
    ListActionTypesPaginatorName,
    ListPipelineExecutionsPaginatorName,
    ListPipelinesPaginatorName,
    ListTagsForResourcePaginatorName,
    ListWebhooksPaginatorName,
    PipelineExecutionStatusType,
    StageExecutionStatusType,
    StageRetryModeType,
    StageTransitionTypeType,
    TriggerTypeType,
    WebhookAuthenticationTypeType,
    ServiceName,
    PaginatorName,
)

def check_value(value: ActionCategoryType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_codepipeline.type_defs` module contains structures and
shapes assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_codepipeline.type_defs import (
    AWSSessionCredentialsTypeDef,
    AcknowledgeJobInputRequestTypeDef,
    AcknowledgeJobOutputTypeDef,
    AcknowledgeThirdPartyJobInputRequestTypeDef,
    AcknowledgeThirdPartyJobOutputTypeDef,
    ActionConfigurationPropertyTypeDef,
    ActionConfigurationTypeDef,
    ActionContextTypeDef,
    ActionDeclarationTypeDef,
    ActionExecutionDetailTypeDef,
    ActionExecutionFilterTypeDef,
    ActionExecutionInputTypeDef,
    ActionExecutionOutputTypeDef,
    ActionExecutionResultTypeDef,
    ActionExecutionTypeDef,
    ActionRevisionTypeDef,
    ActionStateTypeDef,
    ActionTypeArtifactDetailsTypeDef,
    ActionTypeDeclarationTypeDef,
    ActionTypeExecutorTypeDef,
    ActionTypeIdTypeDef,
    ActionTypeIdentifierTypeDef,
    ActionTypePermissionsTypeDef,
    ActionTypePropertyTypeDef,
    ActionTypeSettingsTypeDef,
    ActionTypeTypeDef,
    ActionTypeUrlsTypeDef,
    ApprovalResultTypeDef,
    ArtifactDetailTypeDef,
    ArtifactDetailsTypeDef,
    ArtifactLocationTypeDef,
    ArtifactRevisionTypeDef,
    ArtifactStoreTypeDef,
    ArtifactTypeDef,
    BlockerDeclarationTypeDef,
    CreateCustomActionTypeInputRequestTypeDef,
    CreateCustomActionTypeOutputTypeDef,
    CreatePipelineInputRequestTypeDef,
    CreatePipelineOutputTypeDef,
    CurrentRevisionTypeDef,
    DeleteCustomActionTypeInputRequestTypeDef,
    DeletePipelineInputRequestTypeDef,
    DeleteWebhookInputRequestTypeDef,
    DeregisterWebhookWithThirdPartyInputRequestTypeDef,
    DisableStageTransitionInputRequestTypeDef,
    EnableStageTransitionInputRequestTypeDef,
    EncryptionKeyTypeDef,
    ErrorDetailsTypeDef,
    ExecutionDetailsTypeDef,
    ExecutionTriggerTypeDef,
    ExecutorConfigurationTypeDef,
    FailureDetailsTypeDef,
    GetActionTypeInputRequestTypeDef,
    GetActionTypeOutputTypeDef,
    GetJobDetailsInputRequestTypeDef,
    GetJobDetailsOutputTypeDef,
    GetPipelineExecutionInputRequestTypeDef,
    GetPipelineExecutionOutputTypeDef,
    GetPipelineInputRequestTypeDef,
    GetPipelineOutputTypeDef,
    GetPipelineStateInputRequestTypeDef,
    GetPipelineStateOutputTypeDef,
    GetThirdPartyJobDetailsInputRequestTypeDef,
    GetThirdPartyJobDetailsOutputTypeDef,
    InputArtifactTypeDef,
    JobDataTypeDef,
    JobDetailsTypeDef,
    JobTypeDef,
    JobWorkerExecutorConfigurationTypeDef,
    LambdaExecutorConfigurationTypeDef,
    ListActionExecutionsInputRequestTypeDef,
    ListActionExecutionsOutputTypeDef,
    ListActionTypesInputRequestTypeDef,
    ListActionTypesOutputTypeDef,
    ListPipelineExecutionsInputRequestTypeDef,
    ListPipelineExecutionsOutputTypeDef,
    ListPipelinesInputRequestTypeDef,
    ListPipelinesOutputTypeDef,
    ListTagsForResourceInputRequestTypeDef,
    ListTagsForResourceOutputTypeDef,
    ListWebhookItemTypeDef,
    ListWebhooksInputRequestTypeDef,
    ListWebhooksOutputTypeDef,
    OutputArtifactTypeDef,
    PaginatorConfigTypeDef,
    PipelineContextTypeDef,
    PipelineDeclarationTypeDef,
    PipelineExecutionSummaryTypeDef,
    PipelineExecutionTypeDef,
    PipelineMetadataTypeDef,
    PipelineSummaryTypeDef,
    PollForJobsInputRequestTypeDef,
    PollForJobsOutputTypeDef,
    PollForThirdPartyJobsInputRequestTypeDef,
    PollForThirdPartyJobsOutputTypeDef,
    PutActionRevisionInputRequestTypeDef,
    PutActionRevisionOutputTypeDef,
    PutApprovalResultInputRequestTypeDef,
    PutApprovalResultOutputTypeDef,
    PutJobFailureResultInputRequestTypeDef,
    PutJobSuccessResultInputRequestTypeDef,
    PutThirdPartyJobFailureResultInputRequestTypeDef,
    PutThirdPartyJobSuccessResultInputRequestTypeDef,
    PutWebhookInputRequestTypeDef,
    PutWebhookOutputTypeDef,
    RegisterWebhookWithThirdPartyInputRequestTypeDef,
    ResponseMetadataTypeDef,
    RetryStageExecutionInputRequestTypeDef,
    RetryStageExecutionOutputTypeDef,
    S3ArtifactLocationTypeDef,
    S3LocationTypeDef,
    SourceRevisionTypeDef,
    StageContextTypeDef,
    StageDeclarationTypeDef,
    StageExecutionTypeDef,
    StageStateTypeDef,
    StartPipelineExecutionInputRequestTypeDef,
    StartPipelineExecutionOutputTypeDef,
    StopExecutionTriggerTypeDef,
    StopPipelineExecutionInputRequestTypeDef,
    StopPipelineExecutionOutputTypeDef,
    TagResourceInputRequestTypeDef,
    TagTypeDef,
    ThirdPartyJobDataTypeDef,
    ThirdPartyJobDetailsTypeDef,
    ThirdPartyJobTypeDef,
    TransitionStateTypeDef,
    UntagResourceInputRequestTypeDef,
    UpdateActionTypeInputRequestTypeDef,
    UpdatePipelineInputRequestTypeDef,
    UpdatePipelineOutputTypeDef,
    WebhookAuthConfigurationTypeDef,
    WebhookDefinitionTypeDef,
    WebhookFilterRuleTypeDef,
)

def get_structure() -> AWSSessionCredentialsTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-codepipeline` version is the same as related `boto3` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-codepipeline docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_codepipeline/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


