# coding: utf-8

"""
    Veeroute.Fieldservice

    Veeroute Field Service Engineers API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_fieldservice.configuration import Configuration


class PlanInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'PlanStatus',
        'result_version': 'int',
        'planning_time': 'int',
        'waiting_time': 'int'
    }

    attribute_map = {
        'status': 'status',
        'result_version': 'result_version',
        'planning_time': 'planning_time',
        'waiting_time': 'waiting_time'
    }

    def __init__(self, status=None, result_version=None, planning_time=None, waiting_time=None, local_vars_configuration=None):  # noqa: E501
        """PlanInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._result_version = None
        self._planning_time = None
        self._waiting_time = None
        self.discriminator = None

        self.status = status
        if result_version is not None:
            self.result_version = result_version
        if planning_time is not None:
            self.planning_time = planning_time
        if waiting_time is not None:
            self.waiting_time = waiting_time

    @property
    def status(self):
        """Gets the status of this PlanInfo.  # noqa: E501


        :return: The status of this PlanInfo.  # noqa: E501
        :rtype: PlanStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlanInfo.


        :param status: The status of this PlanInfo.  # noqa: E501
        :type status: PlanStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def result_version(self):
        """Gets the result_version of this PlanInfo.  # noqa: E501

        Planning result version.  # noqa: E501

        :return: The result_version of this PlanInfo.  # noqa: E501
        :rtype: int
        """
        return self._result_version

    @result_version.setter
    def result_version(self, result_version):
        """Sets the result_version of this PlanInfo.

        Planning result version.  # noqa: E501

        :param result_version: The result_version of this PlanInfo.  # noqa: E501
        :type result_version: int
        """
        if (self.local_vars_configuration.client_side_validation and
                result_version is not None and result_version > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `result_version`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                result_version is not None and result_version < 0):  # noqa: E501
            raise ValueError("Invalid value for `result_version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._result_version = result_version

    @property
    def planning_time(self):
        """Gets the planning_time of this PlanInfo.  # noqa: E501

        Actual planning time, in minutes.  # noqa: E501

        :return: The planning_time of this PlanInfo.  # noqa: E501
        :rtype: int
        """
        return self._planning_time

    @planning_time.setter
    def planning_time(self, planning_time):
        """Sets the planning_time of this PlanInfo.

        Actual planning time, in minutes.  # noqa: E501

        :param planning_time: The planning_time of this PlanInfo.  # noqa: E501
        :type planning_time: int
        """
        if (self.local_vars_configuration.client_side_validation and
                planning_time is not None and planning_time > 2880):  # noqa: E501
            raise ValueError("Invalid value for `planning_time`, must be a value less than or equal to `2880`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                planning_time is not None and planning_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `planning_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planning_time = planning_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this PlanInfo.  # noqa: E501

        Time to prepare for planning, in minutes.  # noqa: E501

        :return: The waiting_time of this PlanInfo.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this PlanInfo.

        Time to prepare for planning, in minutes.  # noqa: E501

        :param waiting_time: The waiting_time of this PlanInfo.  # noqa: E501
        :type waiting_time: int
        """
        if (self.local_vars_configuration.client_side_validation and
                waiting_time is not None and waiting_time > 2880):  # noqa: E501
            raise ValueError("Invalid value for `waiting_time`, must be a value less than or equal to `2880`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                waiting_time is not None and waiting_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `waiting_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._waiting_time = waiting_time

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlanInfo):
            return True

        return self.to_dict() != other.to_dict()
