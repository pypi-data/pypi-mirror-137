Metadata-Version: 2.1
Name: types-aiobotocore-workspaces
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.WorkSpaces 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore workspaces type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-workspaces"></a>

# mypy-boto3-workspaces

[![PyPI - types-aiobotocore-workspaces](https://img.shields.io/pypi/v/types-aiobotocore-workspaces.svg?color=blue)](https://pypi.org/project/types-aiobotocore-workspaces)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-workspaces.svg?color=blue)](https://pypi.org/project/types-aiobotocore-workspaces)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-workspaces?color=blue)](https://pypistats.org/packages/types-aiobotocore-workspaces)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.WorkSpaces 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/workspaces.html#WorkSpaces)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-workspaces docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_workspaces/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-workspaces](#mypy-boto3-workspaces)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `WorkSpaces`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `WorkSpaces` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[workspaces]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[workspaces]'

# standalone installation
python -m pip install types-aiobotocore-workspaces
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[workspaces]` in your environment:
  `python -m pip install 'types-aiobotocore[workspaces]'`

Both type checking and auto-complete should work for `WorkSpaces` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[workspaces]` in your environment:
  `python -m pip install 'types-aiobotocore[workspaces]'`

Both type checking and auto-complete should work for `WorkSpaces` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[workspaces]` in your environment:
  `python -m pip install 'types-aiobotocore[workspaces]'`
- Run `mypy` as usual

Type checking should work for `WorkSpaces` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[workspaces]` in your environment:
  `python -m pip install 'types-aiobotocore[workspaces]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `WorkSpaces` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`WorkSpacesClient` provides annotations for
`session.create_client("workspaces")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_workspaces import WorkSpacesClient

session = get_session()
async with session.create_client("workspaces") as client:
    client: WorkSpacesClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_workspaces.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_workspaces import WorkSpacesClient
from types_aiobotocore_workspaces.paginator import (
    DescribeAccountModificationsPaginator,
    DescribeIpGroupsPaginator,
    DescribeWorkspaceBundlesPaginator,
    DescribeWorkspaceDirectoriesPaginator,
    DescribeWorkspaceImagesPaginator,
    DescribeWorkspacesPaginator,
    DescribeWorkspacesConnectionStatusPaginator,
    ListAvailableManagementCidrRangesPaginator,
)

session = get_session()
async with session.create_client("workspaces") as client:
    client: WorkSpacesClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        describe_account_modifications_paginator: DescribeAccountModificationsPaginator = client.get_paginator("describe_account_modifications")
        describe_ip_groups_paginator: DescribeIpGroupsPaginator = client.get_paginator("describe_ip_groups")
        describe_workspace_bundles_paginator: DescribeWorkspaceBundlesPaginator = client.get_paginator("describe_workspace_bundles")
        describe_workspace_directories_paginator: DescribeWorkspaceDirectoriesPaginator = client.get_paginator("describe_workspace_directories")
        describe_workspace_images_paginator: DescribeWorkspaceImagesPaginator = client.get_paginator("describe_workspace_images")
        describe_workspaces_paginator: DescribeWorkspacesPaginator = client.get_paginator("describe_workspaces")
        describe_workspaces_connection_status_paginator: DescribeWorkspacesConnectionStatusPaginator = client.get_paginator("describe_workspaces_connection_status")
        list_available_management_cidr_ranges_paginator: ListAvailableManagementCidrRangesPaginator = client.get_paginator("list_available_management_cidr_ranges")
    ```







### Literals

`types_aiobotocore_workspaces.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_workspaces.literals import (
    AccessPropertyValueType,
    ApplicationType,
    AssociationStatusType,
    ComputeType,
    ConnectionAliasStateType,
    ConnectionStateType,
    DedicatedTenancyModificationStateEnumType,
    DedicatedTenancySupportEnumType,
    DedicatedTenancySupportResultEnumType,
    DescribeAccountModificationsPaginatorName,
    DescribeIpGroupsPaginatorName,
    DescribeWorkspaceBundlesPaginatorName,
    DescribeWorkspaceDirectoriesPaginatorName,
    DescribeWorkspaceImagesPaginatorName,
    DescribeWorkspacesConnectionStatusPaginatorName,
    DescribeWorkspacesPaginatorName,
    ImageTypeType,
    ListAvailableManagementCidrRangesPaginatorName,
    ModificationResourceEnumType,
    ModificationStateEnumType,
    OperatingSystemTypeType,
    ReconnectEnumType,
    RunningModeType,
    TargetWorkspaceStateType,
    TenancyType,
    WorkspaceDirectoryStateType,
    WorkspaceDirectoryTypeType,
    WorkspaceImageIngestionProcessType,
    WorkspaceImageRequiredTenancyType,
    WorkspaceImageStateType,
    WorkspaceStateType,
    ServiceName,
    PaginatorName,
)

def check_value(value: AccessPropertyValueType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_workspaces.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_workspaces.type_defs import (
    AccountModificationTypeDef,
    AssociateConnectionAliasRequestRequestTypeDef,
    AssociateConnectionAliasResultTypeDef,
    AssociateIpGroupsRequestRequestTypeDef,
    AuthorizeIpRulesRequestRequestTypeDef,
    ClientPropertiesResultTypeDef,
    ClientPropertiesTypeDef,
    ComputeTypeTypeDef,
    ConnectionAliasAssociationTypeDef,
    ConnectionAliasPermissionTypeDef,
    ConnectionAliasTypeDef,
    CopyWorkspaceImageRequestRequestTypeDef,
    CopyWorkspaceImageResultTypeDef,
    CreateConnectionAliasRequestRequestTypeDef,
    CreateConnectionAliasResultTypeDef,
    CreateIpGroupRequestRequestTypeDef,
    CreateIpGroupResultTypeDef,
    CreateTagsRequestRequestTypeDef,
    CreateUpdatedWorkspaceImageRequestRequestTypeDef,
    CreateUpdatedWorkspaceImageResultTypeDef,
    CreateWorkspaceBundleRequestRequestTypeDef,
    CreateWorkspaceBundleResultTypeDef,
    CreateWorkspacesRequestRequestTypeDef,
    CreateWorkspacesResultTypeDef,
    DefaultWorkspaceCreationPropertiesTypeDef,
    DeleteConnectionAliasRequestRequestTypeDef,
    DeleteIpGroupRequestRequestTypeDef,
    DeleteTagsRequestRequestTypeDef,
    DeleteWorkspaceBundleRequestRequestTypeDef,
    DeleteWorkspaceImageRequestRequestTypeDef,
    DeregisterWorkspaceDirectoryRequestRequestTypeDef,
    DescribeAccountModificationsRequestRequestTypeDef,
    DescribeAccountModificationsResultTypeDef,
    DescribeAccountResultTypeDef,
    DescribeClientPropertiesRequestRequestTypeDef,
    DescribeClientPropertiesResultTypeDef,
    DescribeConnectionAliasPermissionsRequestRequestTypeDef,
    DescribeConnectionAliasPermissionsResultTypeDef,
    DescribeConnectionAliasesRequestRequestTypeDef,
    DescribeConnectionAliasesResultTypeDef,
    DescribeIpGroupsRequestRequestTypeDef,
    DescribeIpGroupsResultTypeDef,
    DescribeTagsRequestRequestTypeDef,
    DescribeTagsResultTypeDef,
    DescribeWorkspaceBundlesRequestRequestTypeDef,
    DescribeWorkspaceBundlesResultTypeDef,
    DescribeWorkspaceDirectoriesRequestRequestTypeDef,
    DescribeWorkspaceDirectoriesResultTypeDef,
    DescribeWorkspaceImagePermissionsRequestRequestTypeDef,
    DescribeWorkspaceImagePermissionsResultTypeDef,
    DescribeWorkspaceImagesRequestRequestTypeDef,
    DescribeWorkspaceImagesResultTypeDef,
    DescribeWorkspaceSnapshotsRequestRequestTypeDef,
    DescribeWorkspaceSnapshotsResultTypeDef,
    DescribeWorkspacesConnectionStatusRequestRequestTypeDef,
    DescribeWorkspacesConnectionStatusResultTypeDef,
    DescribeWorkspacesRequestRequestTypeDef,
    DescribeWorkspacesResultTypeDef,
    DisassociateConnectionAliasRequestRequestTypeDef,
    DisassociateIpGroupsRequestRequestTypeDef,
    FailedCreateWorkspaceRequestTypeDef,
    FailedWorkspaceChangeRequestTypeDef,
    ImagePermissionTypeDef,
    ImportWorkspaceImageRequestRequestTypeDef,
    ImportWorkspaceImageResultTypeDef,
    IpRuleItemTypeDef,
    ListAvailableManagementCidrRangesRequestRequestTypeDef,
    ListAvailableManagementCidrRangesResultTypeDef,
    MigrateWorkspaceRequestRequestTypeDef,
    MigrateWorkspaceResultTypeDef,
    ModificationStateTypeDef,
    ModifyAccountRequestRequestTypeDef,
    ModifyClientPropertiesRequestRequestTypeDef,
    ModifySelfservicePermissionsRequestRequestTypeDef,
    ModifyWorkspaceAccessPropertiesRequestRequestTypeDef,
    ModifyWorkspaceCreationPropertiesRequestRequestTypeDef,
    ModifyWorkspacePropertiesRequestRequestTypeDef,
    ModifyWorkspaceStateRequestRequestTypeDef,
    OperatingSystemTypeDef,
    PaginatorConfigTypeDef,
    RebootRequestTypeDef,
    RebootWorkspacesRequestRequestTypeDef,
    RebootWorkspacesResultTypeDef,
    RebuildRequestTypeDef,
    RebuildWorkspacesRequestRequestTypeDef,
    RebuildWorkspacesResultTypeDef,
    RegisterWorkspaceDirectoryRequestRequestTypeDef,
    ResponseMetadataTypeDef,
    RestoreWorkspaceRequestRequestTypeDef,
    RevokeIpRulesRequestRequestTypeDef,
    RootStorageTypeDef,
    SelfservicePermissionsTypeDef,
    SnapshotTypeDef,
    StartRequestTypeDef,
    StartWorkspacesRequestRequestTypeDef,
    StartWorkspacesResultTypeDef,
    StopRequestTypeDef,
    StopWorkspacesRequestRequestTypeDef,
    StopWorkspacesResultTypeDef,
    TagTypeDef,
    TerminateRequestTypeDef,
    TerminateWorkspacesRequestRequestTypeDef,
    TerminateWorkspacesResultTypeDef,
    UpdateConnectionAliasPermissionRequestRequestTypeDef,
    UpdateResultTypeDef,
    UpdateRulesOfIpGroupRequestRequestTypeDef,
    UpdateWorkspaceBundleRequestRequestTypeDef,
    UpdateWorkspaceImagePermissionRequestRequestTypeDef,
    UserStorageTypeDef,
    WorkspaceAccessPropertiesTypeDef,
    WorkspaceBundleTypeDef,
    WorkspaceConnectionStatusTypeDef,
    WorkspaceCreationPropertiesTypeDef,
    WorkspaceDirectoryTypeDef,
    WorkspaceImageTypeDef,
    WorkspacePropertiesTypeDef,
    WorkspaceRequestTypeDef,
    WorkspaceTypeDef,
    WorkspacesIpGroupTypeDef,
)

def get_structure() -> AccountModificationTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-workspaces` version is the same as related `boto3` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-workspaces docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_workspaces/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


