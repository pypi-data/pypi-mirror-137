Metadata-Version: 2.1
Name: types-aiobotocore-forecast
Version: 2.1.0
Summary: Type annotations for aiobotocore.ForecastService 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore forecast type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-forecast"></a>

# mypy-boto3-forecast

[![PyPI - types-aiobotocore-forecast](https://img.shields.io/pypi/v/types-aiobotocore-forecast.svg?color=blue)](https://pypi.org/project/types-aiobotocore-forecast)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-forecast.svg?color=blue)](https://pypi.org/project/types-aiobotocore-forecast)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-forecast?color=blue)](https://pypistats.org/packages/types-aiobotocore-forecast)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.ForecastService 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/forecast.html#ForecastService)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-forecast docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_forecast/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-forecast](#mypy-boto3-forecast)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `ForecastService`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `ForecastService` service.

```bash
python -m pip install types-aiobotocore[forecast]
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[forecast]` in your environment:
  `python -m pip install 'types-aiobotocore[forecast]'`

Both type checking and auto-complete should work for `ForecastService` service.
No explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[forecast]` in your environment:
  `python -m pip install 'types-aiobotocore[forecast]'`

Both type checking and auto-complete should work for `ForecastService` service.
No explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[forecast]` in your environment:
  `python -m pip install 'types-aiobotocore[forecast]'`
- Run `mypy` as usual

Type checking should work for `ForecastService` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[forecast]` in your environment:
  `python -m pip install 'types-aiobotocore[forecast]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `ForecastService` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`ForecastServiceClient` provides annotations for
`session.create_client("forecast")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_forecast import ForecastServiceClient

session = get_session()
with async session.create_client("forecast") as client:
    client: ForecastServiceClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_forecast.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_forecast import ForecastServiceClient
from types_aiobotocore_forecast.paginator import (
    ListDatasetGroupsPaginator,
    ListDatasetImportJobsPaginator,
    ListDatasetsPaginator,
    ListForecastExportJobsPaginator,
    ListForecastsPaginator,
    ListPredictorBacktestExportJobsPaginator,
    ListPredictorsPaginator,
)

session = get_session()
with async session.create_client("forecast") as client:
    client: ForecastServiceClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_dataset_groups_paginator: ListDatasetGroupsPaginator = client.get_paginator("list_dataset_groups")
        list_dataset_import_jobs_paginator: ListDatasetImportJobsPaginator = client.get_paginator("list_dataset_import_jobs")
        list_datasets_paginator: ListDatasetsPaginator = client.get_paginator("list_datasets")
        list_forecast_export_jobs_paginator: ListForecastExportJobsPaginator = client.get_paginator("list_forecast_export_jobs")
        list_forecasts_paginator: ListForecastsPaginator = client.get_paginator("list_forecasts")
        list_predictor_backtest_export_jobs_paginator: ListPredictorBacktestExportJobsPaginator = client.get_paginator("list_predictor_backtest_export_jobs")
        list_predictors_paginator: ListPredictorsPaginator = client.get_paginator("list_predictors")
    ```







### Literals

`types_aiobotocore_forecast.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_forecast.literals import (
    AttributeTypeType,
    AutoMLOverrideStrategyType,
    DatasetTypeType,
    DomainType,
    EvaluationTypeType,
    FeaturizationMethodNameType,
    FilterConditionStringType,
    ListDatasetGroupsPaginatorName,
    ListDatasetImportJobsPaginatorName,
    ListDatasetsPaginatorName,
    ListForecastExportJobsPaginatorName,
    ListForecastsPaginatorName,
    ListPredictorBacktestExportJobsPaginatorName,
    ListPredictorsPaginatorName,
    OptimizationMetricType,
    ScalingTypeType,
    StateType,
    TimePointGranularityType,
    TimeSeriesGranularityType,
    ServiceName,
    PaginatorName,
)

def check_value(value: AttributeTypeType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_forecast.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_forecast.type_defs import (
    AdditionalDatasetTypeDef,
    AttributeConfigTypeDef,
    CategoricalParameterRangeTypeDef,
    ContinuousParameterRangeTypeDef,
    CreateAutoPredictorRequestRequestTypeDef,
    CreateAutoPredictorResponseTypeDef,
    CreateDatasetGroupRequestRequestTypeDef,
    CreateDatasetGroupResponseTypeDef,
    CreateDatasetImportJobRequestRequestTypeDef,
    CreateDatasetImportJobResponseTypeDef,
    CreateDatasetRequestRequestTypeDef,
    CreateDatasetResponseTypeDef,
    CreateExplainabilityExportRequestRequestTypeDef,
    CreateExplainabilityExportResponseTypeDef,
    CreateExplainabilityRequestRequestTypeDef,
    CreateExplainabilityResponseTypeDef,
    CreateForecastExportJobRequestRequestTypeDef,
    CreateForecastExportJobResponseTypeDef,
    CreateForecastRequestRequestTypeDef,
    CreateForecastResponseTypeDef,
    CreatePredictorBacktestExportJobRequestRequestTypeDef,
    CreatePredictorBacktestExportJobResponseTypeDef,
    CreatePredictorRequestRequestTypeDef,
    CreatePredictorResponseTypeDef,
    DataConfigTypeDef,
    DataDestinationTypeDef,
    DataSourceTypeDef,
    DatasetGroupSummaryTypeDef,
    DatasetImportJobSummaryTypeDef,
    DatasetSummaryTypeDef,
    DeleteDatasetGroupRequestRequestTypeDef,
    DeleteDatasetImportJobRequestRequestTypeDef,
    DeleteDatasetRequestRequestTypeDef,
    DeleteExplainabilityExportRequestRequestTypeDef,
    DeleteExplainabilityRequestRequestTypeDef,
    DeleteForecastExportJobRequestRequestTypeDef,
    DeleteForecastRequestRequestTypeDef,
    DeletePredictorBacktestExportJobRequestRequestTypeDef,
    DeletePredictorRequestRequestTypeDef,
    DeleteResourceTreeRequestRequestTypeDef,
    DescribeAutoPredictorRequestRequestTypeDef,
    DescribeAutoPredictorResponseTypeDef,
    DescribeDatasetGroupRequestRequestTypeDef,
    DescribeDatasetGroupResponseTypeDef,
    DescribeDatasetImportJobRequestRequestTypeDef,
    DescribeDatasetImportJobResponseTypeDef,
    DescribeDatasetRequestRequestTypeDef,
    DescribeDatasetResponseTypeDef,
    DescribeExplainabilityExportRequestRequestTypeDef,
    DescribeExplainabilityExportResponseTypeDef,
    DescribeExplainabilityRequestRequestTypeDef,
    DescribeExplainabilityResponseTypeDef,
    DescribeForecastExportJobRequestRequestTypeDef,
    DescribeForecastExportJobResponseTypeDef,
    DescribeForecastRequestRequestTypeDef,
    DescribeForecastResponseTypeDef,
    DescribePredictorBacktestExportJobRequestRequestTypeDef,
    DescribePredictorBacktestExportJobResponseTypeDef,
    DescribePredictorRequestRequestTypeDef,
    DescribePredictorResponseTypeDef,
    EncryptionConfigTypeDef,
    ErrorMetricTypeDef,
    EvaluationParametersTypeDef,
    EvaluationResultTypeDef,
    ExplainabilityConfigTypeDef,
    ExplainabilityExportSummaryTypeDef,
    ExplainabilityInfoTypeDef,
    ExplainabilitySummaryTypeDef,
    FeaturizationConfigTypeDef,
    FeaturizationMethodTypeDef,
    FeaturizationTypeDef,
    FilterTypeDef,
    ForecastExportJobSummaryTypeDef,
    ForecastSummaryTypeDef,
    GetAccuracyMetricsRequestRequestTypeDef,
    GetAccuracyMetricsResponseTypeDef,
    HyperParameterTuningJobConfigTypeDef,
    InputDataConfigTypeDef,
    IntegerParameterRangeTypeDef,
    ListDatasetGroupsRequestRequestTypeDef,
    ListDatasetGroupsResponseTypeDef,
    ListDatasetImportJobsRequestRequestTypeDef,
    ListDatasetImportJobsResponseTypeDef,
    ListDatasetsRequestRequestTypeDef,
    ListDatasetsResponseTypeDef,
    ListExplainabilitiesRequestRequestTypeDef,
    ListExplainabilitiesResponseTypeDef,
    ListExplainabilityExportsRequestRequestTypeDef,
    ListExplainabilityExportsResponseTypeDef,
    ListForecastExportJobsRequestRequestTypeDef,
    ListForecastExportJobsResponseTypeDef,
    ListForecastsRequestRequestTypeDef,
    ListForecastsResponseTypeDef,
    ListPredictorBacktestExportJobsRequestRequestTypeDef,
    ListPredictorBacktestExportJobsResponseTypeDef,
    ListPredictorsRequestRequestTypeDef,
    ListPredictorsResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    MetricsTypeDef,
    PaginatorConfigTypeDef,
    ParameterRangesTypeDef,
    PredictorBacktestExportJobSummaryTypeDef,
    PredictorExecutionDetailsTypeDef,
    PredictorExecutionTypeDef,
    PredictorSummaryTypeDef,
    ReferencePredictorSummaryTypeDef,
    ResponseMetadataTypeDef,
    S3ConfigTypeDef,
    SchemaAttributeTypeDef,
    SchemaTypeDef,
    StatisticsTypeDef,
    StopResourceRequestRequestTypeDef,
    SupplementaryFeatureTypeDef,
    TagResourceRequestRequestTypeDef,
    TagTypeDef,
    TestWindowSummaryTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateDatasetGroupRequestRequestTypeDef,
    WeightedQuantileLossTypeDef,
    WindowSummaryTypeDef,
)

def get_structure() -> AdditionalDatasetTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-forecast` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-forecast docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_forecast/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


