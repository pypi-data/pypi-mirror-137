#!/usr/bin/env python
"""
Script for plotting results.

```
python plot.py logs.tsv
```
"""
import glob
import os

from absl import app
from absl import flags
from absl import logging

import gnuplotlib as gp
import numpy as np
import pandas  # Fast CSV reading.

FLAGS = flags.FLAGS

flags.DEFINE_string("xkey", "step", "x values to plot.")
flags.DEFINE_string("ykey", "episode_return", "y values to plot.")
flags.DEFINE_integer("window", 50, "Smoothing window size.")
flags.DEFINE_integer("width", 80, "Width of plot.")
flags.DEFINE_integer("height", 30, "Height of plot.")
flags.DEFINE_bool("errorbars", False, "Whether to print error bars.")
flags.DEFINE_enum(
    "smoothing", "pandas", ["pandas", "convolve", "cumsum"], "Smoothing algorithm."
)


def moving_average_cumsum(a, n=20):
    # Fast, but doesn't play well with NaNs
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1 :] / n


def moving_average(a, n=20):
    return np.convolve(a, np.ones((n,)) / n, mode="valid")


def rolling_xs_ys(xs, ys, window_size=20):
    """Alternative to rolling() in pandas."""
    ma = moving_average_cumsum if FLAGS.smoothing == "cumsum" else moving_average
    return xs[window_size - 1 :], ma(ys, window_size)


def plot(xys, xrange=None, yrange=None, color="green"):
    plot_options = dict(
        terminal="dumb %d %d ansi" % (FLAGS.width, FLAGS.height),
        title=FLAGS.ykey,
        xlabel=FLAGS.xkey,
        set=("key outside bottom center",),
        # _with="points linecolor '%s'" % color,
    )

    if FLAGS.errorbars:
        plot_options["with"] = "yerrorbars"

    if xrange is not None:
        plot_options.update(xrange=xrange)

    if yrange is not None:
        plot_options.update(yrange=yrange)

    gp.plot(*xys, **plot_options)


def load_file(filename):
    delimiters = {".tsv": "\t", ".csv": ","}
    dirname = os.path.dirname(filename)
    _, ext = os.path.splitext(filename)

    if ext not in delimiters:
        raise RuntimeError("Filetype not recognised (expected .csv or .tsv): %s" % ext)

    with open(filename) as f:
        df = pandas.read_csv(filename, sep=delimiters[ext])

        xs = np.array(df[FLAGS.xkey])

        if FLAGS.smoothing == "pandas":
            window = df[FLAGS.ykey].rolling(window=FLAGS.window, min_periods=0)
            ys = np.array(window.mean())
        else:
            ys = np.array(df[FLAGS.ykey])
            xs, ys = rolling_xs_ys(xs, ys, window_size=FLAGS.window)

    return (xs, ys, {"legend": filename})


def main(argv):
    xys = []

    for pattern in argv[1:]:  # Skip argv[0] == __file__.
        for filename in glob.glob(pattern):
            xys.append(load_file(filename))

    plot(xys)


if __name__ == "__main__":
    app.run(main)
