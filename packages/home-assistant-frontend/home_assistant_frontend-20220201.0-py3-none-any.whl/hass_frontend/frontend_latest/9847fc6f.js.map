{"version":3,"file":"9847fc6f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;;ACYA;;;;AAKA;AACA;;AAEA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AA/BA;;;;;;;;;;AAAA;;;AC6BA;;;;AAKA;AAEA;;AAGA;;AAEA;AAGA;;AAEA;;AAEA;;AAKA;AACA;;AAKA;AAYA;;AAGA;AAUA;;;;;;;;AAUA;;;AAGA;;AAIA;AACA;;;;;;AA5FA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/panels/config/logs/error-log-card.ts","webpack://home-assistant-frontend/./src/panels/config/logs/ha-config-logs.ts","webpack://home-assistant-frontend/./src/panels/config/logs/system-log-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiRefresh } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport \"../../../components/ha-icon-button\";\nimport { fetchErrorLog } from \"../../../data/error_log\";\nimport { HomeAssistant } from \"../../../types\";\n\nclass ErrorLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _errorHTML!: TemplateResult[] | string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"error-log-intro\">\n        ${this._errorHTML\n          ? html`\n              <ha-card>\n                <ha-icon-button\n                  .path=${mdiRefresh}\n                  @click=${this._refreshErrorLog}\n                  .label=${this.hass.localize(\"ui.common.refresh\")}\n                ></ha-icon-button>\n                <div class=\"card-content error-log\">${this._errorHTML}</div>\n              </ha-card>\n            `\n          : html`\n              <mwc-button raised @click=${this._refreshErrorLog}>\n                ${this.hass.localize(\"ui.panel.config.logs.load_full_log\")}\n              </mwc-button>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    if (this.hass?.config.safe_mode) {\n      this.hass.loadFragmentTranslation(\"config\");\n      this._refreshErrorLog();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .error-log-intro {\n        text-align: center;\n        margin: 16px;\n      }\n\n      ha-icon-button {\n        float: right;\n      }\n\n      .error-log {\n        @apply --paper-font-code)\n          clear: both;\n        text-align: left;\n        padding-top: 12px;\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      .warning {\n        color: var(--warning-color);\n      }\n    `;\n  }\n\n  private async _refreshErrorLog(): Promise<void> {\n    this._errorHTML = this.hass.localize(\"ui.panel.config.logs.loading_log\");\n    const log = await fetchErrorLog(this.hass!);\n\n    this._errorHTML = log\n      ? log.split(\"\\n\").map((entry) => {\n          if (entry.includes(\"INFO\"))\n            return html`<div class=\"info\">${entry}</div>`;\n\n          if (entry.includes(\"WARNING\"))\n            return html`<div class=\"warning\">${entry}</div>`;\n\n          if (\n            entry.includes(\"ERROR\") ||\n            entry.includes(\"FATAL\") ||\n            entry.includes(\"CRITICAL\")\n          )\n            return html`<div class=\"error\">${entry}</div>`;\n\n          return html`<div>${entry}</div>`;\n        })\n      : this.hass.localize(\"ui.panel.config.logs.no_errors\");\n  }\n}\n\ncustomElements.define(\"error-log-card\", ErrorLogCard);\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./error-log-card\";\nimport \"./system-log-card\";\nimport type { SystemLogCard } from \"./system-log-card\";\n\n@customElement(\"ha-config-logs\")\nexport class HaConfigLogs extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  @query(\"system-log-card\", true) private systemLog?: SystemLogCard;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.systemLog && this.systemLog.loaded) {\n      this.systemLog.fetchData();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.general}\n      >\n        <div class=\"content\">\n          <system-log-card .hass=${this.hass}></system-log-card>\n          <error-log-card .hass=${this.hass}></error-log-card>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          direction: ltr;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-logs\": HaConfigLogs;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-icon-button\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  fetchSystemLog,\n  getLoggedErrorIntegration,\n  isCustomIntegrationError,\n  LoggedError,\n} from \"../../../data/system_log\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showSystemLogDetailDialog } from \"./show-dialog-system-log-detail\";\nimport { formatSystemLogTime } from \"./util\";\n\n@customElement(\"system-log-card\")\nexport class SystemLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  public loaded = false;\n\n  @state() private _items?: LoggedError[];\n\n  public async fetchData(): Promise<void> {\n    this._items = undefined;\n    this._items = await fetchSystemLog(this.hass!);\n  }\n\n  protected render(): TemplateResult {\n    const integrations = this._items\n      ? this._items.map((item) => getLoggedErrorIntegration(item))\n      : [];\n    return html`\n      <div class=\"system-log-intro\">\n        <ha-card>\n          ${this._items === undefined\n            ? html`\n                <div class=\"loading-container\">\n                  <ha-circular-progress active></ha-circular-progress>\n                </div>\n              `\n            : html`\n                ${this._items.length === 0\n                  ? html`\n                      <div class=\"card-content\">\n                        ${this.hass.localize(\"ui.panel.config.logs.no_issues\")}\n                      </div>\n                    `\n                  : this._items.map(\n                      (item, idx) => html`\n                        <paper-item @click=${this._openLog} .logItem=${item}>\n                          <paper-item-body two-line>\n                            <div class=\"row\">${item.message[0]}</div>\n                            <div secondary>\n                              ${formatSystemLogTime(\n                                item.timestamp,\n                                this.hass!.locale\n                              )}\n                              –\n                              ${html`(<span class=${item.level.toLowerCase()}\n                                  >${this.hass.localize(\n                                    \"ui.panel.config.logs.level.\" +\n                                      item.level.toLowerCase()\n                                  )}</span\n                                >) `}\n                              ${integrations[idx]\n                                ? `${domainToName(\n                                    this.hass!.localize,\n                                    integrations[idx]!\n                                  )}${\n                                    isCustomIntegrationError(item)\n                                      ? ` (${this.hass.localize(\n                                          \"ui.panel.config.logs.custom_integration\"\n                                        )})`\n                                      : \"\"\n                                  }`\n                                : item.source[0]}\n                              ${item.count > 1\n                                ? html`\n                                    -\n                                    ${this.hass.localize(\n                                      \"ui.panel.config.logs.multiple_messages\",\n                                      \"time\",\n                                      formatSystemLogTime(\n                                        item.first_occurred,\n                                        this.hass!.locale\n                                      ),\n                                      \"counter\",\n                                      item.count\n                                    )}\n                                  `\n                                : html``}\n                            </div>\n                          </paper-item-body>\n                        </paper-item>\n                      `\n                    )}\n\n                <div class=\"card-actions\">\n                  <ha-call-service-button\n                    .hass=${this.hass}\n                    domain=\"system_log\"\n                    service=\"clear\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.logs.clear\"\n                    )}</ha-call-service-button\n                  >\n                  <ha-progress-button @click=${this.fetchData}\n                    >${this.hass.localize(\n                      \"ui.panel.config.logs.refresh\"\n                    )}</ha-progress-button\n                  >\n                </div>\n              `}\n        </ha-card>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n    this.fetchData();\n    this.loaded = true;\n    this.addEventListener(\"hass-service-called\", (ev) =>\n      this.serviceCalled(ev)\n    );\n  }\n\n  protected serviceCalled(ev): void {\n    // Check if this is for us\n    if (ev.detail.success && ev.detail.domain === \"system_log\") {\n      // Do the right thing depending on service\n      if (ev.detail.service === \"clear\") {\n        this._items = [];\n      }\n    }\n  }\n\n  private _openLog(ev: Event): void {\n    const item = (ev.currentTarget as any).logItem;\n    showSystemLogDetailDialog(this, { item });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        padding-top: 16px;\n      }\n\n      paper-item {\n        cursor: pointer;\n      }\n\n      .system-log-intro {\n        margin: 16px;\n      }\n\n      .loading-container {\n        height: 100px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      .warning {\n        color: var(--warning-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"system-log-card\": SystemLogCard;\n  }\n}\n"],"names":[],"sourceRoot":""}