# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ansys.grpc.dpf.base_pb2 as base__pb2


class BaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerInfo = channel.unary_unary(
                '/ansys.api.dpf.base.v0.BaseService/GetServerInfo',
                request_serializer=base__pb2.ServerInfoRequest.SerializeToString,
                response_deserializer=base__pb2.ServerInfoResponse.FromString,
                )
        self.Load = channel.unary_unary(
                '/ansys.api.dpf.base.v0.BaseService/Load',
                request_serializer=base__pb2.PluginRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                )
        self.Describe = channel.unary_unary(
                '/ansys.api.dpf.base.v0.BaseService/Describe',
                request_serializer=base__pb2.DescribeRequest.SerializeToString,
                response_deserializer=base__pb2.DescribeResponse.FromString,
                )
        self.DuplicateRef = channel.unary_unary(
                '/ansys.api.dpf.base.v0.BaseService/DuplicateRef',
                request_serializer=base__pb2.DuplicateRefRequest.SerializeToString,
                response_deserializer=base__pb2.DuplicateRefResponse.FromString,
                )
        self.CreateTmpDir = channel.unary_unary(
                '/ansys.api.dpf.base.v0.BaseService/CreateTmpDir',
                request_serializer=base__pb2.Empty.SerializeToString,
                response_deserializer=base__pb2.UploadFileResponse.FromString,
                )
        self.DownloadFile = channel.unary_stream(
                '/ansys.api.dpf.base.v0.BaseService/DownloadFile',
                request_serializer=base__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=base__pb2.DownloadFileResponse.FromString,
                )
        self.UploadFile = channel.stream_unary(
                '/ansys.api.dpf.base.v0.BaseService/UploadFile',
                request_serializer=base__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=base__pb2.UploadFileResponse.FromString,
                )
        self.PrepareShutdown = channel.unary_unary(
                '/ansys.api.dpf.base.v0.BaseService/PrepareShutdown',
                request_serializer=base__pb2.Empty.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                )


class BaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetServerInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Describe(self, request, context):
        """describe any sharedObjectBase
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DuplicateRef(self, request, context):
        """describe any sharedOpbjectBase
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTmpDir(self, request, context):
        """create a temporary dir server side
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """file from server to client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """file from client to server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareShutdown(self, request, context):
        """close the grpc server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerInfo,
                    request_deserializer=base__pb2.ServerInfoRequest.FromString,
                    response_serializer=base__pb2.ServerInfoResponse.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=base__pb2.PluginRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'Describe': grpc.unary_unary_rpc_method_handler(
                    servicer.Describe,
                    request_deserializer=base__pb2.DescribeRequest.FromString,
                    response_serializer=base__pb2.DescribeResponse.SerializeToString,
            ),
            'DuplicateRef': grpc.unary_unary_rpc_method_handler(
                    servicer.DuplicateRef,
                    request_deserializer=base__pb2.DuplicateRefRequest.FromString,
                    response_serializer=base__pb2.DuplicateRefResponse.SerializeToString,
            ),
            'CreateTmpDir': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTmpDir,
                    request_deserializer=base__pb2.Empty.FromString,
                    response_serializer=base__pb2.UploadFileResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=base__pb2.DownloadFileRequest.FromString,
                    response_serializer=base__pb2.DownloadFileResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=base__pb2.UploadFileRequest.FromString,
                    response_serializer=base__pb2.UploadFileResponse.SerializeToString,
            ),
            'PrepareShutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareShutdown,
                    request_deserializer=base__pb2.Empty.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ansys.api.dpf.base.v0.BaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetServerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.dpf.base.v0.BaseService/GetServerInfo',
            base__pb2.ServerInfoRequest.SerializeToString,
            base__pb2.ServerInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.dpf.base.v0.BaseService/Load',
            base__pb2.PluginRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Describe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.dpf.base.v0.BaseService/Describe',
            base__pb2.DescribeRequest.SerializeToString,
            base__pb2.DescribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DuplicateRef(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.dpf.base.v0.BaseService/DuplicateRef',
            base__pb2.DuplicateRefRequest.SerializeToString,
            base__pb2.DuplicateRefResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTmpDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.dpf.base.v0.BaseService/CreateTmpDir',
            base__pb2.Empty.SerializeToString,
            base__pb2.UploadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ansys.api.dpf.base.v0.BaseService/DownloadFile',
            base__pb2.DownloadFileRequest.SerializeToString,
            base__pb2.DownloadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ansys.api.dpf.base.v0.BaseService/UploadFile',
            base__pb2.UploadFileRequest.SerializeToString,
            base__pb2.UploadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareShutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.dpf.base.v0.BaseService/PrepareShutdown',
            base__pb2.Empty.SerializeToString,
            base__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
