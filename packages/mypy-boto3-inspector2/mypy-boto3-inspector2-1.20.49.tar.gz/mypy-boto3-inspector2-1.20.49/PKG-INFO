Metadata-Version: 2.1
Name: mypy-boto3-inspector2
Version: 1.20.49
Summary: Type annotations for boto3.Inspector2 1.20.49 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 inspector2 type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="mypy-boto3-inspector2"></a>

# mypy-boto3-inspector2

[![PyPI - mypy-boto3-inspector2](https://img.shields.io/pypi/v/mypy-boto3-inspector2.svg?color=blue)](https://pypi.org/project/mypy-boto3-inspector2)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-inspector2.svg?color=blue)](https://pypi.org/project/mypy-boto3-inspector2)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/mypy-boto3-inspector2?color=blue)](https://pypistats.org/packages/mypy-boto3-inspector2)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.Inspector2 1.20.49](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/inspector2.html#Inspector2)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[mypy-boto3-inspector2 docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_inspector2/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-inspector2](#mypy-boto3-inspector2)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `Inspector2`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `boto3-stubs` for `Inspector2` service.

```bash
# install with boto3 type annotations
python -m pip install 'boto3-stubs[inspector2]'

# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'boto3-stubs-lite[inspector2]'

# standalone installation
python -m pip install mypy-boto3-inspector2
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `boto3-stubs[inspector2]` in your environment:
  `python -m pip install 'boto3-stubs[inspector2]'`

Both type checking and auto-complete should work for `Inspector2` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `boto3-stubs[inspector2]` in your environment:
  `python -m pip install 'boto3-stubs[inspector2]'`

Both type checking and auto-complete should work for `Inspector2` service. No
explicit type annotations required, write your `boto3` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`boto3-stubs` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `boto3-stubs[inspector2]` in your environment:
  `python -m pip install 'boto3-stubs[inspector2]'`
- Run `mypy` as usual

Type checking should work for `Inspector2` service. No explicit type
annotations required, write your `boto3` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `boto3-stubs[inspector2]` in your environment:
  `python -m pip install 'boto3-stubs[inspector2]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `Inspector2` service. No explicit type
annotations required, write your `boto3` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`Inspector2Client` provides annotations for `boto3.client("inspector2")`.

```python
from boto3.session import Session

from mypy_boto3_inspector2 import Inspector2Client

client: Inspector2Client = Session().client("inspector2")

# now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`mypy_boto3_inspector2.paginator` module contains type annotations for all
paginators.

```python
from boto3.session import Session

from mypy_boto3_inspector2 import Inspector2Client
from mypy_boto3_inspector2.paginator import (
    ListAccountPermissionsPaginator,
    ListCoveragePaginator,
    ListCoverageStatisticsPaginator,
    ListDelegatedAdminAccountsPaginator,
    ListFiltersPaginator,
    ListFindingAggregationsPaginator,
    ListFindingsPaginator,
    ListMembersPaginator,
    ListUsageTotalsPaginator,
)

client: Inspector2Client = Session().client("inspector2")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
list_account_permissions_paginator: ListAccountPermissionsPaginator = client.get_paginator("list_account_permissions")
list_coverage_paginator: ListCoveragePaginator = client.get_paginator("list_coverage")
list_coverage_statistics_paginator: ListCoverageStatisticsPaginator = client.get_paginator("list_coverage_statistics")
list_delegated_admin_accounts_paginator: ListDelegatedAdminAccountsPaginator = client.get_paginator("list_delegated_admin_accounts")
list_filters_paginator: ListFiltersPaginator = client.get_paginator("list_filters")
list_finding_aggregations_paginator: ListFindingAggregationsPaginator = client.get_paginator("list_finding_aggregations")
list_findings_paginator: ListFindingsPaginator = client.get_paginator("list_findings")
list_members_paginator: ListMembersPaginator = client.get_paginator("list_members")
list_usage_totals_paginator: ListUsageTotalsPaginator = client.get_paginator("list_usage_totals")
```

<a id="literals"></a>

### Literals

`mypy_boto3_inspector2.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from mypy_boto3_inspector2.literals import (
    AccountSortByType,
    AggregationFindingTypeType,
    AggregationResourceTypeType,
    AggregationTypeType,
    AmiSortByType,
    AwsEcrContainerSortByType,
    CoverageMapComparisonType,
    CoverageResourceTypeType,
    CoverageStringComparisonType,
    CurrencyType,
    DelegatedAdminStatusType,
    Ec2InstanceSortByType,
    Ec2PlatformType,
    EcrScanFrequencyType,
    ErrorCodeType,
    ExternalReportStatusType,
    FilterActionType,
    FindingStatusType,
    FindingTypeSortByType,
    FindingTypeType,
    FreeTrialInfoErrorCodeType,
    FreeTrialStatusType,
    FreeTrialTypeType,
    GroupKeyType,
    ImageLayerSortByType,
    ListAccountPermissionsPaginatorName,
    ListCoveragePaginatorName,
    ListCoverageStatisticsPaginatorName,
    ListDelegatedAdminAccountsPaginatorName,
    ListFiltersPaginatorName,
    ListFindingAggregationsPaginatorName,
    ListFindingsPaginatorName,
    ListMembersPaginatorName,
    ListUsageTotalsPaginatorName,
    MapComparisonType,
    NetworkProtocolType,
    OperationType,
    PackageManagerType,
    PackageSortByType,
    RelationshipStatusType,
    ReportFormatType,
    ReportingErrorCodeType,
    RepositorySortByType,
    ResourceScanTypeType,
    ResourceTypeType,
    ScanStatusCodeType,
    ScanStatusReasonType,
    ScanTypeType,
    ServiceType,
    SeverityType,
    SortFieldType,
    SortOrderType,
    StatusType,
    StringComparisonType,
    TitleSortByType,
    UsageTypeType,
    ServiceName,
    PaginatorName,
)

def check_value(value: AccountSortByType) -> bool:
    ...
```

<a id="typed-dictionaries"></a>

### Typed dictionaries

`mypy_boto3_inspector2.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from mypy_boto3_inspector2.type_defs import (
    AccountAggregationResponseTypeDef,
    AccountAggregationTypeDef,
    AccountStateTypeDef,
    AccountTypeDef,
    AggregationRequestTypeDef,
    AggregationResponseTypeDef,
    AmiAggregationResponseTypeDef,
    AmiAggregationTypeDef,
    AssociateMemberRequestRequestTypeDef,
    AssociateMemberResponseTypeDef,
    AutoEnableTypeDef,
    AwsEc2InstanceDetailsTypeDef,
    AwsEcrContainerAggregationResponseTypeDef,
    AwsEcrContainerAggregationTypeDef,
    AwsEcrContainerImageDetailsTypeDef,
    BatchGetAccountStatusRequestRequestTypeDef,
    BatchGetAccountStatusResponseTypeDef,
    BatchGetFreeTrialInfoRequestRequestTypeDef,
    BatchGetFreeTrialInfoResponseTypeDef,
    CancelFindingsReportRequestRequestTypeDef,
    CancelFindingsReportResponseTypeDef,
    CountsTypeDef,
    CoverageFilterCriteriaTypeDef,
    CoverageMapFilterTypeDef,
    CoverageStringFilterTypeDef,
    CoveredResourceTypeDef,
    CreateFilterRequestRequestTypeDef,
    CreateFilterResponseTypeDef,
    CreateFindingsReportRequestRequestTypeDef,
    CreateFindingsReportResponseTypeDef,
    CvssScoreAdjustmentTypeDef,
    CvssScoreDetailsTypeDef,
    CvssScoreTypeDef,
    DateFilterTypeDef,
    DelegatedAdminAccountTypeDef,
    DelegatedAdminTypeDef,
    DeleteFilterRequestRequestTypeDef,
    DeleteFilterResponseTypeDef,
    DescribeOrganizationConfigurationResponseTypeDef,
    DestinationTypeDef,
    DisableDelegatedAdminAccountRequestRequestTypeDef,
    DisableDelegatedAdminAccountResponseTypeDef,
    DisableRequestRequestTypeDef,
    DisableResponseTypeDef,
    DisassociateMemberRequestRequestTypeDef,
    DisassociateMemberResponseTypeDef,
    Ec2InstanceAggregationResponseTypeDef,
    Ec2InstanceAggregationTypeDef,
    Ec2MetadataTypeDef,
    EcrContainerImageMetadataTypeDef,
    EcrRepositoryMetadataTypeDef,
    EnableDelegatedAdminAccountRequestRequestTypeDef,
    EnableDelegatedAdminAccountResponseTypeDef,
    EnableRequestRequestTypeDef,
    EnableResponseTypeDef,
    FailedAccountTypeDef,
    FilterCriteriaTypeDef,
    FilterTypeDef,
    FindingTypeAggregationResponseTypeDef,
    FindingTypeAggregationTypeDef,
    FindingTypeDef,
    FreeTrialAccountInfoTypeDef,
    FreeTrialInfoErrorTypeDef,
    FreeTrialInfoTypeDef,
    GetDelegatedAdminAccountResponseTypeDef,
    GetFindingsReportStatusRequestRequestTypeDef,
    GetFindingsReportStatusResponseTypeDef,
    GetMemberRequestRequestTypeDef,
    GetMemberResponseTypeDef,
    ImageLayerAggregationResponseTypeDef,
    ImageLayerAggregationTypeDef,
    InspectorScoreDetailsTypeDef,
    ListAccountPermissionsRequestRequestTypeDef,
    ListAccountPermissionsResponseTypeDef,
    ListCoverageRequestRequestTypeDef,
    ListCoverageResponseTypeDef,
    ListCoverageStatisticsRequestRequestTypeDef,
    ListCoverageStatisticsResponseTypeDef,
    ListDelegatedAdminAccountsRequestRequestTypeDef,
    ListDelegatedAdminAccountsResponseTypeDef,
    ListFiltersRequestRequestTypeDef,
    ListFiltersResponseTypeDef,
    ListFindingAggregationsRequestRequestTypeDef,
    ListFindingAggregationsResponseTypeDef,
    ListFindingsRequestRequestTypeDef,
    ListFindingsResponseTypeDef,
    ListMembersRequestRequestTypeDef,
    ListMembersResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    ListUsageTotalsRequestRequestTypeDef,
    ListUsageTotalsResponseTypeDef,
    MapFilterTypeDef,
    MemberTypeDef,
    NetworkPathTypeDef,
    NetworkReachabilityDetailsTypeDef,
    NumberFilterTypeDef,
    PackageAggregationResponseTypeDef,
    PackageAggregationTypeDef,
    PackageFilterTypeDef,
    PackageVulnerabilityDetailsTypeDef,
    PaginatorConfigTypeDef,
    PermissionTypeDef,
    PortRangeFilterTypeDef,
    PortRangeTypeDef,
    RecommendationTypeDef,
    RemediationTypeDef,
    RepositoryAggregationResponseTypeDef,
    RepositoryAggregationTypeDef,
    ResourceDetailsTypeDef,
    ResourceScanMetadataTypeDef,
    ResourceStateTypeDef,
    ResourceStatusTypeDef,
    ResourceTypeDef,
    ResponseMetadataTypeDef,
    ScanStatusTypeDef,
    SeverityCountsTypeDef,
    SortCriteriaTypeDef,
    StateTypeDef,
    StepTypeDef,
    StringFilterTypeDef,
    TagResourceRequestRequestTypeDef,
    TitleAggregationResponseTypeDef,
    TitleAggregationTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateFilterRequestRequestTypeDef,
    UpdateFilterResponseTypeDef,
    UpdateOrganizationConfigurationRequestRequestTypeDef,
    UpdateOrganizationConfigurationResponseTypeDef,
    UsageTotalTypeDef,
    UsageTypeDef,
    VulnerablePackageTypeDef,
)

def get_structure() -> AccountAggregationResponseTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`mypy-boto3-inspector2` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[mypy-boto3-inspector2 docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_inspector2/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


