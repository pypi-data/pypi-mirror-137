Metadata-Version: 2.1
Name: types-aiobotocore-wafv2
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.WAFV2 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore wafv2 type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="mypy-boto3-wafv2"></a>

# mypy-boto3-wafv2

[![PyPI - types-aiobotocore-wafv2](https://img.shields.io/pypi/v/types-aiobotocore-wafv2.svg?color=blue)](https://pypi.org/project/types-aiobotocore-wafv2)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-wafv2.svg?color=blue)](https://pypi.org/project/types-aiobotocore-wafv2)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-wafv2?color=blue)](https://pypistats.org/packages/types-aiobotocore-wafv2)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.WAFV2 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/wafv2.html#WAFV2)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-wafv2 docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_wafv2/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-wafv2](#mypy-boto3-wafv2)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `WAFV2`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `WAFV2` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[wafv2]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[wafv2]'

# standalone installation
python -m pip install types-aiobotocore-wafv2
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[wafv2]` in your environment:
  `python -m pip install 'types-aiobotocore[wafv2]'`

Both type checking and auto-complete should work for `WAFV2` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[wafv2]` in your environment:
  `python -m pip install 'types-aiobotocore[wafv2]'`

Both type checking and auto-complete should work for `WAFV2` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[wafv2]` in your environment:
  `python -m pip install 'types-aiobotocore[wafv2]'`
- Run `mypy` as usual

Type checking should work for `WAFV2` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[wafv2]` in your environment:
  `python -m pip install 'types-aiobotocore[wafv2]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `WAFV2` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`WAFV2Client` provides annotations for `session.create_client("wafv2")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_wafv2 import WAFV2Client

session = get_session()
async with session.create_client("wafv2") as client:
    client: WAFV2Client
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="literals"></a>

### Literals

`types_aiobotocore_wafv2.literals` module contains literals extracted from
shapes that can be used in user code for type checking.

```python
from types_aiobotocore_wafv2.literals import (
    ActionValueType,
    BodyParsingFallbackBehaviorType,
    ComparisonOperatorType,
    CountryCodeType,
    FailureReasonType,
    FallbackBehaviorType,
    FilterBehaviorType,
    FilterRequirementType,
    ForwardedIPPositionType,
    IPAddressVersionType,
    JsonMatchScopeType,
    LabelMatchScopeType,
    PositionalConstraintType,
    RateBasedStatementAggregateKeyTypeType,
    ResourceTypeType,
    ResponseContentTypeType,
    ScopeType,
    TextTransformationTypeType,
    ServiceName,
)

def check_value(value: ActionValueType) -> bool:
    ...
```

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_wafv2.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_wafv2.type_defs import (
    ActionConditionTypeDef,
    AllowActionTypeDef,
    AndStatementTypeDef,
    AssociateWebACLRequestRequestTypeDef,
    BlockActionTypeDef,
    ByteMatchStatementTypeDef,
    CaptchaActionTypeDef,
    CaptchaConfigTypeDef,
    CaptchaResponseTypeDef,
    CheckCapacityRequestRequestTypeDef,
    CheckCapacityResponseTypeDef,
    ConditionTypeDef,
    CountActionTypeDef,
    CreateIPSetRequestRequestTypeDef,
    CreateIPSetResponseTypeDef,
    CreateRegexPatternSetRequestRequestTypeDef,
    CreateRegexPatternSetResponseTypeDef,
    CreateRuleGroupRequestRequestTypeDef,
    CreateRuleGroupResponseTypeDef,
    CreateWebACLRequestRequestTypeDef,
    CreateWebACLResponseTypeDef,
    CustomHTTPHeaderTypeDef,
    CustomRequestHandlingTypeDef,
    CustomResponseBodyTypeDef,
    CustomResponseTypeDef,
    DefaultActionTypeDef,
    DeleteFirewallManagerRuleGroupsRequestRequestTypeDef,
    DeleteFirewallManagerRuleGroupsResponseTypeDef,
    DeleteIPSetRequestRequestTypeDef,
    DeleteLoggingConfigurationRequestRequestTypeDef,
    DeletePermissionPolicyRequestRequestTypeDef,
    DeleteRegexPatternSetRequestRequestTypeDef,
    DeleteRuleGroupRequestRequestTypeDef,
    DeleteWebACLRequestRequestTypeDef,
    DescribeManagedRuleGroupRequestRequestTypeDef,
    DescribeManagedRuleGroupResponseTypeDef,
    DisassociateWebACLRequestRequestTypeDef,
    ExcludedRuleTypeDef,
    FieldToMatchTypeDef,
    FilterTypeDef,
    FirewallManagerRuleGroupTypeDef,
    FirewallManagerStatementTypeDef,
    ForwardedIPConfigTypeDef,
    GeoMatchStatementTypeDef,
    GetIPSetRequestRequestTypeDef,
    GetIPSetResponseTypeDef,
    GetLoggingConfigurationRequestRequestTypeDef,
    GetLoggingConfigurationResponseTypeDef,
    GetManagedRuleSetRequestRequestTypeDef,
    GetManagedRuleSetResponseTypeDef,
    GetPermissionPolicyRequestRequestTypeDef,
    GetPermissionPolicyResponseTypeDef,
    GetRateBasedStatementManagedKeysRequestRequestTypeDef,
    GetRateBasedStatementManagedKeysResponseTypeDef,
    GetRegexPatternSetRequestRequestTypeDef,
    GetRegexPatternSetResponseTypeDef,
    GetRuleGroupRequestRequestTypeDef,
    GetRuleGroupResponseTypeDef,
    GetSampledRequestsRequestRequestTypeDef,
    GetSampledRequestsResponseTypeDef,
    GetWebACLForResourceRequestRequestTypeDef,
    GetWebACLForResourceResponseTypeDef,
    GetWebACLRequestRequestTypeDef,
    GetWebACLResponseTypeDef,
    HTTPHeaderTypeDef,
    HTTPRequestTypeDef,
    IPSetForwardedIPConfigTypeDef,
    IPSetReferenceStatementTypeDef,
    IPSetSummaryTypeDef,
    IPSetTypeDef,
    ImmunityTimePropertyTypeDef,
    JsonBodyTypeDef,
    JsonMatchPatternTypeDef,
    LabelMatchStatementTypeDef,
    LabelNameConditionTypeDef,
    LabelSummaryTypeDef,
    LabelTypeDef,
    ListAvailableManagedRuleGroupVersionsRequestRequestTypeDef,
    ListAvailableManagedRuleGroupVersionsResponseTypeDef,
    ListAvailableManagedRuleGroupsRequestRequestTypeDef,
    ListAvailableManagedRuleGroupsResponseTypeDef,
    ListIPSetsRequestRequestTypeDef,
    ListIPSetsResponseTypeDef,
    ListLoggingConfigurationsRequestRequestTypeDef,
    ListLoggingConfigurationsResponseTypeDef,
    ListManagedRuleSetsRequestRequestTypeDef,
    ListManagedRuleSetsResponseTypeDef,
    ListRegexPatternSetsRequestRequestTypeDef,
    ListRegexPatternSetsResponseTypeDef,
    ListResourcesForWebACLRequestRequestTypeDef,
    ListResourcesForWebACLResponseTypeDef,
    ListRuleGroupsRequestRequestTypeDef,
    ListRuleGroupsResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    ListWebACLsRequestRequestTypeDef,
    ListWebACLsResponseTypeDef,
    LoggingConfigurationTypeDef,
    LoggingFilterTypeDef,
    ManagedRuleGroupStatementTypeDef,
    ManagedRuleGroupSummaryTypeDef,
    ManagedRuleGroupVersionTypeDef,
    ManagedRuleSetSummaryTypeDef,
    ManagedRuleSetTypeDef,
    ManagedRuleSetVersionTypeDef,
    NotStatementTypeDef,
    OrStatementTypeDef,
    OverrideActionTypeDef,
    PutLoggingConfigurationRequestRequestTypeDef,
    PutLoggingConfigurationResponseTypeDef,
    PutManagedRuleSetVersionsRequestRequestTypeDef,
    PutManagedRuleSetVersionsResponseTypeDef,
    PutPermissionPolicyRequestRequestTypeDef,
    RateBasedStatementManagedKeysIPSetTypeDef,
    RateBasedStatementTypeDef,
    RegexMatchStatementTypeDef,
    RegexPatternSetReferenceStatementTypeDef,
    RegexPatternSetSummaryTypeDef,
    RegexPatternSetTypeDef,
    RegexTypeDef,
    ResponseMetadataTypeDef,
    RuleActionTypeDef,
    RuleGroupReferenceStatementTypeDef,
    RuleGroupSummaryTypeDef,
    RuleGroupTypeDef,
    RuleSummaryTypeDef,
    RuleTypeDef,
    SampledHTTPRequestTypeDef,
    SingleHeaderTypeDef,
    SingleQueryArgumentTypeDef,
    SizeConstraintStatementTypeDef,
    SqliMatchStatementTypeDef,
    StatementTypeDef,
    TagInfoForResourceTypeDef,
    TagResourceRequestRequestTypeDef,
    TagTypeDef,
    TextTransformationTypeDef,
    TimeWindowTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateIPSetRequestRequestTypeDef,
    UpdateIPSetResponseTypeDef,
    UpdateManagedRuleSetVersionExpiryDateRequestRequestTypeDef,
    UpdateManagedRuleSetVersionExpiryDateResponseTypeDef,
    UpdateRegexPatternSetRequestRequestTypeDef,
    UpdateRegexPatternSetResponseTypeDef,
    UpdateRuleGroupRequestRequestTypeDef,
    UpdateRuleGroupResponseTypeDef,
    UpdateWebACLRequestRequestTypeDef,
    UpdateWebACLResponseTypeDef,
    VersionToPublishTypeDef,
    VisibilityConfigTypeDef,
    WebACLSummaryTypeDef,
    WebACLTypeDef,
    XssMatchStatementTypeDef,
)

def get_structure() -> ActionConditionTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`types-aiobotocore-wafv2` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[types-aiobotocore-wafv2 docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_wafv2/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


