Metadata-Version: 2.1
Name: types-aiobotocore-polly
Version: 2.1.0
Summary: Type annotations for aiobotocore.Polly 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore polly type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="mypy-boto3-polly"></a>

# mypy-boto3-polly

[![PyPI - types-aiobotocore-polly](https://img.shields.io/pypi/v/types-aiobotocore-polly.svg?color=blue)](https://pypi.org/project/types-aiobotocore-polly)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-polly.svg?color=blue)](https://pypi.org/project/types-aiobotocore-polly)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-polly?color=blue)](https://pypistats.org/packages/types-aiobotocore-polly)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.Polly 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/polly.html#Polly)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-polly docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_polly/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-polly](#mypy-boto3-polly)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `Polly`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `Polly` service.

```bash
python -m pip install types-aiobotocore[polly]
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[polly]` in your environment:
  `python -m pip install 'types-aiobotocore[polly]'`

Both type checking and auto-complete should work for `Polly` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[polly]` in your environment:
  `python -m pip install 'types-aiobotocore[polly]'`

Both type checking and auto-complete should work for `Polly` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[polly]` in your environment:
  `python -m pip install 'types-aiobotocore[polly]'`
- Run `mypy` as usual

Type checking should work for `Polly` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[polly]` in your environment:
  `python -m pip install 'types-aiobotocore[polly]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `Polly` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`PollyClient` provides annotations for `session.create_client("polly")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_polly import PollyClient

session = get_session()
with async session.create_client("polly") as client:
    client: PollyClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_polly.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_polly import PollyClient
from types_aiobotocore_polly.paginator import (
    DescribeVoicesPaginator,
    ListLexiconsPaginator,
    ListSpeechSynthesisTasksPaginator,
)

session = get_session()
with async session.create_client("polly") as client:
    client: PollyClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        describe_voices_paginator: DescribeVoicesPaginator = client.get_paginator("describe_voices")
        list_lexicons_paginator: ListLexiconsPaginator = client.get_paginator("list_lexicons")
        list_speech_synthesis_tasks_paginator: ListSpeechSynthesisTasksPaginator = client.get_paginator("list_speech_synthesis_tasks")
    ```







### Literals

`types_aiobotocore_polly.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_polly.literals import (
    DescribeVoicesPaginatorName,
    EngineType,
    GenderType,
    LanguageCodeType,
    ListLexiconsPaginatorName,
    ListSpeechSynthesisTasksPaginatorName,
    OutputFormatType,
    SpeechMarkTypeType,
    TaskStatusType,
    TextTypeType,
    VoiceIdType,
    ServiceName,
    PaginatorName,
)

def check_value(value: DescribeVoicesPaginatorName) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_polly.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_polly.type_defs import (
    DeleteLexiconInputRequestTypeDef,
    DescribeVoicesInputRequestTypeDef,
    DescribeVoicesOutputTypeDef,
    GetLexiconInputRequestTypeDef,
    GetLexiconOutputTypeDef,
    GetSpeechSynthesisTaskInputRequestTypeDef,
    GetSpeechSynthesisTaskOutputTypeDef,
    LexiconAttributesTypeDef,
    LexiconDescriptionTypeDef,
    LexiconTypeDef,
    ListLexiconsInputRequestTypeDef,
    ListLexiconsOutputTypeDef,
    ListSpeechSynthesisTasksInputRequestTypeDef,
    ListSpeechSynthesisTasksOutputTypeDef,
    PaginatorConfigTypeDef,
    PutLexiconInputRequestTypeDef,
    ResponseMetadataTypeDef,
    StartSpeechSynthesisTaskInputRequestTypeDef,
    StartSpeechSynthesisTaskOutputTypeDef,
    SynthesisTaskTypeDef,
    SynthesizeSpeechInputRequestTypeDef,
    SynthesizeSpeechOutputTypeDef,
    VoiceTypeDef,
)

def get_structure() -> DeleteLexiconInputRequestTypeDef:
    return {
      ...
    }
```

## Versioning

`types-aiobotocore-polly` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in
[types-aiobotocore-polly docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_polly/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


