# {{ service_name.pypi_name }}

[![PyPI - {{ package.pypi_name }}](https://img.shields.io/pypi/v/{{ package.pypi_name }}.svg?color=blue)](https://pypi.org/project/{{ package.pypi_name }})
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/{{ package.pypi_name }}.svg?color=blue)](https://pypi.org/project/{{ package.pypi_name }})
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/{{ package.pypi_name }}?color=blue)](https://pypistats.org/packages/{{ package.pypi_name }})

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.{{ service_name.class_name }} {{ boto3_version }}]({{ service_name.boto3_doc_link }}) service
compatible with
[VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright)
and other tools.

Generated by [mypy-boto3-builder {{ builder_version }}](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[{{ package.pypi_name }} docs]({{ package.get_local_doc_link() }})

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

## How to install

### VSCode extension

Add [AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `{{ service_name.class_name }}`.

### From PyPI with pip

Install `{{ package.docs_package_name }}` for `{{ service_name.class_name }}` service.

```bash
# install with boto3 type annotations
python -m pip install 'boto3-stubs[{{ package.service_name.extras_name }}]'

# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'boto3-stubs-lite[{{ package.service_name.extras_name }}]'

# standalone installation
python -m pip install {{ package.pypi_name }}
```

{% if service_name.is_conda_forge_available() %}
### From conda-forge

Installing `{{ service_name.pypi_name }}` from the `conda-forge` channel can be achieved by adding `conda-forge` to your channels with:

```bash
conda config --add channels conda-forge
conda config --set channel_priority strict
```

Once the `conda-forge` channel has been enabled, `{{ service_name.pypi_name }}` can be installed with:

```bash
conda install {{ service_name.pypi_name }}
```

It is possible to list all of the versions of `{{ service_name.pypi_name }}` available on your platform with:

```bash
conda search {{ service_name.pypi_name }} --channel conda-forge
```
{% endif %}

## Usage

### VSCode

- Install [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `{{ package.docs_package_name }}[{{service_name.extras_name}}]` in your environment: `python -m pip install '{{ package.docs_package_name }}[{{service_name.extras_name}}]'`

Both type checking and auto-complete should work for `{{ service_name.class_name }}` service.
No explicit type annotations required, write your `boto3` code as usual.

### PyCharm

- Install `{{ package.docs_package_name }}[{{service_name.extras_name}}]` in your environment: `python -m pip install '{{ package.docs_package_name }}[{{service_name.extras_name}}]'`

Both type checking and auto-complete should work for `{{ service_name.class_name }}` service.
No explicit type annotations required, write your `{{ package.library_name }}` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed `{{ package.docs_package_name }}` submodules.

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything should work.

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `{{ package.docs_package_name }}[{{service_name.extras_name}}]` in your environment: `python -m pip install '{{ package.docs_package_name }}[{{service_name.extras_name}}]'`
- Run `mypy` as usual

Type checking should work for `{{ service_name.class_name }}` service.
No explicit type annotations required, write your `{{ package.library_name }}` code as usual.

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `{{ package.docs_package_name }}[{{service_name.extras_name}}]` in your environment: `python -m pip install '{{ package.docs_package_name }}[{{service_name.extras_name}}]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `{{ service_name.class_name }}` service.
No explicit type annotations required, write your `{{ package.library_name }}` code as usual.

## Explicit type annotations

### Client annotations

`{{ package.client.name }}` provides annotations for `{{ package.library_name }}.client("{{ service_name.boto3_name }}")`.

```python
from {{ package.library_name }}.session import Session

from {{ package.name }} import {{ package.client.name }}

client: {{ package.client.name }} = Session().client("{{ service_name.boto3_name }}")

# now client usage is checked by mypy and IDE should provide code auto-complete
```

{% if package.paginators -%}
### Paginators annotations

`{{ package.name }}.paginator` module contains type annotations for all paginators.

```python
from {{ package.library_name }}.session import Session

from {{ package.name }} import {{ package.client.name }}
from {{ package.name }}.paginator import (
{% for paginator in package.paginators %}    {{ paginator.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

client: {{ package.client.name }} = Session().client("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
{% for paginator in package.paginators -%}
{{ paginator.operation_name }}_paginator: {{ paginator.name }} = client.get_paginator("{{ paginator.operation_name }}")
{% endfor -%}
```
{% endif %}

{% if package.waiters -%}
### Waiters annotations

`{{ package.name }}.waiter` module contains type annotations for all waiters.

```python
from {{ package.library_name }}.session import Session

from {{ package.name }} import {{ package.client.name }}
from {{ package.name }}.waiter import (
{% for waiter in package.waiters %}    {{ waiter.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

client: {{ package.client.name }} = Session().client("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
{% for waiter in package.waiters -%}
{{ waiter.waiter_name }}_waiter: {{ waiter.name }} = client.get_waiter("{{ waiter.waiter_name }}")
{% endfor -%}
```
{% endif %}

{% if package.service_resource -%}
### Service Resource annotations

`{{ package.service_resource.name }}` provides annotations for `{{ package.library_name }}.resource("{{ service_name.boto3_name }}")`.

```python
from {{ package.library_name }}.session import Session

from {{ package.name }} import {{ package.service_resource.name }}

resource: {{ package.service_resource.name }} = Session().resource("{{ service_name.boto3_name }}")

# now resource usage is checked by mypy and IDE should provide code auto-complete
```

{% if package.service_resource.sub_resources %}
### Other resources annotations

`{{ package.name }}.service_resource` module contains type annotations for all resources.

```python
from {{ package.library_name }}.session import Session

from {{ package.name }} import {{ package.service_resource.name }}
from {{ package.name }}.service_resource import (
{% for sub_resource in package.service_resource.sub_resources %}    {{ sub_resource.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

resource: {{ package.service_resource.name }} = Session().resource("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
{% for sub_resource in package.service_resource.sub_resources -%}
my_{{ sub_resource.variable_name }}: {{ sub_resource.name }} = resource.{{ sub_resource.name }}(...)
{% endfor -%}
```
{% endif %}

{% if package.service_resource.collections %}
### Collections annotations

`{{ package.name }}.service_resource` module contains type annotations
for all `{{ package.service_resource.name }}` collections.

```python
from {{ package.library_name }}.session import Session

from {{ package.name }} import {{ package.service_resource.name }}
from {{ package.name }}.service_resource import (
{% for collection in package.service_resource.collections %}    {{ collection.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

resource: {{ package.service_resource.name }} = Session().resource("{{ service_name.boto3_name }}")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
{% for collection in package.service_resource.collections -%}
{{ collection.attribute_name }}: {{ service_name.underscore_name }}_resources.{{ collection.name }} = resource.{{ collection.attribute_name }}
{% endfor -%}
```
{% endif %}
{% endif %}

{% if package.literals %}
### Literals

`{{ package.name }}.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from {{ package.name }}.literals import (
{% for literal in package.literals %}    {{ literal.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

def check_value(value: {{ package.literals[0].name }}) -> bool:
    ...
```
{% endif %}

{% if package.typed_dicts %}
### Typed dictionaries

`{{ package.name }}.type_defs` module contains structures and shapes assembled
to typed dictionaries for additional type checking.

```python
from {{ package.name }}.type_defs import (
{% for typed_dict in package.typed_dicts %}    {{ typed_dict.name }},{{ '' if loop.last else '\n' }}{% endfor %}
)

def get_structure() -> {{ package.typed_dicts[0].name }}:
    return {
      ...
    }
```
{% endif %}


## Versioning

`{{ package.pypi_name }}` version is the same as related `boto3` version and follows
[PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Documentation

All type annotations can be found in [{{ package.pypi_name }} docs]({{ package.get_local_doc_link() }})

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features in
[mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/) repository.
