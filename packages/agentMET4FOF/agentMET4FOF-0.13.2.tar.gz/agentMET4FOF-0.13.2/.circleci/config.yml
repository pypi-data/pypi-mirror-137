# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  tester:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
  publisher:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
  builder:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
  image_dealer:
    working_directory: ~/repo
    docker:
      - image: circleci/buildpack-deps:focal
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

workflows:
  test_and_deploy:
    jobs:
      - test_against_venv:
          context:
            - Docker pulls
      - test_against_conda:
          context:
            - Docker pulls
      - test_against_setup:
          context:
            - Docker pulls
      - preview_release:
          context:
            - Docker pulls
          requires:
            - test_against_venv
            - test_against_conda
            - test_against_setup
      - confirm_previewed_release_actions:
          type: approval
          requires:
            - preview_release
            - test_image
          filters:
            branches:
              only: /develop/
      - release:
          context:
            - Docker pulls
            - pypi.org publishing for agentMET4FOF
            - GitHub pushes to BjoernLudwigPTB's public_repos
          requires:
            - confirm_previewed_release_actions
      - build_image:
          context:
            - Docker pulls
            - Docker publishing for agents
          filters:
            tags:
              only: /^v([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$/
      - test_image:
          context:
            - Docker pulls
            - Docker publishing for agents
          requires:
            - build_image
          filters:
            tags:
              only: /^v([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$/
      - retag_and_deploy_image:
          context:
            - Docker pulls
            - Docker publishing for agents
          requires:
            - test_image
          filters:
            tags:
              only: /^v([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$/
            branches:
              ignore: /.*/

commands:
  create_result_folder:
    description: "Create test-result folder"
    steps:
      - run:
          name: Create test result folder
          command: |
            mkdir -p test-results

  run_venv_tests:
    description: "Run and store test results"
    parameters:
      send_cov:
        type: boolean
        default: false
    steps:
      - run:
          name: Run tests
          command: |
            tox | tee --append test-results/agentMET4FOF.log
      - when:
          condition: << parameters.send_cov >>
          steps:
            - run:
                name: Upload coverage report
                command: |
                  curl -s https://codecov.io/bash > codecov;
                  VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
                  for i in 1 256 512
                  do
                    shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM") ||
                    shasum -a $i -c <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM")
                  done
                  chmod u+x codecov
                  ./codecov
      - store_test_artifacts_and_results

  store_test_artifacts_and_results:
    description: "Store test results"
    steps:
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  install_all_deps:
    description: "Install dependencies"
    steps:
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt -r dev-requirements.txt

jobs:
  test_against_conda:
    executor: tester
    steps:
      - checkout
      - create_result_folder
      - run:
          name: Install Miniconda
          command: |
            wget "https://repo.anaconda.com/miniconda/\
            Miniconda3-latest-Linux-x86_64.sh" -O $HOME/miniconda.sh
            mkdir -p $HOME/.conda
            bash $HOME/miniconda.sh -b -p /home/circleci/conda
            source $HOME/conda/etc/profile.d/conda.sh
            hash -r
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda
            echo 'export PATH=$HOME/conda/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          keys:
            - v2-conda-dependencies-{{ checksum "environment.yml" }}-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
            - v2-conda-dependencies-
      - run:
          name: Create or update environment
          command: |
            if [ -d "$HOME/conda/envs/" ]; then
                conda env update --prune --file environment.yml
            else
                conda env create -f environment.yml
            fi
            source $HOME/conda/etc/profile.d/conda.sh
            conda activate agentMET4FOF
      - save_cache:
          paths:
            - /home/circleci/conda/envs/
          key: >-
            v2-conda-dependencies-{{ checksum "environment.yml" }}-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
      - run:
          name: Run tests
          command: |
            source $HOME/conda/etc/profile.d/conda.sh
            conda activate agentMET4FOF
            pytest -v --cov=. --junitxml=test-results/junit.xml . \
              | tee --append test-results/agentMET4FOF.log
      - store_test_artifacts_and_results

  test_against_setup:
    executor: tester
    steps:
      - checkout
      - create_result_folder
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade tox
      - run_venv_tests:
          send_cov: true

  test_against_venv:
    executor: tester
    steps:
      - checkout
      - create_result_folder
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip tox
            pip install -r requirements.txt
      - run_venv_tests

  preview_release:
    executor:
      name: publisher
    steps:
      - checkout
      - install_all_deps
      - run:
          name: Preview python-semantic-release actions
          command: |
            unset CIRCLE_PULL_REQUEST CIRCLE_PULL_REQUESTS CI_PULL_REQUEST \
              CI_PULL_REQUESTS
            export CIRCLE_BRANCH=develop
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            echo "
            The changelog of the next release will contain:
            "
            semantic-release --unreleased changelog
            echo "
            -----------------------------------------------------------

            python-semantic-release would perform the following actions:
            "
            semantic-release --noop publish

  release:
    executor:
      name: publisher
    steps:
      - add_ssh_keys:
          fingerprints:
            - "93:e5:20:36:94:74:6f:e2:33:f6:91:07:4c:b4:89:1a"
      - checkout
      - install_all_deps
      - run:
          name: Run semantic-release publish
          command: |
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            semantic-release publish

  build_image:
    executor: builder
    working_directory: ~/repo
    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: Install repo2docker
          command: |
            pip install chardet jupyter-repo2docker

      - run:
          name: Build image
          command: |
            jupyter-repo2docker --no-run --image-name ${IMAGE_NAME}:latest .

      - run:
          name: Save Docker image
          command: |
            docker save ${IMAGE_NAME}:latest | \
              gzip > docker_image_agentMET4FOF_jupyter.tar.gz

      - persist_to_workspace:
          root: .
          paths:
            - ./docker_image_agentMET4FOF_jupyter.tar.gz

      - store_artifacts:
          path: ./docker_image_agentMET4FOF_jupyter.tar.gz

  test_image:
    executor: image_dealer
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Retrieve built and stored image for testing
          command: |
            docker load -i /tmp/workspace/docker_image_agentMET4FOF_jupyter.tar.gz

      - run:
          name: Test image's notebook server
          command: |
            docker run --name agents --publish 127.0.0.1:8888:8888 \
              -d --rm ${IMAGE_NAME}:latest
            docker run --network container:agents \
                appropriate/curl --retry 10 --retry-delay 1 \
                --retry-connrefused http://127.0.0.1:8888
            docker stop agents

      - run:
          name: Test image's dashboard
          command: |
            docker run --name agents --publish 127.0.0.1:8050:8050 --rm -d \
              ${IMAGE_NAME}:latest python \
              ${HOME}/agentMET4FOF_tutorials/tutorial_1_generator_agent.py
            docker run --network container:agents \
                appropriate/curl --retry 10 --retry-delay 1 \
                --retry-connrefused http://127.0.0.1:8050 | \
                grep '<script id="_dash-renderer" type="application/javascript">var renderer = new DashRenderer();</script>'
            docker stop agents

      - run:
          name: Test image's dashboard in a subfolder
          command: |
            subfolder_name=dashboard_subfolder
            docker run --name agents --publish 127.0.0.1:8050:8050 --rm -d \
              --env DASH_URL_BASE_PATHNAME=/$subfolder_name/ \
              ${IMAGE_NAME}:latest python \
              ${HOME}/agentMET4FOF_tutorials/tutorial_1_generator_agent.py
            docker run --network container:agents \
                appropriate/curl --retry 10 --retry-delay 1 \
                --retry-connrefused http://127.0.0.1:8050/$subfolder_name/  | \
                grep '{"url_base_pathname":"/dashboard_subfolder/","requests_pathname_prefix":"/dashboard_subfolder/"'

  retag_and_deploy_image:
    executor: image_dealer
    steps:
      - attach_workspace:
          at: /tmp/images

      - setup_remote_docker

      - run:
          name: Retrieve built and tested image
          command: |
            docker load -i /tmp/images/docker_image_agentMET4FOF_jupyter.tar.gz

      - run:
          name: Retag image with corresponding version number and store new archive
          command: |
            version=$(docker run --rm ${IMAGE_NAME}:latest \
              python -c "from agentMET4FOF import __version__;print(__version__)") \
              || true
            if [ $CIRCLE_TAG = v$version ]; then
              docker tag ${IMAGE_NAME} ${ORG_NAME}/${IMAGE_NAME}:$version
              docker tag ${IMAGE_NAME} ${ORG_NAME}/${IMAGE_NAME}:latest
            else
              exit 1
            fi

      - run:
          name: Push image
          command: |
            docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PASSWORD
            docker push $ORG_NAME/$IMAGE_NAME
