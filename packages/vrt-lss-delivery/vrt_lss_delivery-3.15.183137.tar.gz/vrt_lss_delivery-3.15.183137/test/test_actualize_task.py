# coding: utf-8

"""
    Veeroute.Delivery

    Veeroute Delivery API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import vrt_lss_delivery
from vrt_lss_delivery.models.actualize_task import ActualizeTask  # noqa: E501
from vrt_lss_delivery.rest import ApiException

class TestActualizeTask(unittest.TestCase):
    """ActualizeTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ActualizeTask
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = vrt_lss_delivery.models.actualize_task.ActualizeTask()  # noqa: E501
        if include_optional :
            return ActualizeTask(
                warehouses = [
                    vrt_lss_delivery.models.warehouse.Warehouse(
                        key = 'whs0001', 
                        location = vrt_lss_delivery.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        work_windows = [
                            vrt_lss_delivery.models.time_window.TimeWindow(
                                from = '2021-02-21T09:30+03:00', 
                                to = '2021-02-21T19:45Z', )
                            ], )
                    ], 
                orders = [
                    vrt_lss_delivery.models.order.Order(
                        key = 'order0001', 
                        type = 'DROP', 
                        warehouse_keys = [
                            'whs0001'
                            ], 
                        customer = vrt_lss_delivery.models.customer.Customer(
                            location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            time_windows = [
                                vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', )
                                ], ), 
                        cargos = [
                            vrt_lss_delivery.models.cargo.Cargo(
                                key = 'cargo01', 
                                capacity = vrt_lss_delivery.models.capacity.Capacity(
                                    mass = 10, 
                                    volume = 2, 
                                    capacity_x = 1, 
                                    capacity_y = 2, 
                                    capacity_z = 3, ), 
                                rotation = ["ALL"], 
                                width = 1, 
                                height = 0.3, 
                                length = 2.2, 
                                max_storage_time = 60, 
                                restrictions = ["Freezer"], 
                                cargo_features = ["Clean"], 
                                cargo_restrictions = ["Warm"], )
                            ], 
                        warehouse_duration = 10, 
                        customer_duration = 10, 
                        cost = vrt_lss_delivery.models.order_cost.OrderCost(
                            reward = 199.1, 
                            penalty = vrt_lss_delivery.models.cost_penalty.CostPenalty(
                                start_time = '2021-05-21T17:00Z', 
                                period = 60, 
                                value = 1000, 
                                max_value = 10000, ), ), 
                        order_features = ["Special"], 
                        order_restrictions = ["Special"], 
                        performer_restrictions = ["Special"], 
                        performer_blacklist = ["A0"], )
                    ], 
                performers = [
                    vrt_lss_delivery.models.performer.Performer(
                        key = 'performer0001', 
                        count = 15, 
                        box = vrt_lss_delivery.models.box.Box(
                            key = 'box01', 
                            capacity = vrt_lss_delivery.models.capacity.Capacity(
                                mass = 10, 
                                volume = 2, 
                                capacity_x = 1, 
                                capacity_y = 2, 
                                capacity_z = 3, ), 
                            max_size = vrt_lss_delivery.models.capacity.Capacity(
                                mass = 10, 
                                volume = 2, 
                                capacity_x = 1, 
                                capacity_y = 2, 
                                capacity_z = 3, ), 
                            width = 1, 
                            height = 3.1, 
                            length = 2.1, 
                            features = ["Freezer"], ), 
                        start_location = vrt_lss_delivery.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        finish_location = vrt_lss_delivery.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        features = ["B1","Special"], 
                        transport_type = 'CAR', 
                        shifts = [
                            vrt_lss_delivery.models.shift.Shift(
                                availability_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), 
                                working_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), )
                            ], 
                        tariff = vrt_lss_delivery.models.tariff.Tariff(
                            basic = vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                cost_per_shift = 1000, 
                                cost_per_meter = 0.1, 
                                max_length = 200000, 
                                cost_per_minute = 0.2, 
                                max_time = 480, ), 
                            extra = [
                                vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                    cost_per_shift = 1000, 
                                    cost_per_meter = 0.1, 
                                    max_length = 200000, 
                                    cost_per_minute = 0.2, 
                                    max_time = 480, )
                                ], ), )
                    ], 
                trips = [
                    vrt_lss_delivery.models.trip.Trip(
                        key = 'TRIP0001', 
                        trip_time = vrt_lss_delivery.models.time_window.TimeWindow(
                            from = '2021-02-21T09:30+03:00', 
                            to = '2021-02-21T19:45Z', ), 
                        performer_key = 'performer01', 
                        actions = [
                            vrt_lss_delivery.models.trip_action.TripAction(
                                order_key = 'order01', 
                                warehouse_key = 'whs01', 
                                order_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), 
                                location_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), )
                            ], 
                        waitlist = ["order02"], )
                    ], 
                facts = vrt_lss_delivery.models.facts.Facts(
                    order_facts = [
                        vrt_lss_delivery.models.order_fact.OrderFact(
                            type = 'DONE', 
                            time = '2021-05-21T09:30+03:00', 
                            order_key = 'order_01', 
                            job_facts = [
                                vrt_lss_delivery.models.job_fact.JobFact(
                                    time = '2021-05-21T09:30+03:00', 
                                    job_type = 'START_WORK', )
                                ], )
                        ], 
                    performer_facts = [
                        vrt_lss_delivery.models.performer_fact.PerformerFact(
                            time = '2021-05-21T09:30+03:00', 
                            performer_key = 'performer_01', 
                            position = vrt_lss_delivery.models.track_point.TrackPoint(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                time = '2021-05-21T19:45Z', ), )
                        ], ), 
                settings = vrt_lss_delivery.models.actualize_settings.ActualizeSettings(
                    current_time = '2021-05-21T09:30+03:00', 
                    result_timezone = 3, 
                    geo_provider = 'OSRM', 
                    toll_roads = False, 
                    ferry_crossing = False, )
            )
        else :
            return ActualizeTask(
                warehouses = [
                    vrt_lss_delivery.models.warehouse.Warehouse(
                        key = 'whs0001', 
                        location = vrt_lss_delivery.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        work_windows = [
                            vrt_lss_delivery.models.time_window.TimeWindow(
                                from = '2021-02-21T09:30+03:00', 
                                to = '2021-02-21T19:45Z', )
                            ], )
                    ],
                orders = [
                    vrt_lss_delivery.models.order.Order(
                        key = 'order0001', 
                        type = 'DROP', 
                        warehouse_keys = [
                            'whs0001'
                            ], 
                        customer = vrt_lss_delivery.models.customer.Customer(
                            location = vrt_lss_delivery.models.location.Location(
                                latitude = 55.692789, 
                                longitude = 37.554554, 
                                arrival_duration = 15, 
                                departure_duration = 5, ), 
                            time_windows = [
                                vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', )
                                ], ), 
                        cargos = [
                            vrt_lss_delivery.models.cargo.Cargo(
                                key = 'cargo01', 
                                capacity = vrt_lss_delivery.models.capacity.Capacity(
                                    mass = 10, 
                                    volume = 2, 
                                    capacity_x = 1, 
                                    capacity_y = 2, 
                                    capacity_z = 3, ), 
                                rotation = ["ALL"], 
                                width = 1, 
                                height = 0.3, 
                                length = 2.2, 
                                max_storage_time = 60, 
                                restrictions = ["Freezer"], 
                                cargo_features = ["Clean"], 
                                cargo_restrictions = ["Warm"], )
                            ], 
                        warehouse_duration = 10, 
                        customer_duration = 10, 
                        cost = vrt_lss_delivery.models.order_cost.OrderCost(
                            reward = 199.1, 
                            penalty = vrt_lss_delivery.models.cost_penalty.CostPenalty(
                                start_time = '2021-05-21T17:00Z', 
                                period = 60, 
                                value = 1000, 
                                max_value = 10000, ), ), 
                        order_features = ["Special"], 
                        order_restrictions = ["Special"], 
                        performer_restrictions = ["Special"], 
                        performer_blacklist = ["A0"], )
                    ],
                performers = [
                    vrt_lss_delivery.models.performer.Performer(
                        key = 'performer0001', 
                        count = 15, 
                        box = vrt_lss_delivery.models.box.Box(
                            key = 'box01', 
                            capacity = vrt_lss_delivery.models.capacity.Capacity(
                                mass = 10, 
                                volume = 2, 
                                capacity_x = 1, 
                                capacity_y = 2, 
                                capacity_z = 3, ), 
                            max_size = vrt_lss_delivery.models.capacity.Capacity(
                                mass = 10, 
                                volume = 2, 
                                capacity_x = 1, 
                                capacity_y = 2, 
                                capacity_z = 3, ), 
                            width = 1, 
                            height = 3.1, 
                            length = 2.1, 
                            features = ["Freezer"], ), 
                        start_location = vrt_lss_delivery.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        finish_location = vrt_lss_delivery.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        features = ["B1","Special"], 
                        transport_type = 'CAR', 
                        shifts = [
                            vrt_lss_delivery.models.shift.Shift(
                                availability_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), 
                                working_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), )
                            ], 
                        tariff = vrt_lss_delivery.models.tariff.Tariff(
                            basic = vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                cost_per_shift = 1000, 
                                cost_per_meter = 0.1, 
                                max_length = 200000, 
                                cost_per_minute = 0.2, 
                                max_time = 480, ), 
                            extra = [
                                vrt_lss_delivery.models.tariff_primary.TariffPrimary(
                                    cost_per_shift = 1000, 
                                    cost_per_meter = 0.1, 
                                    max_length = 200000, 
                                    cost_per_minute = 0.2, 
                                    max_time = 480, )
                                ], ), )
                    ],
                trips = [
                    vrt_lss_delivery.models.trip.Trip(
                        key = 'TRIP0001', 
                        trip_time = vrt_lss_delivery.models.time_window.TimeWindow(
                            from = '2021-02-21T09:30+03:00', 
                            to = '2021-02-21T19:45Z', ), 
                        performer_key = 'performer01', 
                        actions = [
                            vrt_lss_delivery.models.trip_action.TripAction(
                                order_key = 'order01', 
                                warehouse_key = 'whs01', 
                                order_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), 
                                location_time = vrt_lss_delivery.models.time_window.TimeWindow(
                                    from = '2021-02-21T09:30+03:00', 
                                    to = '2021-02-21T19:45Z', ), )
                            ], 
                        waitlist = ["order02"], )
                    ],
        )

    def testActualizeTask(self):
        """Test ActualizeTask"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
