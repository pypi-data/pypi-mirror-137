# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: runtime.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rruntime.proto\"\x18\n\tExpertUID\x12\x0b\n\x03uid\x18\x01 \x01(\t\"%\n\nExpertInfo\x12\x17\n\x0fserialized_info\x18\x01 \x01(\x0c\"6\n\rExpertRequest\x12\x0b\n\x03uid\x18\x01 \x01(\t\x12\x18\n\x07tensors\x18\x02 \x03(\x0b\x32\x07.Tensor\"*\n\x0e\x45xpertResponse\x12\x18\n\x07tensors\x18\x02 \x03(\x0b\x32\x07.Tensor\"\x83\x01\n\x06Tensor\x12\x0e\n\x06\x62uffer\x18\x01 \x01(\x0c\x12\x0c\n\x04size\x18\x02 \x03(\r\x12\x15\n\rrequires_grad\x18\x03 \x01(\x08\x12\r\n\x05\x64type\x18\x04 \x01(\t\x12%\n\x0b\x63ompression\x18\x05 \x01(\x0e\x32\x10.CompressionType\x12\x0e\n\x06\x63hunks\x18\x06 \x01(\x05*`\n\x0f\x43ompressionType\x12\x08\n\x04NONE\x10\x00\x12\x11\n\rMEANSTD_16BIT\x10\x01\x12\x0b\n\x07\x46LOAT16\x10\x02\x12\x11\n\rQUANTILE_8BIT\x10\x03\x12\x10\n\x0cUNIFORM_8BIT\x10\x04\x32\x8d\x01\n\x11\x43onnectionHandler\x12\x1f\n\x04info\x12\n.ExpertUID\x1a\x0b.ExpertInfo\x12*\n\x07\x66orward\x12\x0e.ExpertRequest\x1a\x0f.ExpertResponse\x12+\n\x08\x62\x61\x63kward\x12\x0e.ExpertRequest\x1a\x0f.ExpertResponseb\x06proto3')

_COMPRESSIONTYPE = DESCRIPTOR.enum_types_by_name['CompressionType']
CompressionType = enum_type_wrapper.EnumTypeWrapper(_COMPRESSIONTYPE)
NONE = 0
MEANSTD_16BIT = 1
FLOAT16 = 2
QUANTILE_8BIT = 3
UNIFORM_8BIT = 4


_EXPERTUID = DESCRIPTOR.message_types_by_name['ExpertUID']
_EXPERTINFO = DESCRIPTOR.message_types_by_name['ExpertInfo']
_EXPERTREQUEST = DESCRIPTOR.message_types_by_name['ExpertRequest']
_EXPERTRESPONSE = DESCRIPTOR.message_types_by_name['ExpertResponse']
_TENSOR = DESCRIPTOR.message_types_by_name['Tensor']
ExpertUID = _reflection.GeneratedProtocolMessageType('ExpertUID', (_message.Message,), {
  'DESCRIPTOR' : _EXPERTUID,
  '__module__' : 'runtime_pb2'
  # @@protoc_insertion_point(class_scope:ExpertUID)
  })
_sym_db.RegisterMessage(ExpertUID)

ExpertInfo = _reflection.GeneratedProtocolMessageType('ExpertInfo', (_message.Message,), {
  'DESCRIPTOR' : _EXPERTINFO,
  '__module__' : 'runtime_pb2'
  # @@protoc_insertion_point(class_scope:ExpertInfo)
  })
_sym_db.RegisterMessage(ExpertInfo)

ExpertRequest = _reflection.GeneratedProtocolMessageType('ExpertRequest', (_message.Message,), {
  'DESCRIPTOR' : _EXPERTREQUEST,
  '__module__' : 'runtime_pb2'
  # @@protoc_insertion_point(class_scope:ExpertRequest)
  })
_sym_db.RegisterMessage(ExpertRequest)

ExpertResponse = _reflection.GeneratedProtocolMessageType('ExpertResponse', (_message.Message,), {
  'DESCRIPTOR' : _EXPERTRESPONSE,
  '__module__' : 'runtime_pb2'
  # @@protoc_insertion_point(class_scope:ExpertResponse)
  })
_sym_db.RegisterMessage(ExpertResponse)

Tensor = _reflection.GeneratedProtocolMessageType('Tensor', (_message.Message,), {
  'DESCRIPTOR' : _TENSOR,
  '__module__' : 'runtime_pb2'
  # @@protoc_insertion_point(class_scope:Tensor)
  })
_sym_db.RegisterMessage(Tensor)

_CONNECTIONHANDLER = DESCRIPTOR.services_by_name['ConnectionHandler']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _COMPRESSIONTYPE._serialized_start=316
  _COMPRESSIONTYPE._serialized_end=412
  _EXPERTUID._serialized_start=17
  _EXPERTUID._serialized_end=41
  _EXPERTINFO._serialized_start=43
  _EXPERTINFO._serialized_end=80
  _EXPERTREQUEST._serialized_start=82
  _EXPERTREQUEST._serialized_end=136
  _EXPERTRESPONSE._serialized_start=138
  _EXPERTRESPONSE._serialized_end=180
  _TENSOR._serialized_start=183
  _TENSOR._serialized_end=314
  _CONNECTIONHANDLER._serialized_start=415
  _CONNECTIONHANDLER._serialized_end=556
# @@protoc_insertion_point(module_scope)
