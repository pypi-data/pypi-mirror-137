# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class ReplanStrategy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reorder': 'bool',
        'plan_new_orders': 'bool',
        'create_new_trips': 'bool'
    }

    attribute_map = {
        'reorder': 'reorder',
        'plan_new_orders': 'plan_new_orders',
        'create_new_trips': 'create_new_trips'
    }

    def __init__(self, reorder=False, plan_new_orders=False, create_new_trips=False, local_vars_configuration=None):  # noqa: E501
        """ReplanStrategy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._reorder = None
        self._plan_new_orders = None
        self._create_new_trips = None
        self.discriminator = None

        if reorder is not None:
            self.reorder = reorder
        if plan_new_orders is not None:
            self.plan_new_orders = plan_new_orders
        if create_new_trips is not None:
            self.create_new_trips = create_new_trips

    @property
    def reorder(self):
        """Gets the reorder of this ReplanStrategy.  # noqa: E501

        Activate trip actions reorder.  # noqa: E501

        :return: The reorder of this ReplanStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._reorder

    @reorder.setter
    def reorder(self, reorder):
        """Sets the reorder of this ReplanStrategy.

        Activate trip actions reorder.  # noqa: E501

        :param reorder: The reorder of this ReplanStrategy.  # noqa: E501
        :type reorder: bool
        """

        self._reorder = reorder

    @property
    def plan_new_orders(self):
        """Gets the plan_new_orders of this ReplanStrategy.  # noqa: E501

        Activate new orders planning.  # noqa: E501

        :return: The plan_new_orders of this ReplanStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._plan_new_orders

    @plan_new_orders.setter
    def plan_new_orders(self, plan_new_orders):
        """Sets the plan_new_orders of this ReplanStrategy.

        Activate new orders planning.  # noqa: E501

        :param plan_new_orders: The plan_new_orders of this ReplanStrategy.  # noqa: E501
        :type plan_new_orders: bool
        """

        self._plan_new_orders = plan_new_orders

    @property
    def create_new_trips(self):
        """Gets the create_new_trips of this ReplanStrategy.  # noqa: E501

        Activate new trips creation.  # noqa: E501

        :return: The create_new_trips of this ReplanStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._create_new_trips

    @create_new_trips.setter
    def create_new_trips(self, create_new_trips):
        """Sets the create_new_trips of this ReplanStrategy.

        Activate new trips creation.  # noqa: E501

        :param create_new_trips: The create_new_trips of this ReplanStrategy.  # noqa: E501
        :type create_new_trips: bool
        """

        self._create_new_trips = create_new_trips

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplanStrategy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplanStrategy):
            return True

        return self.to_dict() != other.to_dict()
