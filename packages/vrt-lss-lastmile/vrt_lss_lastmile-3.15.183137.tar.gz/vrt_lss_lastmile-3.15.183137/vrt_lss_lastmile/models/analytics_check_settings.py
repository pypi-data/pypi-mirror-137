# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class AnalyticsCheckSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'short_time_window': 'AnalyticsCheckSettingsShortTimeWindow',
        'lack_resource': 'AnalyticsCheckSettingsLackResource',
        'low_order_compatibility': 'AnalyticsCheckSettingsLowOrderCompatibility',
        'low_resource_compatibility': 'AnalyticsCheckSettingsLowResourceCompatibility',
        'lack_capacity': 'AnalyticsCheckSettingsLackCapacity',
        'huge_peak_load': 'AnalyticsCheckSettingsHugePeakLoad',
        'far_location': 'AnalyticsCheckSettingsFarLocation',
        'far_order': 'AnalyticsCheckSettingsFarOrder'
    }

    attribute_map = {
        'short_time_window': 'short_time_window',
        'lack_resource': 'lack_resource',
        'low_order_compatibility': 'low_order_compatibility',
        'low_resource_compatibility': 'low_resource_compatibility',
        'lack_capacity': 'lack_capacity',
        'huge_peak_load': 'huge_peak_load',
        'far_location': 'far_location',
        'far_order': 'far_order'
    }

    def __init__(self, short_time_window=None, lack_resource=None, low_order_compatibility=None, low_resource_compatibility=None, lack_capacity=None, huge_peak_load=None, far_location=None, far_order=None, local_vars_configuration=None):  # noqa: E501
        """AnalyticsCheckSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._short_time_window = None
        self._lack_resource = None
        self._low_order_compatibility = None
        self._low_resource_compatibility = None
        self._lack_capacity = None
        self._huge_peak_load = None
        self._far_location = None
        self._far_order = None
        self.discriminator = None

        if short_time_window is not None:
            self.short_time_window = short_time_window
        if lack_resource is not None:
            self.lack_resource = lack_resource
        if low_order_compatibility is not None:
            self.low_order_compatibility = low_order_compatibility
        if low_resource_compatibility is not None:
            self.low_resource_compatibility = low_resource_compatibility
        if lack_capacity is not None:
            self.lack_capacity = lack_capacity
        if huge_peak_load is not None:
            self.huge_peak_load = huge_peak_load
        if far_location is not None:
            self.far_location = far_location
        if far_order is not None:
            self.far_order = far_order

    @property
    def short_time_window(self):
        """Gets the short_time_window of this AnalyticsCheckSettings.  # noqa: E501


        :return: The short_time_window of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsShortTimeWindow
        """
        return self._short_time_window

    @short_time_window.setter
    def short_time_window(self, short_time_window):
        """Sets the short_time_window of this AnalyticsCheckSettings.


        :param short_time_window: The short_time_window of this AnalyticsCheckSettings.  # noqa: E501
        :type short_time_window: AnalyticsCheckSettingsShortTimeWindow
        """

        self._short_time_window = short_time_window

    @property
    def lack_resource(self):
        """Gets the lack_resource of this AnalyticsCheckSettings.  # noqa: E501


        :return: The lack_resource of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsLackResource
        """
        return self._lack_resource

    @lack_resource.setter
    def lack_resource(self, lack_resource):
        """Sets the lack_resource of this AnalyticsCheckSettings.


        :param lack_resource: The lack_resource of this AnalyticsCheckSettings.  # noqa: E501
        :type lack_resource: AnalyticsCheckSettingsLackResource
        """

        self._lack_resource = lack_resource

    @property
    def low_order_compatibility(self):
        """Gets the low_order_compatibility of this AnalyticsCheckSettings.  # noqa: E501


        :return: The low_order_compatibility of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsLowOrderCompatibility
        """
        return self._low_order_compatibility

    @low_order_compatibility.setter
    def low_order_compatibility(self, low_order_compatibility):
        """Sets the low_order_compatibility of this AnalyticsCheckSettings.


        :param low_order_compatibility: The low_order_compatibility of this AnalyticsCheckSettings.  # noqa: E501
        :type low_order_compatibility: AnalyticsCheckSettingsLowOrderCompatibility
        """

        self._low_order_compatibility = low_order_compatibility

    @property
    def low_resource_compatibility(self):
        """Gets the low_resource_compatibility of this AnalyticsCheckSettings.  # noqa: E501


        :return: The low_resource_compatibility of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsLowResourceCompatibility
        """
        return self._low_resource_compatibility

    @low_resource_compatibility.setter
    def low_resource_compatibility(self, low_resource_compatibility):
        """Sets the low_resource_compatibility of this AnalyticsCheckSettings.


        :param low_resource_compatibility: The low_resource_compatibility of this AnalyticsCheckSettings.  # noqa: E501
        :type low_resource_compatibility: AnalyticsCheckSettingsLowResourceCompatibility
        """

        self._low_resource_compatibility = low_resource_compatibility

    @property
    def lack_capacity(self):
        """Gets the lack_capacity of this AnalyticsCheckSettings.  # noqa: E501


        :return: The lack_capacity of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsLackCapacity
        """
        return self._lack_capacity

    @lack_capacity.setter
    def lack_capacity(self, lack_capacity):
        """Sets the lack_capacity of this AnalyticsCheckSettings.


        :param lack_capacity: The lack_capacity of this AnalyticsCheckSettings.  # noqa: E501
        :type lack_capacity: AnalyticsCheckSettingsLackCapacity
        """

        self._lack_capacity = lack_capacity

    @property
    def huge_peak_load(self):
        """Gets the huge_peak_load of this AnalyticsCheckSettings.  # noqa: E501


        :return: The huge_peak_load of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsHugePeakLoad
        """
        return self._huge_peak_load

    @huge_peak_load.setter
    def huge_peak_load(self, huge_peak_load):
        """Sets the huge_peak_load of this AnalyticsCheckSettings.


        :param huge_peak_load: The huge_peak_load of this AnalyticsCheckSettings.  # noqa: E501
        :type huge_peak_load: AnalyticsCheckSettingsHugePeakLoad
        """

        self._huge_peak_load = huge_peak_load

    @property
    def far_location(self):
        """Gets the far_location of this AnalyticsCheckSettings.  # noqa: E501


        :return: The far_location of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsFarLocation
        """
        return self._far_location

    @far_location.setter
    def far_location(self, far_location):
        """Sets the far_location of this AnalyticsCheckSettings.


        :param far_location: The far_location of this AnalyticsCheckSettings.  # noqa: E501
        :type far_location: AnalyticsCheckSettingsFarLocation
        """

        self._far_location = far_location

    @property
    def far_order(self):
        """Gets the far_order of this AnalyticsCheckSettings.  # noqa: E501


        :return: The far_order of this AnalyticsCheckSettings.  # noqa: E501
        :rtype: AnalyticsCheckSettingsFarOrder
        """
        return self._far_order

    @far_order.setter
    def far_order(self, far_order):
        """Sets the far_order of this AnalyticsCheckSettings.


        :param far_order: The far_order of this AnalyticsCheckSettings.  # noqa: E501
        :type far_order: AnalyticsCheckSettingsFarOrder
        """

        self._far_order = far_order

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsCheckSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyticsCheckSettings):
            return True

        return self.to_dict() != other.to_dict()
