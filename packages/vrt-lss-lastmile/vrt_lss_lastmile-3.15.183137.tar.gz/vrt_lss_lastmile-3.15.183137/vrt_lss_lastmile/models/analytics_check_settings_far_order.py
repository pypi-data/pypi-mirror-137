# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class AnalyticsCheckSettingsFarOrder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'planned_locations_count': 'int',
        'unplanned_locations_count': 'int',
        'time_delta': 'int'
    }

    attribute_map = {
        'planned_locations_count': 'planned_locations_count',
        'unplanned_locations_count': 'unplanned_locations_count',
        'time_delta': 'time_delta'
    }

    def __init__(self, planned_locations_count=2, unplanned_locations_count=2, time_delta=30, local_vars_configuration=None):  # noqa: E501
        """AnalyticsCheckSettingsFarOrder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._planned_locations_count = None
        self._unplanned_locations_count = None
        self._time_delta = None
        self.discriminator = None

        if planned_locations_count is not None:
            self.planned_locations_count = planned_locations_count
        if unplanned_locations_count is not None:
            self.unplanned_locations_count = unplanned_locations_count
        if time_delta is not None:
            self.time_delta = time_delta

    @property
    def planned_locations_count(self):
        """Gets the planned_locations_count of this AnalyticsCheckSettingsFarOrder.  # noqa: E501

        Count.  # noqa: E501

        :return: The planned_locations_count of this AnalyticsCheckSettingsFarOrder.  # noqa: E501
        :rtype: int
        """
        return self._planned_locations_count

    @planned_locations_count.setter
    def planned_locations_count(self, planned_locations_count):
        """Sets the planned_locations_count of this AnalyticsCheckSettingsFarOrder.

        Count.  # noqa: E501

        :param planned_locations_count: The planned_locations_count of this AnalyticsCheckSettingsFarOrder.  # noqa: E501
        :type planned_locations_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                planned_locations_count is not None and planned_locations_count > 9000):  # noqa: E501
            raise ValueError("Invalid value for `planned_locations_count`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                planned_locations_count is not None and planned_locations_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `planned_locations_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planned_locations_count = planned_locations_count

    @property
    def unplanned_locations_count(self):
        """Gets the unplanned_locations_count of this AnalyticsCheckSettingsFarOrder.  # noqa: E501

        Count.  # noqa: E501

        :return: The unplanned_locations_count of this AnalyticsCheckSettingsFarOrder.  # noqa: E501
        :rtype: int
        """
        return self._unplanned_locations_count

    @unplanned_locations_count.setter
    def unplanned_locations_count(self, unplanned_locations_count):
        """Sets the unplanned_locations_count of this AnalyticsCheckSettingsFarOrder.

        Count.  # noqa: E501

        :param unplanned_locations_count: The unplanned_locations_count of this AnalyticsCheckSettingsFarOrder.  # noqa: E501
        :type unplanned_locations_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                unplanned_locations_count is not None and unplanned_locations_count > 9000):  # noqa: E501
            raise ValueError("Invalid value for `unplanned_locations_count`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                unplanned_locations_count is not None and unplanned_locations_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `unplanned_locations_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._unplanned_locations_count = unplanned_locations_count

    @property
    def time_delta(self):
        """Gets the time_delta of this AnalyticsCheckSettingsFarOrder.  # noqa: E501

        Time delta.  # noqa: E501

        :return: The time_delta of this AnalyticsCheckSettingsFarOrder.  # noqa: E501
        :rtype: int
        """
        return self._time_delta

    @time_delta.setter
    def time_delta(self, time_delta):
        """Sets the time_delta of this AnalyticsCheckSettingsFarOrder.

        Time delta.  # noqa: E501

        :param time_delta: The time_delta of this AnalyticsCheckSettingsFarOrder.  # noqa: E501
        :type time_delta: int
        """
        if (self.local_vars_configuration.client_side_validation and
                time_delta is not None and time_delta > 100):  # noqa: E501
            raise ValueError("Invalid value for `time_delta`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                time_delta is not None and time_delta < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_delta`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_delta = time_delta

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsCheckSettingsFarOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyticsCheckSettingsFarOrder):
            return True

        return self.to_dict() != other.to_dict()
