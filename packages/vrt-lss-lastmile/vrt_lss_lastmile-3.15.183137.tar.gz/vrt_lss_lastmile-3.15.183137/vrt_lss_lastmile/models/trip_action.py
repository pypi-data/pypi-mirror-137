# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class TripAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'order_key': 'str',
        'demand_key': 'str',
        'event_key': 'str',
        'location_key': 'str',
        'todolist': 'list[TripJob]',
        'cargo_placements': 'list[CargoPlacement]',
        'attributes': 'list[str]'
    }

    attribute_map = {
        'order_key': 'order_key',
        'demand_key': 'demand_key',
        'event_key': 'event_key',
        'location_key': 'location_key',
        'todolist': 'todolist',
        'cargo_placements': 'cargo_placements',
        'attributes': 'attributes'
    }

    def __init__(self, order_key=None, demand_key=None, event_key=None, location_key=None, todolist=None, cargo_placements=None, attributes=[], local_vars_configuration=None):  # noqa: E501
        """TripAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._order_key = None
        self._demand_key = None
        self._event_key = None
        self._location_key = None
        self._todolist = None
        self._cargo_placements = None
        self._attributes = None
        self.discriminator = None

        self.order_key = order_key
        self.demand_key = demand_key
        if event_key is not None:
            self.event_key = event_key
        self.location_key = location_key
        if todolist is not None:
            self.todolist = todolist
        if cargo_placements is not None:
            self.cargo_placements = cargo_placements
        if attributes is not None:
            self.attributes = attributes

    @property
    def order_key(self):
        """Gets the order_key of this TripAction.  # noqa: E501

        Key of the order with which an action is taken.  # noqa: E501

        :return: The order_key of this TripAction.  # noqa: E501
        :rtype: str
        """
        return self._order_key

    @order_key.setter
    def order_key(self, order_key):
        """Sets the order_key of this TripAction.

        Key of the order with which an action is taken.  # noqa: E501

        :param order_key: The order_key of this TripAction.  # noqa: E501
        :type order_key: str
        """
        if self.local_vars_configuration.client_side_validation and order_key is None:  # noqa: E501
            raise ValueError("Invalid value for `order_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order_key is not None and len(order_key) > 1024):
            raise ValueError("Invalid value for `order_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order_key is not None and len(order_key) < 1):
            raise ValueError("Invalid value for `order_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._order_key = order_key

    @property
    def demand_key(self):
        """Gets the demand_key of this TripAction.  # noqa: E501

        Key of the demand with which an action is taken.  # noqa: E501

        :return: The demand_key of this TripAction.  # noqa: E501
        :rtype: str
        """
        return self._demand_key

    @demand_key.setter
    def demand_key(self, demand_key):
        """Sets the demand_key of this TripAction.

        Key of the demand with which an action is taken.  # noqa: E501

        :param demand_key: The demand_key of this TripAction.  # noqa: E501
        :type demand_key: str
        """
        if self.local_vars_configuration.client_side_validation and demand_key is None:  # noqa: E501
            raise ValueError("Invalid value for `demand_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                demand_key is not None and len(demand_key) > 1024):
            raise ValueError("Invalid value for `demand_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                demand_key is not None and len(demand_key) < 1):
            raise ValueError("Invalid value for `demand_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._demand_key = demand_key

    @property
    def event_key(self):
        """Gets the event_key of this TripAction.  # noqa: E501

        Key of the event at which an action is taken.  # noqa: E501

        :return: The event_key of this TripAction.  # noqa: E501
        :rtype: str
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this TripAction.

        Key of the event at which an action is taken.  # noqa: E501

        :param event_key: The event_key of this TripAction.  # noqa: E501
        :type event_key: str
        """
        if (self.local_vars_configuration.client_side_validation and
                event_key is not None and len(event_key) > 1024):
            raise ValueError("Invalid value for `event_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                event_key is not None and len(event_key) < 1):
            raise ValueError("Invalid value for `event_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._event_key = event_key

    @property
    def location_key(self):
        """Gets the location_key of this TripAction.  # noqa: E501

        Key of the location at which an action is taken.  # noqa: E501

        :return: The location_key of this TripAction.  # noqa: E501
        :rtype: str
        """
        return self._location_key

    @location_key.setter
    def location_key(self, location_key):
        """Sets the location_key of this TripAction.

        Key of the location at which an action is taken.  # noqa: E501

        :param location_key: The location_key of this TripAction.  # noqa: E501
        :type location_key: str
        """
        if self.local_vars_configuration.client_side_validation and location_key is None:  # noqa: E501
            raise ValueError("Invalid value for `location_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_key is not None and len(location_key) > 1024):
            raise ValueError("Invalid value for `location_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_key is not None and len(location_key) < 1):
            raise ValueError("Invalid value for `location_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._location_key = location_key

    @property
    def todolist(self):
        """Gets the todolist of this TripAction.  # noqa: E501

        List of works, each to be performed during a `job_time` time window.  # noqa: E501

        :return: The todolist of this TripAction.  # noqa: E501
        :rtype: list[TripJob]
        """
        return self._todolist

    @todolist.setter
    def todolist(self, todolist):
        """Sets the todolist of this TripAction.

        List of works, each to be performed during a `job_time` time window.  # noqa: E501

        :param todolist: The todolist of this TripAction.  # noqa: E501
        :type todolist: list[TripJob]
        """
        if (self.local_vars_configuration.client_side_validation and
                todolist is not None and len(todolist) > 1000):
            raise ValueError("Invalid value for `todolist`, number of items must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                todolist is not None and len(todolist) < 1):
            raise ValueError("Invalid value for `todolist`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._todolist = todolist

    @property
    def cargo_placements(self):
        """Gets the cargo_placements of this TripAction.  # noqa: E501

        List of cargo placements.  # noqa: E501

        :return: The cargo_placements of this TripAction.  # noqa: E501
        :rtype: list[CargoPlacement]
        """
        return self._cargo_placements

    @cargo_placements.setter
    def cargo_placements(self, cargo_placements):
        """Sets the cargo_placements of this TripAction.

        List of cargo placements.  # noqa: E501

        :param cargo_placements: The cargo_placements of this TripAction.  # noqa: E501
        :type cargo_placements: list[CargoPlacement]
        """
        if (self.local_vars_configuration.client_side_validation and
                cargo_placements is not None and len(cargo_placements) > 1000):
            raise ValueError("Invalid value for `cargo_placements`, number of items must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cargo_placements is not None and len(cargo_placements) < 0):
            raise ValueError("Invalid value for `cargo_placements`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._cargo_placements = cargo_placements

    @property
    def attributes(self):
        """Gets the attributes of this TripAction.  # noqa: E501

        Attributes, used to add service information that does not affect planning.  # noqa: E501

        :return: The attributes of this TripAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this TripAction.

        Attributes, used to add service information that does not affect planning.  # noqa: E501

        :param attributes: The attributes of this TripAction.  # noqa: E501
        :type attributes: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                attributes is not None and len(attributes) > 1000):
            raise ValueError("Invalid value for `attributes`, number of items must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                attributes is not None and len(attributes) < 0):
            raise ValueError("Invalid value for `attributes`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TripAction):
            return True

        return self.to_dict() != other.to_dict()
