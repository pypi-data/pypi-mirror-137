# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class AnalyticsUnplannedHighlight(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'AnalyticsCheckType',
        'group': 'AnalyticsCheckGroupType',
        'details': 'str',
        'order_keys': 'list[str]',
        'performer_keys': 'list[str]',
        'transport_keys': 'list[str]',
        'hardlink_keys': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'group': 'group',
        'details': 'details',
        'order_keys': 'order_keys',
        'performer_keys': 'performer_keys',
        'transport_keys': 'transport_keys',
        'hardlink_keys': 'hardlink_keys'
    }

    def __init__(self, type=None, group=None, details=None, order_keys=None, performer_keys=None, transport_keys=None, hardlink_keys=None, local_vars_configuration=None):  # noqa: E501
        """AnalyticsUnplannedHighlight - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._group = None
        self._details = None
        self._order_keys = None
        self._performer_keys = None
        self._transport_keys = None
        self._hardlink_keys = None
        self.discriminator = None

        self.type = type
        self.group = group
        if details is not None:
            self.details = details
        if order_keys is not None:
            self.order_keys = order_keys
        if performer_keys is not None:
            self.performer_keys = performer_keys
        if transport_keys is not None:
            self.transport_keys = transport_keys
        if hardlink_keys is not None:
            self.hardlink_keys = hardlink_keys

    @property
    def type(self):
        """Gets the type of this AnalyticsUnplannedHighlight.  # noqa: E501


        :return: The type of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: AnalyticsCheckType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyticsUnplannedHighlight.


        :param type: The type of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type type: AnalyticsCheckType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def group(self):
        """Gets the group of this AnalyticsUnplannedHighlight.  # noqa: E501


        :return: The group of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: AnalyticsCheckGroupType
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AnalyticsUnplannedHighlight.


        :param group: The group of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type group: AnalyticsCheckGroupType
        """
        if self.local_vars_configuration.client_side_validation and group is None:  # noqa: E501
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def details(self):
        """Gets the details of this AnalyticsUnplannedHighlight.  # noqa: E501

        Reason detail.  # noqa: E501

        :return: The details of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AnalyticsUnplannedHighlight.

        Reason detail.  # noqa: E501

        :param details: The details of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type details: str
        """

        self._details = details

    @property
    def order_keys(self):
        """Gets the order_keys of this AnalyticsUnplannedHighlight.  # noqa: E501

        Order keys list.  # noqa: E501

        :return: The order_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_keys

    @order_keys.setter
    def order_keys(self, order_keys):
        """Sets the order_keys of this AnalyticsUnplannedHighlight.

        Order keys list.  # noqa: E501

        :param order_keys: The order_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type order_keys: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                order_keys is not None and len(order_keys) > 3001):
            raise ValueError("Invalid value for `order_keys`, number of items must be less than or equal to `3001`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order_keys is not None and len(order_keys) < 0):
            raise ValueError("Invalid value for `order_keys`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._order_keys = order_keys

    @property
    def performer_keys(self):
        """Gets the performer_keys of this AnalyticsUnplannedHighlight.  # noqa: E501

        Performer keys list.  # noqa: E501

        :return: The performer_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: list[str]
        """
        return self._performer_keys

    @performer_keys.setter
    def performer_keys(self, performer_keys):
        """Sets the performer_keys of this AnalyticsUnplannedHighlight.

        Performer keys list.  # noqa: E501

        :param performer_keys: The performer_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type performer_keys: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                performer_keys is not None and len(performer_keys) > 3001):
            raise ValueError("Invalid value for `performer_keys`, number of items must be less than or equal to `3001`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                performer_keys is not None and len(performer_keys) < 0):
            raise ValueError("Invalid value for `performer_keys`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._performer_keys = performer_keys

    @property
    def transport_keys(self):
        """Gets the transport_keys of this AnalyticsUnplannedHighlight.  # noqa: E501

        Transport keys list.  # noqa: E501

        :return: The transport_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: list[str]
        """
        return self._transport_keys

    @transport_keys.setter
    def transport_keys(self, transport_keys):
        """Sets the transport_keys of this AnalyticsUnplannedHighlight.

        Transport keys list.  # noqa: E501

        :param transport_keys: The transport_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type transport_keys: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                transport_keys is not None and len(transport_keys) > 3001):
            raise ValueError("Invalid value for `transport_keys`, number of items must be less than or equal to `3001`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                transport_keys is not None and len(transport_keys) < 0):
            raise ValueError("Invalid value for `transport_keys`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._transport_keys = transport_keys

    @property
    def hardlink_keys(self):
        """Gets the hardlink_keys of this AnalyticsUnplannedHighlight.  # noqa: E501

        Hardlink keys list.  # noqa: E501

        :return: The hardlink_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :rtype: list[str]
        """
        return self._hardlink_keys

    @hardlink_keys.setter
    def hardlink_keys(self, hardlink_keys):
        """Sets the hardlink_keys of this AnalyticsUnplannedHighlight.

        Hardlink keys list.  # noqa: E501

        :param hardlink_keys: The hardlink_keys of this AnalyticsUnplannedHighlight.  # noqa: E501
        :type hardlink_keys: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                hardlink_keys is not None and len(hardlink_keys) > 3001):
            raise ValueError("Invalid value for `hardlink_keys`, number of items must be less than or equal to `3001`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                hardlink_keys is not None and len(hardlink_keys) < 0):
            raise ValueError("Invalid value for `hardlink_keys`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._hardlink_keys = hardlink_keys

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsUnplannedHighlight):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyticsUnplannedHighlight):
            return True

        return self.to_dict() != other.to_dict()
