# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class Shift(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'shift_type': 'str',
        'resource_key': 'str',
        'availability_time': 'TimeWindow',
        'working_time': 'TimeWindow',
        'start_location_key': 'str',
        'finish_location_key': 'str',
        'max_locations': 'int',
        'max_stops': 'int',
        'tariff': 'UniversalTariff',
        'work_and_rest_rules': 'WorkAndRestRules',
        'attributes': 'list[str]'
    }

    attribute_map = {
        'key': 'key',
        'shift_type': 'shift_type',
        'resource_key': 'resource_key',
        'availability_time': 'availability_time',
        'working_time': 'working_time',
        'start_location_key': 'start_location_key',
        'finish_location_key': 'finish_location_key',
        'max_locations': 'max_locations',
        'max_stops': 'max_stops',
        'tariff': 'tariff',
        'work_and_rest_rules': 'work_and_rest_rules',
        'attributes': 'attributes'
    }

    def __init__(self, key=None, shift_type=None, resource_key=None, availability_time=None, working_time=None, start_location_key=None, finish_location_key=None, max_locations=0, max_stops=0, tariff=None, work_and_rest_rules=None, attributes=[], local_vars_configuration=None):  # noqa: E501
        """Shift - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._shift_type = None
        self._resource_key = None
        self._availability_time = None
        self._working_time = None
        self._start_location_key = None
        self._finish_location_key = None
        self._max_locations = None
        self._max_stops = None
        self._tariff = None
        self._work_and_rest_rules = None
        self._attributes = None
        self.discriminator = None

        self.key = key
        self.shift_type = shift_type
        self.resource_key = resource_key
        self.availability_time = availability_time
        self.working_time = working_time
        if start_location_key is not None:
            self.start_location_key = start_location_key
        if finish_location_key is not None:
            self.finish_location_key = finish_location_key
        if max_locations is not None:
            self.max_locations = max_locations
        if max_stops is not None:
            self.max_stops = max_stops
        if tariff is not None:
            self.tariff = tariff
        if work_and_rest_rules is not None:
            self.work_and_rest_rules = work_and_rest_rules
        if attributes is not None:
            self.attributes = attributes

    @property
    def key(self):
        """Gets the key of this Shift.  # noqa: E501

        Shift key, unique ID.  # noqa: E501

        :return: The key of this Shift.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Shift.

        Shift key, unique ID.  # noqa: E501

        :param key: The key of this Shift.  # noqa: E501
        :type key: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) > 1024):
            raise ValueError("Invalid value for `key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) < 1):
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")  # noqa: E501

        self._key = key

    @property
    def shift_type(self):
        """Gets the shift_type of this Shift.  # noqa: E501

        Shift type that can be a performer (`PERFORMER`) or a transport (`TRANSPORT`).  # noqa: E501

        :return: The shift_type of this Shift.  # noqa: E501
        :rtype: str
        """
        return self._shift_type

    @shift_type.setter
    def shift_type(self, shift_type):
        """Sets the shift_type of this Shift.

        Shift type that can be a performer (`PERFORMER`) or a transport (`TRANSPORT`).  # noqa: E501

        :param shift_type: The shift_type of this Shift.  # noqa: E501
        :type shift_type: str
        """
        if self.local_vars_configuration.client_side_validation and shift_type is None:  # noqa: E501
            raise ValueError("Invalid value for `shift_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PERFORMER", "TRANSPORT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and shift_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `shift_type` ({0}), must be one of {1}"  # noqa: E501
                .format(shift_type, allowed_values)
            )

        self._shift_type = shift_type

    @property
    def resource_key(self):
        """Gets the resource_key of this Shift.  # noqa: E501

        Resource key referenced by the shift.  # noqa: E501

        :return: The resource_key of this Shift.  # noqa: E501
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Shift.

        Resource key referenced by the shift.  # noqa: E501

        :param resource_key: The resource_key of this Shift.  # noqa: E501
        :type resource_key: str
        """
        if self.local_vars_configuration.client_side_validation and resource_key is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                resource_key is not None and len(resource_key) > 1024):
            raise ValueError("Invalid value for `resource_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                resource_key is not None and len(resource_key) < 1):
            raise ValueError("Invalid value for `resource_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._resource_key = resource_key

    @property
    def availability_time(self):
        """Gets the availability_time of this Shift.  # noqa: E501


        :return: The availability_time of this Shift.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._availability_time

    @availability_time.setter
    def availability_time(self, availability_time):
        """Sets the availability_time of this Shift.


        :param availability_time: The availability_time of this Shift.  # noqa: E501
        :type availability_time: TimeWindow
        """
        if self.local_vars_configuration.client_side_validation and availability_time is None:  # noqa: E501
            raise ValueError("Invalid value for `availability_time`, must not be `None`")  # noqa: E501

        self._availability_time = availability_time

    @property
    def working_time(self):
        """Gets the working_time of this Shift.  # noqa: E501


        :return: The working_time of this Shift.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._working_time

    @working_time.setter
    def working_time(self, working_time):
        """Sets the working_time of this Shift.


        :param working_time: The working_time of this Shift.  # noqa: E501
        :type working_time: TimeWindow
        """
        if self.local_vars_configuration.client_side_validation and working_time is None:  # noqa: E501
            raise ValueError("Invalid value for `working_time`, must not be `None`")  # noqa: E501

        self._working_time = working_time

    @property
    def start_location_key(self):
        """Gets the start_location_key of this Shift.  # noqa: E501

        Start location key.  If not specified, the trip starts from the first order location.   # noqa: E501

        :return: The start_location_key of this Shift.  # noqa: E501
        :rtype: str
        """
        return self._start_location_key

    @start_location_key.setter
    def start_location_key(self, start_location_key):
        """Sets the start_location_key of this Shift.

        Start location key.  If not specified, the trip starts from the first order location.   # noqa: E501

        :param start_location_key: The start_location_key of this Shift.  # noqa: E501
        :type start_location_key: str
        """
        if (self.local_vars_configuration.client_side_validation and
                start_location_key is not None and len(start_location_key) > 1024):
            raise ValueError("Invalid value for `start_location_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                start_location_key is not None and len(start_location_key) < 1):
            raise ValueError("Invalid value for `start_location_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._start_location_key = start_location_key

    @property
    def finish_location_key(self):
        """Gets the finish_location_key of this Shift.  # noqa: E501

        Finish location key.  If not specified, the trip finishes on the last order location.   # noqa: E501

        :return: The finish_location_key of this Shift.  # noqa: E501
        :rtype: str
        """
        return self._finish_location_key

    @finish_location_key.setter
    def finish_location_key(self, finish_location_key):
        """Sets the finish_location_key of this Shift.

        Finish location key.  If not specified, the trip finishes on the last order location.   # noqa: E501

        :param finish_location_key: The finish_location_key of this Shift.  # noqa: E501
        :type finish_location_key: str
        """
        if (self.local_vars_configuration.client_side_validation and
                finish_location_key is not None and len(finish_location_key) > 1024):
            raise ValueError("Invalid value for `finish_location_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                finish_location_key is not None and len(finish_location_key) < 1):
            raise ValueError("Invalid value for `finish_location_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._finish_location_key = finish_location_key

    @property
    def max_locations(self):
        """Gets the max_locations of this Shift.  # noqa: E501

        Limit of the number of unique locations in one trip. If not specified, number of locations is not limited.   # noqa: E501

        :return: The max_locations of this Shift.  # noqa: E501
        :rtype: int
        """
        return self._max_locations

    @max_locations.setter
    def max_locations(self, max_locations):
        """Sets the max_locations of this Shift.

        Limit of the number of unique locations in one trip. If not specified, number of locations is not limited.   # noqa: E501

        :param max_locations: The max_locations of this Shift.  # noqa: E501
        :type max_locations: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_locations is not None and max_locations > 1000):  # noqa: E501
            raise ValueError("Invalid value for `max_locations`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_locations is not None and max_locations < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_locations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_locations = max_locations

    @property
    def max_stops(self):
        """Gets the max_stops of this Shift.  # noqa: E501

        Limit of the number of stops in one trip. If not specified, number of stops is not limited.   # noqa: E501

        :return: The max_stops of this Shift.  # noqa: E501
        :rtype: int
        """
        return self._max_stops

    @max_stops.setter
    def max_stops(self, max_stops):
        """Sets the max_stops of this Shift.

        Limit of the number of stops in one trip. If not specified, number of stops is not limited.   # noqa: E501

        :param max_stops: The max_stops of this Shift.  # noqa: E501
        :type max_stops: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_stops is not None and max_stops > 1000):  # noqa: E501
            raise ValueError("Invalid value for `max_stops`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_stops is not None and max_stops < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_stops`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_stops = max_stops

    @property
    def tariff(self):
        """Gets the tariff of this Shift.  # noqa: E501


        :return: The tariff of this Shift.  # noqa: E501
        :rtype: UniversalTariff
        """
        return self._tariff

    @tariff.setter
    def tariff(self, tariff):
        """Sets the tariff of this Shift.


        :param tariff: The tariff of this Shift.  # noqa: E501
        :type tariff: UniversalTariff
        """

        self._tariff = tariff

    @property
    def work_and_rest_rules(self):
        """Gets the work_and_rest_rules of this Shift.  # noqa: E501


        :return: The work_and_rest_rules of this Shift.  # noqa: E501
        :rtype: WorkAndRestRules
        """
        return self._work_and_rest_rules

    @work_and_rest_rules.setter
    def work_and_rest_rules(self, work_and_rest_rules):
        """Sets the work_and_rest_rules of this Shift.


        :param work_and_rest_rules: The work_and_rest_rules of this Shift.  # noqa: E501
        :type work_and_rest_rules: WorkAndRestRules
        """

        self._work_and_rest_rules = work_and_rest_rules

    @property
    def attributes(self):
        """Gets the attributes of this Shift.  # noqa: E501

        Attributes, used to add service information that does not affect planning.  # noqa: E501

        :return: The attributes of this Shift.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Shift.

        Attributes, used to add service information that does not affect planning.  # noqa: E501

        :param attributes: The attributes of this Shift.  # noqa: E501
        :type attributes: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                attributes is not None and len(attributes) > 1000):
            raise ValueError("Invalid value for `attributes`, number of items must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                attributes is not None and len(attributes) < 0):
            raise ValueError("Invalid value for `attributes`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shift):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Shift):
            return True

        return self.to_dict() != other.to_dict()
