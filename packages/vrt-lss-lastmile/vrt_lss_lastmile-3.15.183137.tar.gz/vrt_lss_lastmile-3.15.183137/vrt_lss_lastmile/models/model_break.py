# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class ModelBreak(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_work_duration_sum': 'int',
        'duration': 'int'
    }

    attribute_map = {
        'max_work_duration_sum': 'max_work_duration_sum',
        'duration': 'duration'
    }

    def __init__(self, max_work_duration_sum=0, duration=0, local_vars_configuration=None):  # noqa: E501
        """ModelBreak - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._max_work_duration_sum = None
        self._duration = None
        self.discriminator = None

        self.max_work_duration_sum = max_work_duration_sum
        self.duration = duration

    @property
    def max_work_duration_sum(self):
        """Gets the max_work_duration_sum of this ModelBreak.  # noqa: E501

        Max work duration sum, minutes.  # noqa: E501

        :return: The max_work_duration_sum of this ModelBreak.  # noqa: E501
        :rtype: int
        """
        return self._max_work_duration_sum

    @max_work_duration_sum.setter
    def max_work_duration_sum(self, max_work_duration_sum):
        """Sets the max_work_duration_sum of this ModelBreak.

        Max work duration sum, minutes.  # noqa: E501

        :param max_work_duration_sum: The max_work_duration_sum of this ModelBreak.  # noqa: E501
        :type max_work_duration_sum: int
        """
        if self.local_vars_configuration.client_side_validation and max_work_duration_sum is None:  # noqa: E501
            raise ValueError("Invalid value for `max_work_duration_sum`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_work_duration_sum is not None and max_work_duration_sum > 43800):  # noqa: E501
            raise ValueError("Invalid value for `max_work_duration_sum`, must be a value less than or equal to `43800`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_work_duration_sum is not None and max_work_duration_sum < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_work_duration_sum`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_work_duration_sum = max_work_duration_sum

    @property
    def duration(self):
        """Gets the duration of this ModelBreak.  # noqa: E501

        Length of break period, minutes.  # noqa: E501

        :return: The duration of this ModelBreak.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ModelBreak.

        Length of break period, minutes.  # noqa: E501

        :param duration: The duration of this ModelBreak.  # noqa: E501
        :type duration: int
        """
        if self.local_vars_configuration.client_side_validation and duration is None:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                duration is not None and duration > 43800):  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `43800`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                duration is not None and duration < 1):  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._duration = duration

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelBreak):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelBreak):
            return True

        return self.to_dict() != other.to_dict()
