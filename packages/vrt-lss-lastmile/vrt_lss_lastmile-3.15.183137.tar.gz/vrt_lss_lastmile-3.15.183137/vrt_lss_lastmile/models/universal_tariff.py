# coding: utf-8

"""
    Veeroute.Lastmile

    Veeroute Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_lastmile.configuration import Configuration


class UniversalTariff(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cost_per_shift': 'float',
        'constraints': 'list[TariffConstraint]',
        'max_penalty_cost': 'float'
    }

    attribute_map = {
        'cost_per_shift': 'cost_per_shift',
        'constraints': 'constraints',
        'max_penalty_cost': 'max_penalty_cost'
    }

    def __init__(self, cost_per_shift=0.001, constraints=None, max_penalty_cost=0, local_vars_configuration=None):  # noqa: E501
        """UniversalTariff - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cost_per_shift = None
        self._constraints = None
        self._max_penalty_cost = None
        self.discriminator = None

        self.cost_per_shift = cost_per_shift
        self.constraints = constraints
        if max_penalty_cost is not None:
            self.max_penalty_cost = max_penalty_cost

    @property
    def cost_per_shift(self):
        """Gets the cost_per_shift of this UniversalTariff.  # noqa: E501

        Price for using the shift, monetary unit.  # noqa: E501

        :return: The cost_per_shift of this UniversalTariff.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_shift

    @cost_per_shift.setter
    def cost_per_shift(self, cost_per_shift):
        """Sets the cost_per_shift of this UniversalTariff.

        Price for using the shift, monetary unit.  # noqa: E501

        :param cost_per_shift: The cost_per_shift of this UniversalTariff.  # noqa: E501
        :type cost_per_shift: float
        """
        if self.local_vars_configuration.client_side_validation and cost_per_shift is None:  # noqa: E501
            raise ValueError("Invalid value for `cost_per_shift`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_shift is not None and cost_per_shift > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_shift`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_shift is not None and cost_per_shift < 0):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_shift`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost_per_shift = cost_per_shift

    @property
    def constraints(self):
        """Gets the constraints of this UniversalTariff.  # noqa: E501

        Tariff restrictions list.  # noqa: E501

        :return: The constraints of this UniversalTariff.  # noqa: E501
        :rtype: list[TariffConstraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this UniversalTariff.

        Tariff restrictions list.  # noqa: E501

        :param constraints: The constraints of this UniversalTariff.  # noqa: E501
        :type constraints: list[TariffConstraint]
        """
        if self.local_vars_configuration.client_side_validation and constraints is None:  # noqa: E501
            raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                constraints is not None and len(constraints) > 100):
            raise ValueError("Invalid value for `constraints`, number of items must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                constraints is not None and len(constraints) < 1):
            raise ValueError("Invalid value for `constraints`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._constraints = constraints

    @property
    def max_penalty_cost(self):
        """Gets the max_penalty_cost of this UniversalTariff.  # noqa: E501

        Max sum of penalties for performer or transport using this shift, monetary unit.   # noqa: E501

        :return: The max_penalty_cost of this UniversalTariff.  # noqa: E501
        :rtype: float
        """
        return self._max_penalty_cost

    @max_penalty_cost.setter
    def max_penalty_cost(self, max_penalty_cost):
        """Sets the max_penalty_cost of this UniversalTariff.

        Max sum of penalties for performer or transport using this shift, monetary unit.   # noqa: E501

        :param max_penalty_cost: The max_penalty_cost of this UniversalTariff.  # noqa: E501
        :type max_penalty_cost: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_penalty_cost is not None and max_penalty_cost > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `max_penalty_cost`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_penalty_cost is not None and max_penalty_cost < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_penalty_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_penalty_cost = max_penalty_cost

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UniversalTariff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UniversalTariff):
            return True

        return self.to_dict() != other.to_dict()
