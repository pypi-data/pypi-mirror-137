Metadata-Version: 2.1
Name: mypy-boto3-elastictranscoder
Version: 1.20.49
Summary: Type annotations for boto3.ElasticTranscoder 1.20.49 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 elastictranscoder type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-elastictranscoder"></a>

# mypy-boto3-elastictranscoder

[![PyPI - mypy-boto3-elastictranscoder](https://img.shields.io/pypi/v/mypy-boto3-elastictranscoder.svg?color=blue)](https://pypi.org/project/mypy-boto3-elastictranscoder)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-elastictranscoder.svg?color=blue)](https://pypi.org/project/mypy-boto3-elastictranscoder)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/mypy-boto3-elastictranscoder?color=blue)](https://pypistats.org/packages/mypy-boto3-elastictranscoder)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.ElasticTranscoder 1.20.49](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elastictranscoder.html#ElasticTranscoder)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[mypy-boto3-elastictranscoder docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_elastictranscoder/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-elastictranscoder](#mypy-boto3-elastictranscoder)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Waiters annotations](#waiters-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `ElasticTranscoder`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `boto3-stubs` for `ElasticTranscoder` service.

```bash
# install with boto3 type annotations
python -m pip install 'boto3-stubs[elastictranscoder]'

# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'boto3-stubs-lite[elastictranscoder]'

# standalone installation
python -m pip install mypy-boto3-elastictranscoder
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `boto3-stubs[elastictranscoder]` in your environment:
  `python -m pip install 'boto3-stubs[elastictranscoder]'`

Both type checking and auto-complete should work for `ElasticTranscoder`
service. No explicit type annotations required, write your `boto3` code as
usual.

<a id="pycharm"></a>

### PyCharm

- Install `boto3-stubs[elastictranscoder]` in your environment:
  `python -m pip install 'boto3-stubs[elastictranscoder]'`

Both type checking and auto-complete should work for `ElasticTranscoder`
service. No explicit type annotations required, write your `boto3` code as
usual. Auto-complete can be slow on big projects or if you have a lot of
installed `boto3-stubs` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `boto3-stubs[elastictranscoder]` in your environment:
  `python -m pip install 'boto3-stubs[elastictranscoder]'`
- Run `mypy` as usual

Type checking should work for `ElasticTranscoder` service. No explicit type
annotations required, write your `boto3` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `boto3-stubs[elastictranscoder]` in your environment:
  `python -m pip install 'boto3-stubs[elastictranscoder]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `ElasticTranscoder` service. No explicit type
annotations required, write your `boto3` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`ElasticTranscoderClient` provides annotations for
`boto3.client("elastictranscoder")`.

```python
from boto3.session import Session

from mypy_boto3_elastictranscoder import ElasticTranscoderClient

client: ElasticTranscoderClient = Session().client("elastictranscoder")

# now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`mypy_boto3_elastictranscoder.paginator` module contains type annotations for
all paginators.

```python
from boto3.session import Session

from mypy_boto3_elastictranscoder import ElasticTranscoderClient
from mypy_boto3_elastictranscoder.paginator import (
    ListJobsByPipelinePaginator,
    ListJobsByStatusPaginator,
    ListPipelinesPaginator,
    ListPresetsPaginator,
)

client: ElasticTranscoderClient = Session().client("elastictranscoder")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
list_jobs_by_pipeline_paginator: ListJobsByPipelinePaginator = client.get_paginator("list_jobs_by_pipeline")
list_jobs_by_status_paginator: ListJobsByStatusPaginator = client.get_paginator("list_jobs_by_status")
list_pipelines_paginator: ListPipelinesPaginator = client.get_paginator("list_pipelines")
list_presets_paginator: ListPresetsPaginator = client.get_paginator("list_presets")
```

<a id="waiters-annotations"></a>

### Waiters annotations

`mypy_boto3_elastictranscoder.waiter` module contains type annotations for all
waiters.

```python
from boto3.session import Session

from mypy_boto3_elastictranscoder import ElasticTranscoderClient
from mypy_boto3_elastictranscoder.waiter import (
    JobCompleteWaiter,
)

client: ElasticTranscoderClient = Session().client("elastictranscoder")

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
# VSCode requires explicit type annotations
job_complete_waiter: JobCompleteWaiter = client.get_waiter("job_complete")
```

<a id="literals"></a>

### Literals

`mypy_boto3_elastictranscoder.literals` module contains literals extracted from
shapes that can be used in user code for type checking.

```python
from mypy_boto3_elastictranscoder.literals import (
    JobCompleteWaiterName,
    ListJobsByPipelinePaginatorName,
    ListJobsByStatusPaginatorName,
    ListPipelinesPaginatorName,
    ListPresetsPaginatorName,
    ServiceName,
    PaginatorName,
    WaiterName,
)

def check_value(value: JobCompleteWaiterName) -> bool:
    ...
```

<a id="typed-dictionaries"></a>

### Typed dictionaries

`mypy_boto3_elastictranscoder.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from mypy_boto3_elastictranscoder.type_defs import (
    ArtworkTypeDef,
    AudioCodecOptionsTypeDef,
    AudioParametersTypeDef,
    CancelJobRequestRequestTypeDef,
    CaptionFormatTypeDef,
    CaptionSourceTypeDef,
    CaptionsTypeDef,
    ClipTypeDef,
    CreateJobOutputTypeDef,
    CreateJobPlaylistTypeDef,
    CreateJobRequestRequestTypeDef,
    CreateJobResponseTypeDef,
    CreatePipelineRequestRequestTypeDef,
    CreatePipelineResponseTypeDef,
    CreatePresetRequestRequestTypeDef,
    CreatePresetResponseTypeDef,
    DeletePipelineRequestRequestTypeDef,
    DeletePresetRequestRequestTypeDef,
    DetectedPropertiesTypeDef,
    EncryptionTypeDef,
    HlsContentProtectionTypeDef,
    InputCaptionsTypeDef,
    JobAlbumArtTypeDef,
    JobInputTypeDef,
    JobOutputTypeDef,
    JobTypeDef,
    JobWatermarkTypeDef,
    ListJobsByPipelineRequestRequestTypeDef,
    ListJobsByPipelineResponseTypeDef,
    ListJobsByStatusRequestRequestTypeDef,
    ListJobsByStatusResponseTypeDef,
    ListPipelinesRequestRequestTypeDef,
    ListPipelinesResponseTypeDef,
    ListPresetsRequestRequestTypeDef,
    ListPresetsResponseTypeDef,
    NotificationsTypeDef,
    PaginatorConfigTypeDef,
    PermissionTypeDef,
    PipelineOutputConfigTypeDef,
    PipelineTypeDef,
    PlayReadyDrmTypeDef,
    PlaylistTypeDef,
    PresetTypeDef,
    PresetWatermarkTypeDef,
    ReadJobRequestRequestTypeDef,
    ReadJobResponseTypeDef,
    ReadPipelineRequestRequestTypeDef,
    ReadPipelineResponseTypeDef,
    ReadPresetRequestRequestTypeDef,
    ReadPresetResponseTypeDef,
    ResponseMetadataTypeDef,
    TestRoleRequestRequestTypeDef,
    TestRoleResponseTypeDef,
    ThumbnailsTypeDef,
    TimeSpanTypeDef,
    TimingTypeDef,
    UpdatePipelineNotificationsRequestRequestTypeDef,
    UpdatePipelineNotificationsResponseTypeDef,
    UpdatePipelineRequestRequestTypeDef,
    UpdatePipelineResponseTypeDef,
    UpdatePipelineStatusRequestRequestTypeDef,
    UpdatePipelineStatusResponseTypeDef,
    VideoParametersTypeDef,
    WaiterConfigTypeDef,
    WarningTypeDef,
)

def get_structure() -> ArtworkTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`mypy-boto3-elastictranscoder` version is the same as related `boto3` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[mypy-boto3-elastictranscoder docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_elastictranscoder/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


