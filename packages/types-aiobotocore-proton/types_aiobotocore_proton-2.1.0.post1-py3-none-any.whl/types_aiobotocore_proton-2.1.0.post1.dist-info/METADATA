Metadata-Version: 2.1
Name: types-aiobotocore-proton
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.Proton 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore proton type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-proton"></a>

# mypy-boto3-proton

[![PyPI - types-aiobotocore-proton](https://img.shields.io/pypi/v/types-aiobotocore-proton.svg?color=blue)](https://pypi.org/project/types-aiobotocore-proton)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-proton.svg?color=blue)](https://pypi.org/project/types-aiobotocore-proton)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-proton?color=blue)](https://pypistats.org/packages/types-aiobotocore-proton)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.Proton 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/proton.html#Proton)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-proton docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_proton/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-proton](#mypy-boto3-proton)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `Proton`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `Proton` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[proton]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[proton]'

# standalone installation
python -m pip install types-aiobotocore-proton
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[proton]` in your environment:
  `python -m pip install 'types-aiobotocore[proton]'`

Both type checking and auto-complete should work for `Proton` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[proton]` in your environment:
  `python -m pip install 'types-aiobotocore[proton]'`

Both type checking and auto-complete should work for `Proton` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[proton]` in your environment:
  `python -m pip install 'types-aiobotocore[proton]'`
- Run `mypy` as usual

Type checking should work for `Proton` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[proton]` in your environment:
  `python -m pip install 'types-aiobotocore[proton]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `Proton` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`ProtonClient` provides annotations for `session.create_client("proton")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_proton import ProtonClient

session = get_session()
async with session.create_client("proton") as client:
    client: ProtonClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_proton.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_proton import ProtonClient
from types_aiobotocore_proton.paginator import (
    ListEnvironmentAccountConnectionsPaginator,
    ListEnvironmentOutputsPaginator,
    ListEnvironmentProvisionedResourcesPaginator,
    ListEnvironmentTemplateVersionsPaginator,
    ListEnvironmentTemplatesPaginator,
    ListEnvironmentsPaginator,
    ListRepositoriesPaginator,
    ListRepositorySyncDefinitionsPaginator,
    ListServiceInstanceOutputsPaginator,
    ListServiceInstanceProvisionedResourcesPaginator,
    ListServiceInstancesPaginator,
    ListServicePipelineOutputsPaginator,
    ListServicePipelineProvisionedResourcesPaginator,
    ListServiceTemplateVersionsPaginator,
    ListServiceTemplatesPaginator,
    ListServicesPaginator,
    ListTagsForResourcePaginator,
)

session = get_session()
async with session.create_client("proton") as client:
    client: ProtonClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_environment_account_connections_paginator: ListEnvironmentAccountConnectionsPaginator = client.get_paginator("list_environment_account_connections")
        list_environment_outputs_paginator: ListEnvironmentOutputsPaginator = client.get_paginator("list_environment_outputs")
        list_environment_provisioned_resources_paginator: ListEnvironmentProvisionedResourcesPaginator = client.get_paginator("list_environment_provisioned_resources")
        list_environment_template_versions_paginator: ListEnvironmentTemplateVersionsPaginator = client.get_paginator("list_environment_template_versions")
        list_environment_templates_paginator: ListEnvironmentTemplatesPaginator = client.get_paginator("list_environment_templates")
        list_environments_paginator: ListEnvironmentsPaginator = client.get_paginator("list_environments")
        list_repositories_paginator: ListRepositoriesPaginator = client.get_paginator("list_repositories")
        list_repository_sync_definitions_paginator: ListRepositorySyncDefinitionsPaginator = client.get_paginator("list_repository_sync_definitions")
        list_service_instance_outputs_paginator: ListServiceInstanceOutputsPaginator = client.get_paginator("list_service_instance_outputs")
        list_service_instance_provisioned_resources_paginator: ListServiceInstanceProvisionedResourcesPaginator = client.get_paginator("list_service_instance_provisioned_resources")
        list_service_instances_paginator: ListServiceInstancesPaginator = client.get_paginator("list_service_instances")
        list_service_pipeline_outputs_paginator: ListServicePipelineOutputsPaginator = client.get_paginator("list_service_pipeline_outputs")
        list_service_pipeline_provisioned_resources_paginator: ListServicePipelineProvisionedResourcesPaginator = client.get_paginator("list_service_pipeline_provisioned_resources")
        list_service_template_versions_paginator: ListServiceTemplateVersionsPaginator = client.get_paginator("list_service_template_versions")
        list_service_templates_paginator: ListServiceTemplatesPaginator = client.get_paginator("list_service_templates")
        list_services_paginator: ListServicesPaginator = client.get_paginator("list_services")
        list_tags_for_resource_paginator: ListTagsForResourcePaginator = client.get_paginator("list_tags_for_resource")
    ```


### Waiters annotations

`types_aiobotocore_proton.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_proton.client import ProtonClient
from types_aiobotocore_proton.waiter import (
    EnvironmentDeployedWaiter,
    EnvironmentTemplateVersionRegisteredWaiter,
    ServiceCreatedWaiter,
    ServiceDeletedWaiter,
    ServiceInstanceDeployedWaiter,
    ServicePipelineDeployedWaiter,
    ServiceTemplateVersionRegisteredWaiter,
    ServiceUpdatedWaiter,
)

session = get_session()
async with session.create_client("proton") as client:
    client: ProtonClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        environment_deployed_waiter: EnvironmentDeployedWaiter = client.get_waiter("environment_deployed")
        environment_template_version_registered_waiter: EnvironmentTemplateVersionRegisteredWaiter = client.get_waiter("environment_template_version_registered")
        service_created_waiter: ServiceCreatedWaiter = client.get_waiter("service_created")
        service_deleted_waiter: ServiceDeletedWaiter = client.get_waiter("service_deleted")
        service_instance_deployed_waiter: ServiceInstanceDeployedWaiter = client.get_waiter("service_instance_deployed")
        service_pipeline_deployed_waiter: ServicePipelineDeployedWaiter = client.get_waiter("service_pipeline_deployed")
        service_template_version_registered_waiter: ServiceTemplateVersionRegisteredWaiter = client.get_waiter("service_template_version_registered")
        service_updated_waiter: ServiceUpdatedWaiter = client.get_waiter("service_updated")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_proton.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_proton.literals import (
    DeploymentStatusType,
    DeploymentUpdateTypeType,
    EnvironmentAccountConnectionRequesterAccountTypeType,
    EnvironmentAccountConnectionStatusType,
    EnvironmentDeployedWaiterName,
    EnvironmentTemplateVersionRegisteredWaiterName,
    ListEnvironmentAccountConnectionsPaginatorName,
    ListEnvironmentOutputsPaginatorName,
    ListEnvironmentProvisionedResourcesPaginatorName,
    ListEnvironmentTemplateVersionsPaginatorName,
    ListEnvironmentTemplatesPaginatorName,
    ListEnvironmentsPaginatorName,
    ListRepositoriesPaginatorName,
    ListRepositorySyncDefinitionsPaginatorName,
    ListServiceInstanceOutputsPaginatorName,
    ListServiceInstanceProvisionedResourcesPaginatorName,
    ListServiceInstancesPaginatorName,
    ListServicePipelineOutputsPaginatorName,
    ListServicePipelineProvisionedResourcesPaginatorName,
    ListServiceTemplateVersionsPaginatorName,
    ListServiceTemplatesPaginatorName,
    ListServicesPaginatorName,
    ListTagsForResourcePaginatorName,
    ProvisionedResourceEngineType,
    ProvisioningType,
    RepositoryProviderType,
    RepositorySyncStatusType,
    ResourceDeploymentStatusType,
    ResourceSyncStatusType,
    ServiceCreatedWaiterName,
    ServiceDeletedWaiterName,
    ServiceInstanceDeployedWaiterName,
    ServicePipelineDeployedWaiterName,
    ServiceStatusType,
    ServiceTemplateVersionRegisteredWaiterName,
    ServiceUpdatedWaiterName,
    SyncTypeType,
    TemplateTypeType,
    TemplateVersionStatusType,
    ServiceName,
    PaginatorName,
    WaiterName,
)

def check_value(value: DeploymentStatusType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_proton.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_proton.type_defs import (
    AcceptEnvironmentAccountConnectionInputRequestTypeDef,
    AcceptEnvironmentAccountConnectionOutputTypeDef,
    AccountSettingsTypeDef,
    CancelEnvironmentDeploymentInputRequestTypeDef,
    CancelEnvironmentDeploymentOutputTypeDef,
    CancelServiceInstanceDeploymentInputRequestTypeDef,
    CancelServiceInstanceDeploymentOutputTypeDef,
    CancelServicePipelineDeploymentInputRequestTypeDef,
    CancelServicePipelineDeploymentOutputTypeDef,
    CompatibleEnvironmentTemplateInputTypeDef,
    CompatibleEnvironmentTemplateTypeDef,
    CreateEnvironmentAccountConnectionInputRequestTypeDef,
    CreateEnvironmentAccountConnectionOutputTypeDef,
    CreateEnvironmentInputRequestTypeDef,
    CreateEnvironmentOutputTypeDef,
    CreateEnvironmentTemplateInputRequestTypeDef,
    CreateEnvironmentTemplateOutputTypeDef,
    CreateEnvironmentTemplateVersionInputRequestTypeDef,
    CreateEnvironmentTemplateVersionOutputTypeDef,
    CreateRepositoryInputRequestTypeDef,
    CreateRepositoryOutputTypeDef,
    CreateServiceInputRequestTypeDef,
    CreateServiceOutputTypeDef,
    CreateServiceTemplateInputRequestTypeDef,
    CreateServiceTemplateOutputTypeDef,
    CreateServiceTemplateVersionInputRequestTypeDef,
    CreateServiceTemplateVersionOutputTypeDef,
    CreateTemplateSyncConfigInputRequestTypeDef,
    CreateTemplateSyncConfigOutputTypeDef,
    DeleteEnvironmentAccountConnectionInputRequestTypeDef,
    DeleteEnvironmentAccountConnectionOutputTypeDef,
    DeleteEnvironmentInputRequestTypeDef,
    DeleteEnvironmentOutputTypeDef,
    DeleteEnvironmentTemplateInputRequestTypeDef,
    DeleteEnvironmentTemplateOutputTypeDef,
    DeleteEnvironmentTemplateVersionInputRequestTypeDef,
    DeleteEnvironmentTemplateVersionOutputTypeDef,
    DeleteRepositoryInputRequestTypeDef,
    DeleteRepositoryOutputTypeDef,
    DeleteServiceInputRequestTypeDef,
    DeleteServiceOutputTypeDef,
    DeleteServiceTemplateInputRequestTypeDef,
    DeleteServiceTemplateOutputTypeDef,
    DeleteServiceTemplateVersionInputRequestTypeDef,
    DeleteServiceTemplateVersionOutputTypeDef,
    DeleteTemplateSyncConfigInputRequestTypeDef,
    DeleteTemplateSyncConfigOutputTypeDef,
    EnvironmentAccountConnectionSummaryTypeDef,
    EnvironmentAccountConnectionTypeDef,
    EnvironmentSummaryTypeDef,
    EnvironmentTemplateFilterTypeDef,
    EnvironmentTemplateSummaryTypeDef,
    EnvironmentTemplateTypeDef,
    EnvironmentTemplateVersionSummaryTypeDef,
    EnvironmentTemplateVersionTypeDef,
    EnvironmentTypeDef,
    GetAccountSettingsOutputTypeDef,
    GetEnvironmentAccountConnectionInputRequestTypeDef,
    GetEnvironmentAccountConnectionOutputTypeDef,
    GetEnvironmentInputRequestTypeDef,
    GetEnvironmentOutputTypeDef,
    GetEnvironmentTemplateInputRequestTypeDef,
    GetEnvironmentTemplateOutputTypeDef,
    GetEnvironmentTemplateVersionInputRequestTypeDef,
    GetEnvironmentTemplateVersionOutputTypeDef,
    GetRepositoryInputRequestTypeDef,
    GetRepositoryOutputTypeDef,
    GetRepositorySyncStatusInputRequestTypeDef,
    GetRepositorySyncStatusOutputTypeDef,
    GetServiceInputRequestTypeDef,
    GetServiceInstanceInputRequestTypeDef,
    GetServiceInstanceOutputTypeDef,
    GetServiceOutputTypeDef,
    GetServiceTemplateInputRequestTypeDef,
    GetServiceTemplateOutputTypeDef,
    GetServiceTemplateVersionInputRequestTypeDef,
    GetServiceTemplateVersionOutputTypeDef,
    GetTemplateSyncConfigInputRequestTypeDef,
    GetTemplateSyncConfigOutputTypeDef,
    GetTemplateSyncStatusInputRequestTypeDef,
    GetTemplateSyncStatusOutputTypeDef,
    ListEnvironmentAccountConnectionsInputRequestTypeDef,
    ListEnvironmentAccountConnectionsOutputTypeDef,
    ListEnvironmentOutputsInputRequestTypeDef,
    ListEnvironmentOutputsOutputTypeDef,
    ListEnvironmentProvisionedResourcesInputRequestTypeDef,
    ListEnvironmentProvisionedResourcesOutputTypeDef,
    ListEnvironmentTemplateVersionsInputRequestTypeDef,
    ListEnvironmentTemplateVersionsOutputTypeDef,
    ListEnvironmentTemplatesInputRequestTypeDef,
    ListEnvironmentTemplatesOutputTypeDef,
    ListEnvironmentsInputRequestTypeDef,
    ListEnvironmentsOutputTypeDef,
    ListRepositoriesInputRequestTypeDef,
    ListRepositoriesOutputTypeDef,
    ListRepositorySyncDefinitionsInputRequestTypeDef,
    ListRepositorySyncDefinitionsOutputTypeDef,
    ListServiceInstanceOutputsInputRequestTypeDef,
    ListServiceInstanceOutputsOutputTypeDef,
    ListServiceInstanceProvisionedResourcesInputRequestTypeDef,
    ListServiceInstanceProvisionedResourcesOutputTypeDef,
    ListServiceInstancesInputRequestTypeDef,
    ListServiceInstancesOutputTypeDef,
    ListServicePipelineOutputsInputRequestTypeDef,
    ListServicePipelineOutputsOutputTypeDef,
    ListServicePipelineProvisionedResourcesInputRequestTypeDef,
    ListServicePipelineProvisionedResourcesOutputTypeDef,
    ListServiceTemplateVersionsInputRequestTypeDef,
    ListServiceTemplateVersionsOutputTypeDef,
    ListServiceTemplatesInputRequestTypeDef,
    ListServiceTemplatesOutputTypeDef,
    ListServicesInputRequestTypeDef,
    ListServicesOutputTypeDef,
    ListTagsForResourceInputRequestTypeDef,
    ListTagsForResourceOutputTypeDef,
    NotifyResourceDeploymentStatusChangeInputRequestTypeDef,
    OutputTypeDef,
    PaginatorConfigTypeDef,
    ProvisionedResourceTypeDef,
    RejectEnvironmentAccountConnectionInputRequestTypeDef,
    RejectEnvironmentAccountConnectionOutputTypeDef,
    RepositoryBranchInputTypeDef,
    RepositoryBranchTypeDef,
    RepositorySummaryTypeDef,
    RepositorySyncAttemptTypeDef,
    RepositorySyncDefinitionTypeDef,
    RepositorySyncEventTypeDef,
    RepositoryTypeDef,
    ResourceSyncAttemptTypeDef,
    ResourceSyncEventTypeDef,
    ResponseMetadataTypeDef,
    RevisionTypeDef,
    S3ObjectSourceTypeDef,
    ServiceInstanceSummaryTypeDef,
    ServiceInstanceTypeDef,
    ServicePipelineTypeDef,
    ServiceSummaryTypeDef,
    ServiceTemplateSummaryTypeDef,
    ServiceTemplateTypeDef,
    ServiceTemplateVersionSummaryTypeDef,
    ServiceTemplateVersionTypeDef,
    ServiceTypeDef,
    TagResourceInputRequestTypeDef,
    TagTypeDef,
    TemplateSyncConfigTypeDef,
    TemplateVersionSourceInputTypeDef,
    UntagResourceInputRequestTypeDef,
    UpdateAccountSettingsInputRequestTypeDef,
    UpdateAccountSettingsOutputTypeDef,
    UpdateEnvironmentAccountConnectionInputRequestTypeDef,
    UpdateEnvironmentAccountConnectionOutputTypeDef,
    UpdateEnvironmentInputRequestTypeDef,
    UpdateEnvironmentOutputTypeDef,
    UpdateEnvironmentTemplateInputRequestTypeDef,
    UpdateEnvironmentTemplateOutputTypeDef,
    UpdateEnvironmentTemplateVersionInputRequestTypeDef,
    UpdateEnvironmentTemplateVersionOutputTypeDef,
    UpdateServiceInputRequestTypeDef,
    UpdateServiceInstanceInputRequestTypeDef,
    UpdateServiceInstanceOutputTypeDef,
    UpdateServiceOutputTypeDef,
    UpdateServicePipelineInputRequestTypeDef,
    UpdateServicePipelineOutputTypeDef,
    UpdateServiceTemplateInputRequestTypeDef,
    UpdateServiceTemplateOutputTypeDef,
    UpdateServiceTemplateVersionInputRequestTypeDef,
    UpdateServiceTemplateVersionOutputTypeDef,
    UpdateTemplateSyncConfigInputRequestTypeDef,
    UpdateTemplateSyncConfigOutputTypeDef,
    WaiterConfigTypeDef,
)

def get_structure() -> AcceptEnvironmentAccountConnectionInputRequestTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`types-aiobotocore-proton` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[types-aiobotocore-proton docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_proton/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


