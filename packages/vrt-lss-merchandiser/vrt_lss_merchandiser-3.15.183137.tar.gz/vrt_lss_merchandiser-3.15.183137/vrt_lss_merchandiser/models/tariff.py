# coding: utf-8

"""
    Veeroute.Merchandiser

    Veeroute Merchandiser API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_merchandiser.configuration import Configuration


class Tariff(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'basic': 'TariffPrimary',
        'extra': 'list[TariffPrimary]'
    }

    attribute_map = {
        'basic': 'basic',
        'extra': 'extra'
    }

    def __init__(self, basic=None, extra=None, local_vars_configuration=None):  # noqa: E501
        """Tariff - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._basic = None
        self._extra = None
        self.discriminator = None

        self.basic = basic
        if extra is not None:
            self.extra = extra

    @property
    def basic(self):
        """Gets the basic of this Tariff.  # noqa: E501


        :return: The basic of this Tariff.  # noqa: E501
        :rtype: TariffPrimary
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this Tariff.


        :param basic: The basic of this Tariff.  # noqa: E501
        :type basic: TariffPrimary
        """

        self._basic = basic

    @property
    def extra(self):
        """Gets the extra of this Tariff.  # noqa: E501

        Additional billing used for overtime work. It can be presented as several stages: for each stage of processing, it is possible to specify its own payment rate. Each stage is determined by the length and mileage from the previous one (the first from the basic tariff).   # noqa: E501

        :return: The extra of this Tariff.  # noqa: E501
        :rtype: list[TariffPrimary]
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Tariff.

        Additional billing used for overtime work. It can be presented as several stages: for each stage of processing, it is possible to specify its own payment rate. Each stage is determined by the length and mileage from the previous one (the first from the basic tariff).   # noqa: E501

        :param extra: The extra of this Tariff.  # noqa: E501
        :type extra: list[TariffPrimary]
        """
        if (self.local_vars_configuration.client_side_validation and
                extra is not None and len(extra) > 10):
            raise ValueError("Invalid value for `extra`, number of items must be less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                extra is not None and len(extra) < 0):
            raise ValueError("Invalid value for `extra`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._extra = extra

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tariff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tariff):
            return True

        return self.to_dict() != other.to_dict()
