# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/csg_40_verif_extractions_casd.ipynb (unless otherwise specified).

__all__ = ["read_copule", "copule_to_df", "copule_to_df_mean_rk", "sum_copule_col"]

# Cell
import pandas as pd

# Cell


def read_copule(filepath):
    # On charge notre distribution de RFR et de Rk
    with open(filepath) as fichier:
        contenu = fichier.read()
        dictionnaire_fichier = eval(contenu)
    return dictionnaire_fichier


# Cell


def copule_to_df(copule, sub_bucket_id):
    """
    ::copule:: Le contenu brut du copule
    ::sub_bucket_id:: 0 : Nombre de personne, 1 : somme de Var, -1 : moyenne
    """
    out = []
    for bucket in copule:
        out_dict = {
            "lower_bound": bucket["lower_bound"],
            "upper_bound": bucket["upper_bound"],
            "nb_people_zero": bucket["nb_people"]["zero"],
            "nb_people_nonzero": bucket["nb_people"]["nonzero"],
        }
        for i, sub_bucket in enumerate(bucket["nonzerobuckets"]):
            if sub_bucket_id < 0:
                out_dict[i] = sub_bucket[1] / sub_bucket[0]
            else:
                out_dict[i] = sub_bucket[sub_bucket_id]
        out.append(out_dict)
    df = pd.DataFrame(out)
    return df


# Cell


def copule_to_df_mean_rk(copule):
    out = []
    for bucket in copule:
        for i, sub_bucket in enumerate(bucket["nonzerobuckets"]):
            out_dict = {
                "lower_rfr": bucket["lower_bound"],
                "mean_rk": sub_bucket[1] / sub_bucket[0],
            }
            out.append(out_dict)
    df = pd.DataFrame(out)
    return df


# Cell


def sum_copule_col(row):
    """
    Somme toute les colonnes de VAr d'un bucket
    """
    sum = 0
    for i in range(99 + 1):
        sum += row[i]
    return sum
