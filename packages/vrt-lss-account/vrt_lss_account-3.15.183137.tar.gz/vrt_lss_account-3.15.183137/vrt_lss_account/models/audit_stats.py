# coding: utf-8

"""
    Veeroute.Account

    Veeroute Account Panel  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_account.configuration import Configuration


class AuditStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'overall': 'DetailedAuditStats',
        'filter': 'DetailedAuditStats'
    }

    attribute_map = {
        'overall': 'overall',
        'filter': 'filter'
    }

    def __init__(self, overall=None, filter=None, local_vars_configuration=None):  # noqa: E501
        """AuditStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._overall = None
        self._filter = None
        self.discriminator = None

        self.overall = overall
        self.filter = filter

    @property
    def overall(self):
        """Gets the overall of this AuditStats.  # noqa: E501


        :return: The overall of this AuditStats.  # noqa: E501
        :rtype: DetailedAuditStats
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this AuditStats.


        :param overall: The overall of this AuditStats.  # noqa: E501
        :type overall: DetailedAuditStats
        """
        if self.local_vars_configuration.client_side_validation and overall is None:  # noqa: E501
            raise ValueError("Invalid value for `overall`, must not be `None`")  # noqa: E501

        self._overall = overall

    @property
    def filter(self):
        """Gets the filter of this AuditStats.  # noqa: E501


        :return: The filter of this AuditStats.  # noqa: E501
        :rtype: DetailedAuditStats
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this AuditStats.


        :param filter: The filter of this AuditStats.  # noqa: E501
        :type filter: DetailedAuditStats
        """
        if self.local_vars_configuration.client_side_validation and filter is None:  # noqa: E501
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditStats):
            return True

        return self.to_dict() != other.to_dict()
