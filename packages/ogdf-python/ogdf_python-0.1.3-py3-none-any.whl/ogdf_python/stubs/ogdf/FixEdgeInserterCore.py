# file stubs/ogdf/FixEdgeInserterCore.py generated from classogdf_1_1_fix_edge_inserter_core
import enum
from typing import *
from ogdf_python import ogdf, cpp
std = cpp.std
class FixEdgeInserterCore(ogdf.Timeouter):

	m_delFaces : FaceSet[ False ] = ...

	#: (Extended) dual graph, constructed/destructed during call.
	m_dual : Graph = ...

	m_newFaces : FaceSet[ False ] = ...

	#: The node in dual corresponding to face in primal.
	m_nodeOf : FaceArray[node] = ...

	m_pCost : EdgeArray[  int ] = ...

	m_pForbidden : EdgeArray[ bool ] = ...

	m_pr : PlanRepLight = ...

	#: Adjacency entry in primal graph corresponding to edge in dual.
	m_primalAdj : EdgeArray[adjEntry] = ...

	m_pSubgraph : EdgeArray[  int ] = ...

	#: Runs of remove-reinsert method.
	m_runsPostprocessing : int = ...

	#: The node in extended dual representing s.
	m_vS : node = ...

	#: The node in extended dual representing t.
	m_vT : node = ...

	def __init__(self, pr : PlanRepLight, pCostOrig : EdgeArray[  int ], pForbiddenOrig : EdgeArray[ bool ], pEdgeSubgraphs : EdgeArray[  int ]) -> None:
		...

	def __destruct__(self) -> None:
		...

	def call(self, origEdges : Array[edge], keepEmbedding : bool, rrPost : RemoveReinsertType, percentMostCrossed : float) -> Module.ReturnType:
		...

	def runsPostprocessing(self) -> int:
		...

	@overload
	def appendCandidates(self, nodesAtDist : Array[SListPure[edge] ], costDual : EdgeArray[  int ], maxCost : int, v : node, currentDist : int) -> None:
		...

	@overload
	def appendCandidates(self, queue : QueuePure[edge], v : node) -> None:
		...

	def cleanup(self) -> None:
		...

	def constructDual(self, E : CombinatorialEmbedding) -> None:
		...

	def costCrossed(self, eOrig : edge) -> int:
		...

	def findShortestPath(self, E : CombinatorialEmbedding, eOrig : edge, crossed : SList[adjEntry]) -> None:
		...

	def findWeightedShortestPath(self, E : CombinatorialEmbedding, eOrig : edge, crossed : SList[adjEntry]) -> None:
		...

	def getCost(self, e : edge, stSubGraph : int) -> int:
		...

	def init(self, E : CombinatorialEmbedding) -> None:
		...

	def insertEdge(self, E : CombinatorialEmbedding, eOrig : edge, crossed : SList[adjEntry]) -> None:
		...

	def insertEdgesIntoDual(self, E : CombinatorialEmbedding, adjSrc : adjEntry) -> None:
		...

	def insertEdgesIntoDualAfterRemove(self, E : CombinatorialEmbedding, f : face) -> None:
		...

	def removeEdge(self, E : CombinatorialEmbedding, eOrig : edge) -> None:
		...

	def storeTypeOfCurrentEdge(self, eOrig : edge) -> None:
		...
