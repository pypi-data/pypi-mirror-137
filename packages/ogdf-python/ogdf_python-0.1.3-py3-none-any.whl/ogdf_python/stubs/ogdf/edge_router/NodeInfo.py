# file stubs/ogdf/edge_router/NodeInfo.py generated from classogdf_1_1edge__router_1_1_node_info
import enum
from typing import *
from ogdf_python import ogdf, cpp
std = cpp.std
class NodeInfo(object):

	@overload
	def __init__(self) -> None:
		...

	@overload
	def __init__(self, _ : NodeInfo) -> None:
		...

	@overload
	def __init__(self, other : NodeInfo) -> None:
		...

	@overload
	def __init__(self, H : OrthoRep, L : GridLayout, v : node, adj : adjEntry, rc : RoutingChannel[  int ], nw : NodeArray[  int ], nh : NodeArray[  int ]) -> None:
		...

	def __destruct__(self) -> None:
		...

	def b_left_unbend(self) -> int:
		...

	def b_right_unbend(self) -> int:
		...

	def cageCoord(self, bs : OrthoDir) -> int:
		"""Returns nodecageside coordinates (expanded size)"""
		...

	def cageSize(self, od : OrthoDir) -> int:
		...

	def compute_cage_size(self) -> None:
		"""compute the size of the cage face and the node box"""
		...

	def coord(self, bs : OrthoDir) -> int:
		"""Returns nodeboxside coordinates (real size)"""
		...

	def coordDistance(self, bs : OrthoDir) -> int:
		...

	def delta(self, mainside : OrthoDir, neighbour : OrthoDir) -> int:
		...

	def eps(self, mainside : OrthoDir, neighbour : OrthoDir) -> int:
		...

	def firstAdj(self) -> adjEntry:
		...

	def flips(self, s1 : OrthoDir, s2 : OrthoDir) -> int:
		...

	def gen_pos(self, od : OrthoDir) -> int:
		...

	def get_data(self, O : OrthoRep, L : GridLayout, v : node, rc : RoutingChannel[  int ], nw : NodeArray[  int ], nh : NodeArray[  int ]) -> None:
		...

	def has_gen(self, od : OrthoDir) -> bool:
		...

	def inc_E(self, s_from : OrthoDir, s_to : OrthoDir, num : int = 1) -> None:
		...

	def inc_E_hook(self, s_from : OrthoDir, s_to : OrthoDir, num : int = 1) -> None:
		...

	def init(self) -> None:
		...

	def inList(self, bs : OrthoDir) -> List[edge]:
		...

	def inPoint(self, bs : OrthoDir) -> List[ bool ]:
		...

	def is_in_edge(self, od : OrthoDir, pos : int) -> bool:
		...

	def l_lower_unbend(self) -> int:
		...

	def l_upper_unbend(self) -> int:
		...

	def node_xsize(self) -> int:
		...

	def node_ysize(self) -> int:
		...

	def nodeSize(self, od : OrthoDir) -> int:
		...

	def num_bend_edges(self, s1 : OrthoDir, sneighbour : OrthoDir) -> int:
		...

	def num_bend_free(self, s : OrthoDir) -> int:
		...

	def num_bend_free_increment(self, s : OrthoDir) -> None:
		...

	def num_edges(self, od : OrthoDir) -> int:
		...

	def num_routable(self, s_from : OrthoDir, s_to : OrthoDir) -> int:
		...

	def __assign__(self, _ : NodeInfo) -> NodeInfo:
		...

	def r_lower_unbend(self) -> int:
		...

	def r_upper_unbend(self) -> int:
		...

	def rc(self, od : OrthoDir) -> int:
		"""Returns routing channel size."""
		...

	def set_b_left(self, d : int) -> None:
		...

	def set_b_right(self, d : int) -> None:
		...

	def set_coord(self, bs : OrthoDir, co : int) -> None:
		...

	def set_delta(self, bside : OrthoDir, bneighbour : OrthoDir, dval : int) -> None:
		...

	def set_eps(self, mainside : OrthoDir, neighbour : OrthoDir, dval : int) -> None:
		...

	def set_gen_pos(self, od : OrthoDir, pos : int) -> None:
		"""set position of generalization on each side"""
		...

	def set_l_lower(self, d : int) -> None:
		...

	def set_l_upper(self, d : int) -> None:
		...

	def set_num_edges(self, od : OrthoDir, num : int) -> None:
		...

	def set_r_lower(self, d : int) -> None:
		...

	def set_r_upper(self, d : int) -> None:
		...

	def set_t_left(self, d : int) -> None:
		...

	def set_t_right(self, d : int) -> None:
		...

	def setCageCoord(self, bs : OrthoDir, co : int) -> None:
		...

	def t_left_unbend(self) -> int:
		...

	def t_right_unbend(self) -> int:
		...

	def vDegree(self) -> int:
		...
