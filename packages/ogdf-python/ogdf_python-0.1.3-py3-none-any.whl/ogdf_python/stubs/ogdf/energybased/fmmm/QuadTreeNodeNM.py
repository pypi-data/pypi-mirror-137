# file stubs/ogdf/energybased/fmmm/QuadTreeNodeNM.py generated from classogdf_1_1energybased_1_1fmmm_1_1_quad_tree_node_n_m
import enum
from typing import *
from ogdf_python import ogdf, cpp
std = cpp.std
class QuadTreeNodeNM(object):

	"""Helping data structure that stores the information needed to represent a node of the reduced quad tree in the New Multipole Method (NMM)."""

	def __init__(self) -> None:
		"""constructor"""
		...

	def __destruct__(self) -> None:
		"""destructor"""
		...

	def child_lb_exists(self) -> bool:
		...

	def child_lt_exists(self) -> bool:
		...

	def child_rb_exists(self) -> bool:
		...

	def child_rt_exists(self) -> bool:
		...

	def contained_nodes_empty(self) -> bool:
		...

	def get_child_lb_ptr(self) -> QuadTreeNodeNM:
		...

	def get_child_lt_ptr(self) -> QuadTreeNodeNM:
		...

	def get_child_rb_ptr(self) -> QuadTreeNodeNM:
		...

	def get_child_rt_ptr(self) -> QuadTreeNodeNM:
		...

	def get_contained_nodes(self, list : List[node]) -> None:
		...

	def get_D1(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def get_D2(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def get_father_ptr(self) -> QuadTreeNodeNM:
		...

	def get_I(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def get_local_exp(self) -> std.complex[ float ]:
		...

	def get_M(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def get_multipole_exp(self) -> std.complex[ float ]:
		...

	def get_particlenumber_in_subtree(self) -> int:
		...

	def get_Sm_boxlength(self) -> float:
		...

	def get_Sm_center(self) -> std.complex[ float ]:
		...

	def get_Sm_downleftcorner(self) -> DPoint:
		...

	def get_Sm_level(self) -> int:
		...

	def get_x_List_ptr(self) -> List[ParticleInfo]:
		...

	def get_y_List_ptr(self) -> List[ParticleInfo]:
		...

	def is_leaf(self) -> bool:
		...

	def is_root(self) -> bool:
		...

	def pop_contained_nodes(self) -> node:
		...

	def pushBack_contained_nodes(self, v : node) -> None:
		...

	def replace_multipole_exp(self, multi : Array[ std.complex[ float ] ], precision : int) -> None:
		"""ME[i] is set to multi[i] for i = 0 to precision and no space for LE is reserved."""
		...

	def set_child_lb_ptr(self, c : QuadTreeNodeNM) -> None:
		...

	def set_child_lt_ptr(self, c : QuadTreeNodeNM) -> None:
		...

	def set_child_rb_ptr(self, c : QuadTreeNodeNM) -> None:
		...

	def set_child_rt_ptr(self, c : QuadTreeNodeNM) -> None:
		...

	def set_contained_nodes(self, list : List[node]) -> None:
		...

	def set_D1(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def set_D2(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def set_father_ptr(self, f : QuadTreeNodeNM) -> None:
		...

	def set_I(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def set_locale_exp(self, local : Array[ std.complex[ float ] ], precision : int) -> None:
		"""LE[i] is set to local[i] for i = 0 to precision and space for LE is reserved."""
		...

	def set_M(self, list : List[QuadTreeNodeNM]) -> None:
		...

	def set_multipole_exp(self, multi : Array[ std.complex[ float ] ], precision : int) -> None:
		"""ME[i] is set to multi[i] for i = 0 to precision and space for LE is reserved."""
		...

	def set_particlenumber_in_subtree(self, p : int) -> None:
		...

	def set_Sm_boxlength(self, len : float) -> None:
		...

	def set_Sm_center(self, c : std.complex[ float ]) -> None:
		...

	def set_Sm_downleftcorner(self, dlc : DPoint) -> None:
		...

	def set_Sm_level(self, level : int) -> None:
		...

	def set_x_List_ptr(self, x_ptr : List[ParticleInfo]) -> None:
		...

	def set_y_List_ptr(self, y_ptr : List[ParticleInfo]) -> None:
		...
