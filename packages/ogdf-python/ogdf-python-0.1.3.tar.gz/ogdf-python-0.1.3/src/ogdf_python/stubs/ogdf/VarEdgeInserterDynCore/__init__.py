# file stubs/ogdf/VarEdgeInserterDynCore/__init__.py generated from classogdf_1_1_var_edge_inserter_dyn_core
import enum
from typing import *
from ogdf_python import ogdf, cpp
std = cpp.std
class VarEdgeInserterDynCore(ogdf.Timeouter):

	c_bigM : int = ...

	m_pBC : BCandSPQRtrees = ...

	m_pCost : EdgeArray[  int ] = ...

	m_pForbidden : EdgeArray[ bool ] = ...

	m_pr : PlanRepLight = ...

	m_pSubgraph : EdgeArray[  int ] = ...

	#: Runs of remove-reinsert method.
	m_runsPostprocessing : int = ...

	def __init__(self, pr : PlanRepLight, pCostOrig : EdgeArray[  int ], pForbiddenOrig : EdgeArray[ bool ], pEdgeSubgraphs : EdgeArray[  int ]) -> None:
		...

	def __destruct__(self) -> None:
		...

	def call(self, origEdges : Array[edge], rrPost : RemoveReinsertType, percentMostCrossed : float) -> Module.ReturnType:
		...

	def runsPostprocessing(self) -> int:
		...

	def blockInsert(self, s : node, t : node, L : List[adjEntry]) -> None:
		...

	def buildSubpath(self, v : node, vPred : node, vSucc : node, L : List[adjEntry], Exp : ExpandedGraph, s : node, t : node) -> None:
		...

	def costCrossed(self, eOrig : edge) -> int:
		...

	def createBCandSPQRtrees(self) -> BCandSPQRtrees:
		...

	def createExpandedGraph(self, BC : BCandSPQRtrees) -> ExpandedGraph:
		...

	def insert(self, eOrig : edge, eip : SList[adjEntry]) -> None:
		...

	def storeTypeOfCurrentEdge(self, eOrig : edge) -> None:
		...
