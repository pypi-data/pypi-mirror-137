# file stubs/ogdf/spring_embedder/MasterBase.py generated from classogdf_1_1spring__embedder_1_1_master_base
import enum
from typing import *
from ogdf_python import ogdf, cpp
std = cpp.std
NodeInfo = TypeVar('NodeInfo')

ForceModelBase = TypeVar('ForceModelBase')

class MasterBase(Generic[NodeInfo, ForceModelBase]):

	"""Common base class forogdf::SpringEmbedderExact::Masterandogdf::SpringEmbedderGridVariant::Master."""

	m_adjLists : Array[  int ] = ...

	m_avgDisplacement : float = ...

	m_barrier : Barrier = ...

	m_boundingBox : DPoint = ...

	m_cF : float = ...

	m_coolingFactor : float = ...

	m_disp : Array[DPoint] = ...

	m_forceModel : ForceModelBase = ...

	m_forceModelImprove : ForceModelBase = ...

	m_ga : GraphAttributes = ...

	m_gc : GraphCopy = ...

	m_idealEdgeLength : float = ...

	m_index : NodeArray[  int ] = ...

	m_maxDisplacement : float = ...

	m_scaleFactor : float = ...

	m_spring : SpringEmbedderBase = ...

	m_t : float = ...

	m_tNull : float = ...

	m_vInfo : Array[ NodeInfo ] = ...

	def __init__(self, spring : SpringEmbedderBase, gc : GraphCopy, ga : GraphAttributes, boundingBox : DPoint) -> None:
		...

	def __destruct__(self) -> None:
		...

	def adjLists(self) -> Array[  int ]:
		...

	def avgDisplacement(self) -> float:
		...

	def coolDown(self) -> None:
		...

	def coolingFactor(self) -> float:
		...

	def disp(self) -> Array[DPoint]:
		...

	def forceModel(self) -> ForceModelBase:
		...

	def forceModelImprove(self) -> ForceModelBase:
		...

	def getAttributes(self) -> GraphAttributes:
		...

	def getGraph(self) -> GraphCopy:
		...

	def hasConverged(self) -> bool:
		...

	def idealEdgeLength(self) -> float:
		...

	def index(self) -> NodeArray[  int ]:
		...

	def initImprovementPhase(self) -> None:
		...

	def initUnfoldPhase(self) -> None:
		...

	def maxDisplacement(self) -> float:
		...

	def maxForceLength(self) -> float:
		...

	def noise(self) -> bool:
		...

	def numberOfIterations(self) -> int:
		...

	def numberOfIterationsImprove(self) -> int:
		...

	def numberOfNodes(self) -> int:
		...

	def scaleFactor(self) -> float:
		...

	def syncThreads(self) -> None:
		...

	def vInfo(self) -> Array[ NodeInfo ]:
		...
