# file stubs/ogdf/VarEdgeInserterCore/ExpandedGraph.py generated from classogdf_1_1_var_edge_inserter_core_1_1_expanded_graph
import enum
from typing import *
from ogdf_python import ogdf, cpp
std = cpp.std
class ExpandedGraph(object):

	m_BC : BiconnectedComponent = ...

	m_dual : Graph = ...

	m_E : ConstCombinatorialEmbedding = ...

	m_eS : edge = ...

	m_eT : edge = ...

	m_exp : Graph = ...

	m_expToG : AdjEntryArray[adjEntry] = ...

	m_gc : GraphCopy = ...

	m_GtoExp : NodeArray[node] = ...

	m_nodesG : List[node] = ...

	m_pForbidden : EdgeArray[ bool ] = ...

	m_primalEdge : EdgeArray[adjEntry] = ...

	m_T : StaticSPQRTree = ...

	m_vS : node = ...

	m_vT : node = ...

	def __init__(self, BC : BiconnectedComponent, T : StaticSPQRTree, gc : GraphCopy, pForbidden : EdgeArray[ bool ] = None) -> None:
		...

	def __destruct__(self) -> None:
		...

	def constructDual(self, s : node, t : node) -> None:
		...

	def costDual(self, eDual : edge) -> int:
		...

	def expand(self, v : node, eIn : edge, eOut : edge) -> None:
		...

	def findShortestPath(self, L : List[adjEntry], eType : Graph.EdgeType = Graph.EdgeType.association) -> None:
		...

	def findWeightedShortestPath(self, L : List[adjEntry], eType : Graph.EdgeType = Graph.EdgeType.association) -> None:
		...

	@overload
	def appendCandidates(self, nodesAtDist : Array[SListPure[edge] ], maxCost : int, v : node, eType : Graph.EdgeType, currentDist : int) -> None:
		...

	@overload
	def appendCandidates(self, queue : List[edge], v : node, eType : Graph.EdgeType) -> None:
		...

	def expandSkeleton(self, v : node, e1 : edge, e2 : edge) -> None:
		...

	def insertEdge(self, vG : node, wG : node, eG : edge) -> edge:
		...

	def __assign__(self, _ : ExpandedGraph) -> ExpandedGraph:
		...
