// STIX2 LALR(1)
//
// The productions that TCEX cares about are ones that
// identify "is" or "in" indicators.  These indicator
// productions and their predecessor steps (ie the path)
// are the only production rules in place in the corresponding
// lark transformer, which is why the positive assertion rules
// in the prop_test production use -> indicator
// and -> indicator_list to identify which rules create
// indicators or indicator lists.
//
// Lark grammars prefix production rules with:
//   ? - to try to inline the rule -- helps keep the tree flat
//   ! - include literal terminals to the underlying production
//       which normally drop out (useful for timestamps, etc, where
//       the dropped out terminals are going to be put right back in)
//
// Important!  Lark enforces case on rules (lowercase) vs TERMINALS
// (uppercase)

pattern: "[" comparison_expression "]"

?comparison_expression: object_path EQ primitive_literal -> indicator

?object_path: object_type ":" first_path_component object_path_component?

?object_type: IDENTIFIER_WITHOUT_HYPHEN
    | IDENTIFIER_WITH_HYPHEN

?first_path_component: IDENTIFIER_WITHOUT_HYPHEN
    | STRING_LITERAL

?object_path_component: object_path_component object_path_component  -> path_step
    | "." (IDENTIFIER_WITHOUT_HYPHEN | STRING_LITERAL)     -> key_path_step
    | "[" (INT_POS_LITERAL|INT_NEG_LITERAL|"*") "]"         -> index_path_step

?primitive_literal: orderable_literal
    | bool_literal

?orderable_literal: INT_POS_LITERAL
    | INT_NEG_LITERAL
    | FLOAT_POS_LITERAL
    | FLOAT_NEG_LITERAL
    | STRING_LITERAL
    | binary_literal
    | hex_literal
    | timestamp_literal

DIGIT: "0".."9"
WHOLEDIGIT: "1".."9"
INT_NEG_LITERAL: "-" ("0" | WHOLEDIGIT DIGIT*)
INT_POS_LITERAL: "+"? ("0" | WHOLEDIGIT DIGIT*)
FLOAT_NEG_LITERAL: "-" DIGIT* "." DIGIT+
FLOAT_POS_LITERAL: "+"? DIGIT* "." DIGIT+

?hex_literal: "h" QUOTE TWO_HEX_DIGITS* QUOTE

?binary_literal: "b" QUOTE ( BASE64CHAR BASE64CHAR BASE64CHAR BASE64CHAR )* ( ( BASE64CHAR BASE64CHAR BASE64CHAR BASE64CHAR ) | ( BASE64CHAR BASE64CHAR BASE64CHAR ) "=" | ( BASE64CHAR BASE64CHAR ) "==") QUOTE

?bool_literal: "true"i | "false"i

!timestamp_literal: "t" QUOTE DIGIT DIGIT DIGIT DIGIT "-" ( ("0" WHOLEDIGIT) | ("1" /[012]/) ) "-" ( ("0" WHOLEDIGIT) | (/[12]/ DIGIT) | ("3" /[01]/) ) "T" ( (/[01]/ DIGIT) | ("2" /[0-3]/) ) ":" /[0-5]/ DIGIT  ":" (/[0-5]/ DIGIT | "60") ("." DIGIT+)? "Z" QUOTE

EQ: "=" | "=="
NEQ: "!=" | "<>"
GT: ">"
LT: "<"
GE: ">="
LE: "<="
NOT: /not/i
QUOTE: "'"
STRING_LITERAL: QUOTE _STRING_ESC_INNER QUOTE

IDENTIFIER_WITHOUT_HYPHEN: /[a-zA-Z_][a-zA-Z0-9_]*/
IDENTIFIER_WITH_HYPHEN: /[a-zA-Z_][a-zA-Z0-9_-]*/

HEXDIGIT: /[A-Fa-f0-9]/
TWO_HEX_DIGITS: HEXDIGIT HEXDIGIT
BASE64CHAR: /[A-Za-z0-9+\/]/

COMMENT:  /"/*" .*? "*/"/
LINE_COMMENT: /"//" ~[\r\n]/

%import common._STRING_ESC_INNER
%import common.WS
%ignore WS
%ignore COMMENT
%ignore LINE_COMMENT
