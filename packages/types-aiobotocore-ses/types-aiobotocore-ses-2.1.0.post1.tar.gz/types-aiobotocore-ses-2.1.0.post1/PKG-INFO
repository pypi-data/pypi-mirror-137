Metadata-Version: 2.1
Name: types-aiobotocore-ses
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.SES 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore ses type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="mypy-boto3-ses"></a>

# mypy-boto3-ses

[![PyPI - types-aiobotocore-ses](https://img.shields.io/pypi/v/types-aiobotocore-ses.svg?color=blue)](https://pypi.org/project/types-aiobotocore-ses)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-ses.svg?color=blue)](https://pypi.org/project/types-aiobotocore-ses)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-ses?color=blue)](https://pypistats.org/packages/types-aiobotocore-ses)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.SES 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-ses docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_ses/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-ses](#mypy-boto3-ses)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `SES`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `SES` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[ses]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[ses]'

# standalone installation
python -m pip install types-aiobotocore-ses
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[ses]` in your environment:
  `python -m pip install 'types-aiobotocore[ses]'`

Both type checking and auto-complete should work for `SES` service. No explicit
type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[ses]` in your environment:
  `python -m pip install 'types-aiobotocore[ses]'`

Both type checking and auto-complete should work for `SES` service. No explicit
type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[ses]` in your environment:
  `python -m pip install 'types-aiobotocore[ses]'`
- Run `mypy` as usual

Type checking should work for `SES` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[ses]` in your environment:
  `python -m pip install 'types-aiobotocore[ses]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `SES` service. No explicit type annotations
required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`SESClient` provides annotations for `session.create_client("ses")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_ses import SESClient

session = get_session()
async with session.create_client("ses") as client:
    client: SESClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_ses.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_ses import SESClient
from types_aiobotocore_ses.paginator import (
    ListConfigurationSetsPaginator,
    ListCustomVerificationEmailTemplatesPaginator,
    ListIdentitiesPaginator,
    ListReceiptRuleSetsPaginator,
    ListTemplatesPaginator,
)

session = get_session()
async with session.create_client("ses") as client:
    client: SESClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_configuration_sets_paginator: ListConfigurationSetsPaginator = client.get_paginator("list_configuration_sets")
        list_custom_verification_email_templates_paginator: ListCustomVerificationEmailTemplatesPaginator = client.get_paginator("list_custom_verification_email_templates")
        list_identities_paginator: ListIdentitiesPaginator = client.get_paginator("list_identities")
        list_receipt_rule_sets_paginator: ListReceiptRuleSetsPaginator = client.get_paginator("list_receipt_rule_sets")
        list_templates_paginator: ListTemplatesPaginator = client.get_paginator("list_templates")
    ```


### Waiters annotations

`types_aiobotocore_ses.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_ses.client import SESClient
from types_aiobotocore_ses.waiter import (
    IdentityExistsWaiter,
)

session = get_session()
async with session.create_client("ses") as client:
    client: SESClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        identity_exists_waiter: IdentityExistsWaiter = client.get_waiter("identity_exists")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_ses.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_ses.literals import (
    BehaviorOnMXFailureType,
    BounceTypeType,
    BulkEmailStatusType,
    ConfigurationSetAttributeType,
    CustomMailFromStatusType,
    DimensionValueSourceType,
    DsnActionType,
    EventTypeType,
    IdentityExistsWaiterName,
    IdentityTypeType,
    InvocationTypeType,
    ListConfigurationSetsPaginatorName,
    ListCustomVerificationEmailTemplatesPaginatorName,
    ListIdentitiesPaginatorName,
    ListReceiptRuleSetsPaginatorName,
    ListTemplatesPaginatorName,
    NotificationTypeType,
    ReceiptFilterPolicyType,
    SNSActionEncodingType,
    StopScopeType,
    TlsPolicyType,
    VerificationStatusType,
    ServiceName,
    PaginatorName,
    WaiterName,
)

def check_value(value: BehaviorOnMXFailureType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_ses.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_ses.type_defs import (
    AddHeaderActionTypeDef,
    BodyTypeDef,
    BounceActionTypeDef,
    BouncedRecipientInfoTypeDef,
    BulkEmailDestinationStatusTypeDef,
    BulkEmailDestinationTypeDef,
    CloneReceiptRuleSetRequestRequestTypeDef,
    CloudWatchDestinationTypeDef,
    CloudWatchDimensionConfigurationTypeDef,
    ConfigurationSetTypeDef,
    ContentTypeDef,
    CreateConfigurationSetEventDestinationRequestRequestTypeDef,
    CreateConfigurationSetRequestRequestTypeDef,
    CreateConfigurationSetTrackingOptionsRequestRequestTypeDef,
    CreateCustomVerificationEmailTemplateRequestRequestTypeDef,
    CreateReceiptFilterRequestRequestTypeDef,
    CreateReceiptRuleRequestRequestTypeDef,
    CreateReceiptRuleSetRequestRequestTypeDef,
    CreateTemplateRequestRequestTypeDef,
    CustomVerificationEmailTemplateTypeDef,
    DeleteConfigurationSetEventDestinationRequestRequestTypeDef,
    DeleteConfigurationSetRequestRequestTypeDef,
    DeleteConfigurationSetTrackingOptionsRequestRequestTypeDef,
    DeleteCustomVerificationEmailTemplateRequestRequestTypeDef,
    DeleteIdentityPolicyRequestRequestTypeDef,
    DeleteIdentityRequestRequestTypeDef,
    DeleteReceiptFilterRequestRequestTypeDef,
    DeleteReceiptRuleRequestRequestTypeDef,
    DeleteReceiptRuleSetRequestRequestTypeDef,
    DeleteTemplateRequestRequestTypeDef,
    DeleteVerifiedEmailAddressRequestRequestTypeDef,
    DeliveryOptionsTypeDef,
    DescribeActiveReceiptRuleSetResponseTypeDef,
    DescribeConfigurationSetRequestRequestTypeDef,
    DescribeConfigurationSetResponseTypeDef,
    DescribeReceiptRuleRequestRequestTypeDef,
    DescribeReceiptRuleResponseTypeDef,
    DescribeReceiptRuleSetRequestRequestTypeDef,
    DescribeReceiptRuleSetResponseTypeDef,
    DestinationTypeDef,
    EventDestinationTypeDef,
    ExtensionFieldTypeDef,
    GetAccountSendingEnabledResponseTypeDef,
    GetCustomVerificationEmailTemplateRequestRequestTypeDef,
    GetCustomVerificationEmailTemplateResponseTypeDef,
    GetIdentityDkimAttributesRequestRequestTypeDef,
    GetIdentityDkimAttributesResponseTypeDef,
    GetIdentityMailFromDomainAttributesRequestRequestTypeDef,
    GetIdentityMailFromDomainAttributesResponseTypeDef,
    GetIdentityNotificationAttributesRequestRequestTypeDef,
    GetIdentityNotificationAttributesResponseTypeDef,
    GetIdentityPoliciesRequestRequestTypeDef,
    GetIdentityPoliciesResponseTypeDef,
    GetIdentityVerificationAttributesRequestRequestTypeDef,
    GetIdentityVerificationAttributesResponseTypeDef,
    GetSendQuotaResponseTypeDef,
    GetSendStatisticsResponseTypeDef,
    GetTemplateRequestRequestTypeDef,
    GetTemplateResponseTypeDef,
    IdentityDkimAttributesTypeDef,
    IdentityMailFromDomainAttributesTypeDef,
    IdentityNotificationAttributesTypeDef,
    IdentityVerificationAttributesTypeDef,
    KinesisFirehoseDestinationTypeDef,
    LambdaActionTypeDef,
    ListConfigurationSetsRequestRequestTypeDef,
    ListConfigurationSetsResponseTypeDef,
    ListCustomVerificationEmailTemplatesRequestRequestTypeDef,
    ListCustomVerificationEmailTemplatesResponseTypeDef,
    ListIdentitiesRequestRequestTypeDef,
    ListIdentitiesResponseTypeDef,
    ListIdentityPoliciesRequestRequestTypeDef,
    ListIdentityPoliciesResponseTypeDef,
    ListReceiptFiltersResponseTypeDef,
    ListReceiptRuleSetsRequestRequestTypeDef,
    ListReceiptRuleSetsResponseTypeDef,
    ListTemplatesRequestRequestTypeDef,
    ListTemplatesResponseTypeDef,
    ListVerifiedEmailAddressesResponseTypeDef,
    MessageDsnTypeDef,
    MessageTagTypeDef,
    MessageTypeDef,
    PaginatorConfigTypeDef,
    PutConfigurationSetDeliveryOptionsRequestRequestTypeDef,
    PutIdentityPolicyRequestRequestTypeDef,
    RawMessageTypeDef,
    ReceiptActionTypeDef,
    ReceiptFilterTypeDef,
    ReceiptIpFilterTypeDef,
    ReceiptRuleSetMetadataTypeDef,
    ReceiptRuleTypeDef,
    RecipientDsnFieldsTypeDef,
    ReorderReceiptRuleSetRequestRequestTypeDef,
    ReputationOptionsTypeDef,
    ResponseMetadataTypeDef,
    S3ActionTypeDef,
    SNSActionTypeDef,
    SNSDestinationTypeDef,
    SendBounceRequestRequestTypeDef,
    SendBounceResponseTypeDef,
    SendBulkTemplatedEmailRequestRequestTypeDef,
    SendBulkTemplatedEmailResponseTypeDef,
    SendCustomVerificationEmailRequestRequestTypeDef,
    SendCustomVerificationEmailResponseTypeDef,
    SendDataPointTypeDef,
    SendEmailRequestRequestTypeDef,
    SendEmailResponseTypeDef,
    SendRawEmailRequestRequestTypeDef,
    SendRawEmailResponseTypeDef,
    SendTemplatedEmailRequestRequestTypeDef,
    SendTemplatedEmailResponseTypeDef,
    SetActiveReceiptRuleSetRequestRequestTypeDef,
    SetIdentityDkimEnabledRequestRequestTypeDef,
    SetIdentityFeedbackForwardingEnabledRequestRequestTypeDef,
    SetIdentityHeadersInNotificationsEnabledRequestRequestTypeDef,
    SetIdentityMailFromDomainRequestRequestTypeDef,
    SetIdentityNotificationTopicRequestRequestTypeDef,
    SetReceiptRulePositionRequestRequestTypeDef,
    StopActionTypeDef,
    TemplateMetadataTypeDef,
    TemplateTypeDef,
    TestRenderTemplateRequestRequestTypeDef,
    TestRenderTemplateResponseTypeDef,
    TrackingOptionsTypeDef,
    UpdateAccountSendingEnabledRequestRequestTypeDef,
    UpdateConfigurationSetEventDestinationRequestRequestTypeDef,
    UpdateConfigurationSetReputationMetricsEnabledRequestRequestTypeDef,
    UpdateConfigurationSetSendingEnabledRequestRequestTypeDef,
    UpdateConfigurationSetTrackingOptionsRequestRequestTypeDef,
    UpdateCustomVerificationEmailTemplateRequestRequestTypeDef,
    UpdateReceiptRuleRequestRequestTypeDef,
    UpdateTemplateRequestRequestTypeDef,
    VerifyDomainDkimRequestRequestTypeDef,
    VerifyDomainDkimResponseTypeDef,
    VerifyDomainIdentityRequestRequestTypeDef,
    VerifyDomainIdentityResponseTypeDef,
    VerifyEmailAddressRequestRequestTypeDef,
    VerifyEmailIdentityRequestRequestTypeDef,
    WaiterConfigTypeDef,
    WorkmailActionTypeDef,
)

def get_structure() -> AddHeaderActionTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`types-aiobotocore-ses` version is the same as related `boto3` version and
follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[types-aiobotocore-ses docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_ses/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


