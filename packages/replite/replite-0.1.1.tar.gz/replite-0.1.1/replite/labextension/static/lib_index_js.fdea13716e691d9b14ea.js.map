{"version":3,"file":"lib_index_js.fdea13716e691d9b14ea.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAA6E;AACvB;AACA;AACsB;AACtB;AACN;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,gEAAe;AAC9B;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAO;AACzB;AACA;AACA;AACA,SAAS;AACT,8BAA8B,sEAAoB;AAClD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA,SAAS;AACT,kCAAkC,sEAAoB;AACtD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA;AACA,SAAS;AACT,gCAAgC,sEAAoB;AACpD;AACA;AACA,SAAS;AACT;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA,sCAAsC,0EAAwB;AAC9D,gCAAgC,kDAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAM,GAAG,MAAM;AACjD,6BAA6B,mDAAM;AACnC,YAAY,wEAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA,oBAAoB,uFAAqC;AACzD;AACA;AACA,gBAAgB,oFAAkC;AAClD,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,OAAO,EAAC","sources":["webpack://replite/./lib/index.js"],"sourcesContent":["import { CommandToolbarButton, Dialog, Toolbar } from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { clearIcon, refreshIcon, runIcon } from '@jupyterlab/ui-components';\nimport { liteIcon } from '@jupyterlite/ui-components';\nimport { Panel, Widget } from '@lumino/widgets';\n/**\n * A plugin to add buttons to the console toolbar.\n */\nconst buttons = {\n    id: 'replite:buttons',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [IConsoleTracker],\n    activate: (app, translator, tracker) => {\n        if (!tracker) {\n            return;\n        }\n        const { commands } = app;\n        const trans = translator.load('retrolab');\n        // wrapper commands to be able to override the icon\n        const runCommand = 'replite:run';\n        commands.addCommand(runCommand, {\n            caption: trans.__('Run'),\n            icon: runIcon,\n            execute: () => {\n                return commands.execute('console:run-forced');\n            }\n        });\n        const runButton = new CommandToolbarButton({\n            commands,\n            id: runCommand\n        });\n        const restartCommand = 'replite:restart';\n        commands.addCommand(restartCommand, {\n            caption: trans.__('Restart'),\n            icon: refreshIcon,\n            execute: () => {\n                return commands.execute('console:restart-kernel');\n            }\n        });\n        const restartButton = new CommandToolbarButton({\n            commands,\n            id: restartCommand\n        });\n        const clearCommand = 'replite:clear';\n        commands.addCommand(clearCommand, {\n            caption: trans.__('Clear'),\n            icon: clearIcon,\n            execute: () => {\n                return commands.execute('console:clear');\n            }\n        });\n        const clearButton = new CommandToolbarButton({\n            commands,\n            id: clearCommand\n        });\n        tracker.widgetAdded.connect((_, console) => {\n            const { toolbar } = console;\n            console.toolbar.addItem('run', runButton);\n            console.toolbar.addItem('restart', restartButton);\n            console.toolbar.addItem('clear', clearButton);\n            toolbar.addItem('spacer', Toolbar.createSpacerItem());\n            const wrapper = new Panel();\n            wrapper.addClass('jp-PoweredBy');\n            const node = document.createElement('a');\n            node.textContent = trans.__('Powered by JupyterLite');\n            node.href = 'https://github.com/jupyterlite/jupyterlite';\n            node.target = '_blank';\n            node.rel = 'noopener noreferrer';\n            const poweredBy = new Widget({ node });\n            const icon = new Widget();\n            liteIcon.element({\n                container: icon.node,\n                elementPosition: 'center',\n                margin: '2px 2px 2px 8px',\n                height: 'auto',\n                width: '16px'\n            });\n            wrapper.addWidget(poweredBy);\n            wrapper.addWidget(icon);\n            toolbar.addItem('powered-by', wrapper);\n        });\n    }\n};\n/**\n * A plugin to parse custom parameters from the query string arguments.\n */\nconst parameters = {\n    id: 'replite:parameters',\n    autoStart: true,\n    optional: [IConsoleTracker],\n    activate: (app, tracker) => {\n        if (!tracker) {\n            return;\n        }\n        const search = window.location.search;\n        const urlParams = new URLSearchParams(search);\n        const code = urlParams.getAll('code');\n        const kernel = urlParams.get('kernel');\n        const toolbar = urlParams.get('toolbar');\n        tracker.widgetAdded.connect(async (_, widget) => {\n            const { console } = widget;\n            // hide the first select kernel dialog if a kernel is specified\n            // TODO: support specifying kernel preference in upstream RetroLab\n            if (kernel) {\n                const hideFirstDialog = (_, w) => {\n                    Dialog.tracker.widgetAdded.disconnect(hideFirstDialog);\n                    requestAnimationFrame(() => w.resolve(0));\n                };\n                Dialog.tracker.widgetAdded.connect(hideFirstDialog);\n                await console.sessionContext.changeKernel({ name: kernel });\n            }\n            if (code) {\n                await console.sessionContext.ready;\n                code.forEach(line => console.inject(line));\n            }\n            if (!toolbar) {\n                // hide the toolbar by default if not specified\n                widget.toolbar.dispose();\n            }\n        });\n    }\n};\nconst plugins = [buttons, parameters];\nexport default plugins;\n"],"names":[],"sourceRoot":""}