{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","props","_autoUpdate","ms","setTimeout","msg","_sendMessageTo","_setStateNow","console","log","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","state","onChange","_onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","label","msgObject","status","setState","prevState","action","data","uniqueId","options","isChecked","command","window","parent","chrome","webview","args","json","JSON","stringify","postMessage","event","check","target","checked","dotNetAction","isFocused","initialState","delay","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,eAAiB,8BAA8B,WAAa,4B,4KCiCzHC,E,kDAEJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAmDAC,YAAc,SAACC,GACrBC,YAAW,WAET,IAAIC,EAAM,EAAKC,eAAe,qBAE9B,EAAKC,aAAaF,GAAK,GACvBG,QAAQC,IAAI,uCACXN,IA3DqC,EAsEnCO,OAAS,WACd,OACE,2BAAOC,UAAWC,IAAOC,iBACvB,2BACEF,UAAWC,IAAOE,WAClBC,KAAK,WACLC,eAAgB,EAAKC,MAAMD,eAC3BE,SAAU,EAAKC,UACfC,SAAU,EAAKnB,MAAMmB,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,UACf,0BAAMb,UAAWC,IAAOa,gBACrB,EAAKR,MAAMS,SAlFsB,EAwFlCnB,aAAe,SAACoB,EACtBC,GACA,EAAKC,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEEC,OAAQJ,EAAUI,OAClBC,KAAML,EAAUK,KAChBC,SAAUN,EAAUM,SACpBC,QAASP,EAAUO,QACnBC,UAAWP,OAGfpB,QAAQC,IAAI,2CApG4B,EAuGlCH,eAAiB,SAAC8B,GACxB,GAAmC,oBAAxBC,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,OADAhC,QAAQC,IAAI,2CACL,EAAKQ,MAGd,IAAIU,EAAY,CACdI,OAAQK,EACRJ,KAAM,EAAK/B,MAAMwC,KAAX,KACNR,SAAU,EAAKhC,MAAMwC,KAAX,SACVP,QAAS,EAAKjC,MAAMwC,KAAX,SAGPC,EAAOC,KAAKC,UAAUjB,GAE1B,OADAU,OAAOC,OAAOC,OAAOC,QAAQK,YAAYH,GAClCf,EAKP,OADAnB,QAAQC,IAAI,0CACL,EAAKQ,OA7H0B,EAiIlCE,UAAY,SAAC2B,GACnB,IAAIC,EAAQD,EAAME,OAAOC,QACrBC,EAAgBH,EAAS,eAAiB,cAC1C1C,EAAM,EAAKC,eAAe4C,GAC9B,EAAK3C,aAAaF,EAAK0C,IArIiB,EAwIlCzB,SAAW,WACjB,EAAKO,SAAS,CAAEsB,WAAW,KAzIa,EA4IlC3B,QAAU,WAChB,EAAKK,SAAS,CAAEsB,WAAW,KAzI3B,IAAMnB,EAAO,EAAK/B,MAAMwC,KAAX,KACPR,EAAW,EAAKhC,MAAMwC,KAAX,SACXzB,EAAiB,EAAKf,MAAMwC,KAAX,eAKjBW,EAAe,CACnBrB,OAAQ,GACRC,KAAMA,EACNC,SAAUA,EACVjB,eAAgBA,EAChBkB,QATc,EAAKjC,MAAMwC,KAAX,QAUdf,MATY,EAAKzB,MAAMwC,KAAX,MAUZY,MATY,EAAKpD,MAAMwC,KAAX,MAUZN,YAAWnB,GAQb,GALA,EAAKC,MAAL,eACKmC,GAIDpC,EACJ,CAEE,EAAKV,eADiB,qBAGtB,EAAKuB,SAAS,CAACE,OAHO,sBA7BgB,S,wDA0C1C,WAEE,GAAIuB,KAAKrC,MAAMkB,UACf,CAEYmB,KAAKhD,eAAe,qBAC9BE,QAAQC,IAAI,oC,gCAchB,WACM6C,KAAKrC,MAAMkB,WACbmB,KAAKrC,MAAMe,MAAQsB,KAAKrD,MAAMwC,KAAX,MAEnBa,KAAKpD,YAAYoD,KAAKrC,MAAMoC,W,GApEPE,KAmJZC,cAAwBxD,GCjLvCyD,IAAS/C,OACP,kBAAC,IAAMgD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3975d390.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { \n  ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface Options {\n  layer: string\n  units: string\n}\n\ninterface State {\n  action: string\n  data: string\n  label: string\n  defaultChecked: boolean\n  uniqueId: string\n  options: Options\n  delay: number\n  isFocused: boolean\n  isChecked: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const data = this.props.args['data'] as string\n    const uniqueId = this.props.args['uniqueId'] as string\n    const defaultChecked = this.props.args['defaultChecked'] as boolean\n    const options = this.props.args['options'] as Options\n    const label = this.props.args['label'] as string\n    const delay = this.props.args['delay'] as number\n\n    const initialState = {\n      action: '',\n      data: data,\n      uniqueId: uniqueId,\n      defaultChecked: defaultChecked,\n      options: options,\n      label: label,\n      delay: delay,\n      isChecked: defaultChecked ? true : false\n    } as State\n\n    this.state = {\n      ...initialState\n    }\n\n    // Send message to DotNet\n    if (defaultChecked)\n    {\n      const initialAction = 'CombinedRendering';\n      this._sendMessageTo(initialAction);\n      // Update only the action\n      this.setState({action: initialAction});\n    }\n  }\n\n  // // Live refresh\n  // componentDidMount() {\n  //   console.log('[POLLINATION-DEBUG]: mount.');\n  //   Streamlit.setFrameHeight();\n  // }\n\n  componentWillUnmount()\n  {\n    if (this.state.isChecked)\n    {\n      // Disable draw\n      let msg = this._sendMessageTo('CombinedRendering');\n      console.log('[POLLINATION-DEBUG]: unmount.');\n    }\n  }\n\n  private _autoUpdate = (ms: number) : void => {\n    setTimeout(() => {\n      // Disable draw firstly\n      let msg = this._sendMessageTo('CombinedRendering');\n      // Save data inside the state\n      this._setStateNow(msg, true);\n      console.log('[POLLINATION-DEBUG]: auto-update.');\n    }, ms);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isChecked && \n      this.state.data != this.props.args['data'])\n    {\n      this._autoUpdate(this.state.delay);\n    }\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <label className={styles.poCheckboxLabel}>\n        <input \n          className={styles.poCheckbox}\n          type='checkbox' \n          defaultChecked={this.state.defaultChecked} \n          onChange={this._onChange} \n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}/>\n        <span className={styles.poCheckboxSpan}>\n          {this.state.label}\n        </span>\n      </label>\n    )\n  }\n\n  private _setStateNow = (msgObject: State, \n    status: boolean): void =>{\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        action: msgObject.action,\n        data: msgObject.data,\n        uniqueId: msgObject.uniqueId,\n        options: msgObject.options,\n        isChecked: status\n      })\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private _sendMessageTo = (command: string): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      \n      var msgObject = {\n        action: command,\n        data: this.props.args['data'],\n        uniqueId: this.props.args['uniqueId'],\n        options: this.props.args['options']\n      } as State;\n\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n      return msgObject;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let check = event.target.checked;\n    let dotNetAction = (check) ? 'DrawGeometry' : 'DisableDraw';\n    let msg = this._sendMessageTo(dotNetAction);\n    this._setStateNow(msg, check);\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}