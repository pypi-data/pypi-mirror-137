{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","props","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","state","onChange","_onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","label","_setStateNow","msgObject","status","setState","prevState","action","data","uniqueId","options","isChecked","console","log","_sendMessageTo","command","window","parent","chrome","webview","args","json","JSON","stringify","postMessage","event","check","target","checked","dotNetAction","msg","isFocused","initialState","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,eAAiB,8BAA8B,WAAa,4B,4KCgCzHC,E,kDAEJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IA+DDC,OAAS,WACd,OACE,2BAAOC,UAAWC,IAAOC,iBACvB,2BACEF,UAAWC,IAAOE,WAClBC,KAAK,WACLC,eAAgB,EAAKC,MAAMD,eAC3BE,SAAU,EAAKC,UACfC,SAAU,EAAKX,MAAMW,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,UACf,0BAAMb,UAAWC,IAAOa,gBACrB,EAAKR,MAAMS,SA5EsB,EAkFlCC,aAAe,SAACC,EACtBC,GACA,EAAKC,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEEC,OAAQJ,EAAUI,OAClBC,KAAML,EAAUK,KAChBC,SAAUN,EAAUM,SACpBC,QAASP,EAAUO,QACnBC,UAAWP,OAGfQ,QAAQC,IAAI,2CA9F4B,EAiGlCC,eAAiB,SAACC,GACxB,GAAmC,oBAAxBC,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,OADAP,QAAQC,IAAI,2CACL,EAAKrB,MAGd,IAAIW,EAAY,CACdI,OAAQQ,EACRP,KAAM,EAAKxB,MAAMoC,KAAX,KACNX,SAAU,EAAKzB,MAAMoC,KAAX,SACVV,QAAS,EAAK1B,MAAMoC,KAAX,SAGPC,EAAOC,KAAKC,UAAUpB,GAE1B,OADAa,OAAOC,OAAOC,OAAOC,QAAQK,YAAYH,GAClClB,EAKP,OADAS,QAAQC,IAAI,0CACL,EAAKrB,OAvH0B,EA2HlCE,UAAY,SAAC+B,GACnB,IAAIC,EAAQD,EAAME,OAAOC,QACrBC,EAAgBH,EAAS,eAAiB,cAC1CI,EAAM,EAAKhB,eAAee,GAC9B,EAAK3B,aAAa4B,EAAKJ,IA/HiB,EAkIlC7B,SAAW,WACjB,EAAKQ,SAAS,CAAE0B,WAAW,KAnIa,EAsIlChC,QAAU,WAChB,EAAKM,SAAS,CAAE0B,WAAW,KAnI3B,IAAMvB,EAAO,EAAKxB,MAAMoC,KAAX,KACPX,EAAW,EAAKzB,MAAMoC,KAAX,SACX7B,EAAiB,EAAKP,MAAMoC,KAAX,eAIjBY,EAAe,CACnBzB,OAAQ,GACRC,KAAMA,EACNC,SAAUA,EACVlB,eAAgBA,EAChBmB,QARc,EAAK1B,MAAMoC,KAAX,QASdnB,MARY,EAAKjB,MAAMoC,KAAX,MASZT,YAAWpB,GAQb,GALA,EAAKC,MAAL,eACKwC,GAIDzC,EACJ,CAEY,EAAKuB,eADO,gBAGtB,EAAKT,SAAS,CAACE,OAHO,iBA3BgB,S,wDAwC1C,WAEE,GAAI0B,KAAKzC,MAAMmB,UACf,CAEYsB,KAAKnB,eAAe,eAC9BF,QAAQC,IAAI,oC,gCAIhB,WACE,GAAIoB,KAAKzC,MAAMmB,WACbsB,KAAKzC,MAAMgB,MAAQyB,KAAKjD,MAAMoC,KAAX,KACrB,CAEE,IAAIU,EAAMG,KAAKnB,eAAe,eAE9BgB,EAAMG,KAAKnB,eAAe,gBAE1BmB,KAAK/B,aAAa4B,GAAK,GACvBlB,QAAQC,IAAI,0C,GA9DSqB,KA6IZC,cAAwBpD,GC1KvCqD,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4c4ce81e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { \n  ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface Options {\n  layer: string\n  units: string\n}\n\ninterface State {\n  action: string\n  data: string\n  label: string\n  defaultChecked: boolean\n  uniqueId: string\n  options: Options\n  isFocused: boolean\n  isChecked: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const data = this.props.args['data'] as string\n    const uniqueId = this.props.args['uniqueId'] as string\n    const defaultChecked = this.props.args['defaultChecked'] as boolean\n    const options = this.props.args['options'] as Options\n    const label = this.props.args['label'] as string\n\n    const initialState = {\n      action: '',\n      data: data,\n      uniqueId: uniqueId,\n      defaultChecked: defaultChecked,\n      options: options,\n      label: label,\n      isChecked: defaultChecked ? true : false\n    } as State\n\n    this.state = {\n      ...initialState\n    }\n\n    // Send message to DotNet\n    if (defaultChecked)\n    {\n      const initialAction = 'DrawGeometry';\n      let msg = this._sendMessageTo(initialAction);\n      // Update only the action\n      this.setState({action: initialAction});\n    }\n  }\n\n  // // Live refresh\n  // componentDidMount() {\n  //   console.log('[POLLINATION-DEBUG]: mount.');\n  //   Streamlit.setFrameHeight();\n  // }\n\n  componentWillUnmount()\n  {\n    if (this.state.isChecked)\n    {\n      // Disable draw\n      let msg = this._sendMessageTo('DisableDraw');\n      console.log('[POLLINATION-DEBUG]: unmount.');\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.isChecked && \n      this.state.data != this.props.args['data'])\n    {\n      // Disable draw firstly\n      let msg = this._sendMessageTo('DisableDraw');\n      // Enable draw with new data\n      msg = this._sendMessageTo('DrawGeometry');\n      // Save data inside the state\n      this._setStateNow(msg, true);\n      console.log('[POLLINATION-DEBUG]: auto-update.');\n    }\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <label className={styles.poCheckboxLabel}>\n        <input \n          className={styles.poCheckbox}\n          type='checkbox' \n          defaultChecked={this.state.defaultChecked} \n          onChange={this._onChange} \n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}/>\n        <span className={styles.poCheckboxSpan}>\n          {this.state.label}\n        </span>\n      </label>\n    )\n  }\n\n  private _setStateNow = (msgObject: State, \n    status: boolean): void =>{\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        action: msgObject.action,\n        data: msgObject.data,\n        uniqueId: msgObject.uniqueId,\n        options: msgObject.options,\n        isChecked: status\n      })\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private _sendMessageTo = (command: string): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      \n      var msgObject = {\n        action: command,\n        data: this.props.args['data'],\n        uniqueId: this.props.args['uniqueId'],\n        options: this.props.args['options']\n      } as State;\n\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n      return msgObject;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let check = event.target.checked;\n    let dotNetAction = (check) ? 'DrawGeometry' : 'DisableDraw';\n    let msg = this._sendMessageTo(dotNetAction);\n    this._setStateNow(msg, check);\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}