# coding: utf-8

"""
    Veeroute.Stock

    Veeroute Stock API  # noqa: E501

    The version of the OpenAPI document: 3.15.183137
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrt_lss_stock.configuration import Configuration


class Transfer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage_key': 'str',
        'time_index': 'int',
        'date': 'date',
        'input_amount': 'float',
        'output_amount': 'float'
    }

    attribute_map = {
        'storage_key': 'storage_key',
        'time_index': 'time_index',
        'date': 'date',
        'input_amount': 'input_amount',
        'output_amount': 'output_amount'
    }

    def __init__(self, storage_key=None, time_index=None, date=None, input_amount=None, output_amount=None, local_vars_configuration=None):  # noqa: E501
        """Transfer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._storage_key = None
        self._time_index = None
        self._date = None
        self._input_amount = None
        self._output_amount = None
        self.discriminator = None

        self.storage_key = storage_key
        self.time_index = time_index
        if date is not None:
            self.date = date
        self.input_amount = input_amount
        self.output_amount = output_amount

    @property
    def storage_key(self):
        """Gets the storage_key of this Transfer.  # noqa: E501

        Storage key.  # noqa: E501

        :return: The storage_key of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._storage_key

    @storage_key.setter
    def storage_key(self, storage_key):
        """Sets the storage_key of this Transfer.

        Storage key.  # noqa: E501

        :param storage_key: The storage_key of this Transfer.  # noqa: E501
        :type storage_key: str
        """
        if self.local_vars_configuration.client_side_validation and storage_key is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                storage_key is not None and len(storage_key) > 1024):
            raise ValueError("Invalid value for `storage_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                storage_key is not None and len(storage_key) < 1):
            raise ValueError("Invalid value for `storage_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._storage_key = storage_key

    @property
    def time_index(self):
        """Gets the time_index of this Transfer.  # noqa: E501

        Time index.  # noqa: E501

        :return: The time_index of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._time_index

    @time_index.setter
    def time_index(self, time_index):
        """Sets the time_index of this Transfer.

        Time index.  # noqa: E501

        :param time_index: The time_index of this Transfer.  # noqa: E501
        :type time_index: int
        """
        if self.local_vars_configuration.client_side_validation and time_index is None:  # noqa: E501
            raise ValueError("Invalid value for `time_index`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                time_index is not None and time_index > 31):  # noqa: E501
            raise ValueError("Invalid value for `time_index`, must be a value less than or equal to `31`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                time_index is not None and time_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_index = time_index

    @property
    def date(self):
        """Gets the date of this Transfer.  # noqa: E501

        Date in the YYYY-MM-DD format.  # noqa: E501

        :return: The date of this Transfer.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Transfer.

        Date in the YYYY-MM-DD format.  # noqa: E501

        :param date: The date of this Transfer.  # noqa: E501
        :type date: date
        """

        self._date = date

    @property
    def input_amount(self):
        """Gets the input_amount of this Transfer.  # noqa: E501

        The amount of stocks that needs to be moved to the storage.  # noqa: E501

        :return: The input_amount of this Transfer.  # noqa: E501
        :rtype: float
        """
        return self._input_amount

    @input_amount.setter
    def input_amount(self, input_amount):
        """Sets the input_amount of this Transfer.

        The amount of stocks that needs to be moved to the storage.  # noqa: E501

        :param input_amount: The input_amount of this Transfer.  # noqa: E501
        :type input_amount: float
        """
        if self.local_vars_configuration.client_side_validation and input_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `input_amount`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                input_amount is not None and input_amount > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `input_amount`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                input_amount is not None and input_amount < 0):  # noqa: E501
            raise ValueError("Invalid value for `input_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._input_amount = input_amount

    @property
    def output_amount(self):
        """Gets the output_amount of this Transfer.  # noqa: E501

        The amount of stocks to be removed from storage.  # noqa: E501

        :return: The output_amount of this Transfer.  # noqa: E501
        :rtype: float
        """
        return self._output_amount

    @output_amount.setter
    def output_amount(self, output_amount):
        """Sets the output_amount of this Transfer.

        The amount of stocks to be removed from storage.  # noqa: E501

        :param output_amount: The output_amount of this Transfer.  # noqa: E501
        :type output_amount: float
        """
        if self.local_vars_configuration.client_side_validation and output_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `output_amount`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                output_amount is not None and output_amount > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `output_amount`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                output_amount is not None and output_amount < 0):  # noqa: E501
            raise ValueError("Invalid value for `output_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._output_amount = output_amount

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transfer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transfer):
            return True

        return self.to_dict() != other.to_dict()
