Metadata-Version: 2.1
Name: types-aiobotocore-codedeploy
Version: 2.1.0.post1
Summary: Type annotations for aiobotocore.CodeDeploy 2.1.0 service generated by mypy-boto3-builder 6.4.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: aiobotocore codedeploy type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.9"

<a id="mypy-boto3-codedeploy"></a>

# mypy-boto3-codedeploy

[![PyPI - types-aiobotocore-codedeploy](https://img.shields.io/pypi/v/types-aiobotocore-codedeploy.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codedeploy)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-codedeploy.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codedeploy)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-codedeploy?color=blue)](https://pypistats.org/packages/types-aiobotocore-codedeploy)

![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[boto3.CodeDeploy 1.20.47](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/codedeploy.html#CodeDeploy)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 6.4.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on
[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
[types-aiobotocore-codedeploy docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_codedeploy/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/main/demo.gif)

- [mypy-boto3-codedeploy](#mypy-boto3-codedeploy)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [Versioning](#versioning)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `CodeDeploy`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `CodeDeploy` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[codedeploy]'

# Lite version does not provide session.create_client overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[codedeploy]'

# standalone installation
python -m pip install types-aiobotocore-codedeploy
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[codedeploy]` in your environment:
  `python -m pip install 'types-aiobotocore[codedeploy]'`

Both type checking and auto-complete should work for `CodeDeploy` service. No
explicit type annotations required, write your `boto3` code as usual.

<a id="pycharm"></a>

### PyCharm

- Install `types-aiobotocore[codedeploy]` in your environment:
  `python -m pip install 'types-aiobotocore[codedeploy]'`

Both type checking and auto-complete should work for `CodeDeploy` service. No
explicit type annotations required, write your `aiobotocore` code as usual.
Auto-complete can be slow on big projects or if you have a lot of installed
`types-aiobotocore` submodules.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[codedeploy]` in your environment:
  `python -m pip install 'types-aiobotocore[codedeploy]'`
- Run `mypy` as usual

Type checking should work for `CodeDeploy` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `yarn global add pyright`
- Install `types-aiobotocore[codedeploy]` in your environment:
  `python -m pip install 'types-aiobotocore[codedeploy]'`
- Optionally, you can install `boto3-stubs` to `typings` folder.

Type checking should work for `CodeDeploy` service. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`CodeDeployClient` provides annotations for
`session.create_client("codedeploy")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_codedeploy import CodeDeployClient

session = get_session()
async with session.create_client("codedeploy") as client:
    client: CodeDeployClient
    # now client usage is checked by mypy and IDE should provide code auto-complete
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_codedeploy.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_codedeploy import CodeDeployClient
from types_aiobotocore_codedeploy.paginator import (
    ListApplicationRevisionsPaginator,
    ListApplicationsPaginator,
    ListDeploymentConfigsPaginator,
    ListDeploymentGroupsPaginator,
    ListDeploymentInstancesPaginator,
    ListDeploymentTargetsPaginator,
    ListDeploymentsPaginator,
    ListGitHubAccountTokenNamesPaginator,
    ListOnPremisesInstancesPaginator,
)

session = get_session()
async with session.create_client("codedeploy") as client:
    client: CodeDeployClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_application_revisions_paginator: ListApplicationRevisionsPaginator = client.get_paginator("list_application_revisions")
        list_applications_paginator: ListApplicationsPaginator = client.get_paginator("list_applications")
        list_deployment_configs_paginator: ListDeploymentConfigsPaginator = client.get_paginator("list_deployment_configs")
        list_deployment_groups_paginator: ListDeploymentGroupsPaginator = client.get_paginator("list_deployment_groups")
        list_deployment_instances_paginator: ListDeploymentInstancesPaginator = client.get_paginator("list_deployment_instances")
        list_deployment_targets_paginator: ListDeploymentTargetsPaginator = client.get_paginator("list_deployment_targets")
        list_deployments_paginator: ListDeploymentsPaginator = client.get_paginator("list_deployments")
        list_git_hub_account_token_names_paginator: ListGitHubAccountTokenNamesPaginator = client.get_paginator("list_git_hub_account_token_names")
        list_on_premises_instances_paginator: ListOnPremisesInstancesPaginator = client.get_paginator("list_on_premises_instances")
    ```


### Waiters annotations

`types_aiobotocore_codedeploy.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_codedeploy.client import CodeDeployClient
from types_aiobotocore_codedeploy.waiter import (
    DeploymentSuccessfulWaiter,
)

session = get_session()
async with session.create_client("codedeploy") as client:
    client: CodeDeployClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        deployment_successful_waiter: DeploymentSuccessfulWaiter = client.get_waiter("deployment_successful")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_codedeploy.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_codedeploy.literals import (
    ApplicationRevisionSortByType,
    AutoRollbackEventType,
    BundleTypeType,
    ComputePlatformType,
    DeploymentCreatorType,
    DeploymentOptionType,
    DeploymentReadyActionType,
    DeploymentStatusType,
    DeploymentSuccessfulWaiterName,
    DeploymentTargetTypeType,
    DeploymentTypeType,
    DeploymentWaitTypeType,
    EC2TagFilterTypeType,
    ErrorCodeType,
    FileExistsBehaviorType,
    GreenFleetProvisioningActionType,
    InstanceActionType,
    InstanceStatusType,
    InstanceTypeType,
    LifecycleErrorCodeType,
    LifecycleEventStatusType,
    ListApplicationRevisionsPaginatorName,
    ListApplicationsPaginatorName,
    ListDeploymentConfigsPaginatorName,
    ListDeploymentGroupsPaginatorName,
    ListDeploymentInstancesPaginatorName,
    ListDeploymentTargetsPaginatorName,
    ListDeploymentsPaginatorName,
    ListGitHubAccountTokenNamesPaginatorName,
    ListOnPremisesInstancesPaginatorName,
    ListStateFilterActionType,
    MinimumHealthyHostsTypeType,
    OutdatedInstancesStrategyType,
    RegistrationStatusType,
    RevisionLocationTypeType,
    SortOrderType,
    StopStatusType,
    TagFilterTypeType,
    TargetFilterNameType,
    TargetLabelType,
    TargetStatusType,
    TrafficRoutingTypeType,
    TriggerEventTypeType,
    ServiceName,
    PaginatorName,
    WaiterName,
)

def check_value(value: ApplicationRevisionSortByType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_codedeploy.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_codedeploy.type_defs import (
    AddTagsToOnPremisesInstancesInputRequestTypeDef,
    AlarmConfigurationTypeDef,
    AlarmTypeDef,
    AppSpecContentTypeDef,
    ApplicationInfoTypeDef,
    AutoRollbackConfigurationTypeDef,
    AutoScalingGroupTypeDef,
    BatchGetApplicationRevisionsInputRequestTypeDef,
    BatchGetApplicationRevisionsOutputTypeDef,
    BatchGetApplicationsInputRequestTypeDef,
    BatchGetApplicationsOutputTypeDef,
    BatchGetDeploymentGroupsInputRequestTypeDef,
    BatchGetDeploymentGroupsOutputTypeDef,
    BatchGetDeploymentInstancesInputRequestTypeDef,
    BatchGetDeploymentInstancesOutputTypeDef,
    BatchGetDeploymentTargetsInputRequestTypeDef,
    BatchGetDeploymentTargetsOutputTypeDef,
    BatchGetDeploymentsInputRequestTypeDef,
    BatchGetDeploymentsOutputTypeDef,
    BatchGetOnPremisesInstancesInputRequestTypeDef,
    BatchGetOnPremisesInstancesOutputTypeDef,
    BlueGreenDeploymentConfigurationTypeDef,
    BlueInstanceTerminationOptionTypeDef,
    CloudFormationTargetTypeDef,
    ContinueDeploymentInputRequestTypeDef,
    CreateApplicationInputRequestTypeDef,
    CreateApplicationOutputTypeDef,
    CreateDeploymentConfigInputRequestTypeDef,
    CreateDeploymentConfigOutputTypeDef,
    CreateDeploymentGroupInputRequestTypeDef,
    CreateDeploymentGroupOutputTypeDef,
    CreateDeploymentInputRequestTypeDef,
    CreateDeploymentOutputTypeDef,
    DeleteApplicationInputRequestTypeDef,
    DeleteDeploymentConfigInputRequestTypeDef,
    DeleteDeploymentGroupInputRequestTypeDef,
    DeleteDeploymentGroupOutputTypeDef,
    DeleteGitHubAccountTokenInputRequestTypeDef,
    DeleteGitHubAccountTokenOutputTypeDef,
    DeleteResourcesByExternalIdInputRequestTypeDef,
    DeploymentConfigInfoTypeDef,
    DeploymentGroupInfoTypeDef,
    DeploymentInfoTypeDef,
    DeploymentOverviewTypeDef,
    DeploymentReadyOptionTypeDef,
    DeploymentStyleTypeDef,
    DeploymentTargetTypeDef,
    DeregisterOnPremisesInstanceInputRequestTypeDef,
    DiagnosticsTypeDef,
    EC2TagFilterTypeDef,
    EC2TagSetTypeDef,
    ECSServiceTypeDef,
    ECSTargetTypeDef,
    ECSTaskSetTypeDef,
    ELBInfoTypeDef,
    ErrorInformationTypeDef,
    GenericRevisionInfoTypeDef,
    GetApplicationInputRequestTypeDef,
    GetApplicationOutputTypeDef,
    GetApplicationRevisionInputRequestTypeDef,
    GetApplicationRevisionOutputTypeDef,
    GetDeploymentConfigInputRequestTypeDef,
    GetDeploymentConfigOutputTypeDef,
    GetDeploymentGroupInputRequestTypeDef,
    GetDeploymentGroupOutputTypeDef,
    GetDeploymentInputRequestTypeDef,
    GetDeploymentInstanceInputRequestTypeDef,
    GetDeploymentInstanceOutputTypeDef,
    GetDeploymentOutputTypeDef,
    GetDeploymentTargetInputRequestTypeDef,
    GetDeploymentTargetOutputTypeDef,
    GetOnPremisesInstanceInputRequestTypeDef,
    GetOnPremisesInstanceOutputTypeDef,
    GitHubLocationTypeDef,
    GreenFleetProvisioningOptionTypeDef,
    InstanceInfoTypeDef,
    InstanceSummaryTypeDef,
    InstanceTargetTypeDef,
    LambdaFunctionInfoTypeDef,
    LambdaTargetTypeDef,
    LastDeploymentInfoTypeDef,
    LifecycleEventTypeDef,
    ListApplicationRevisionsInputRequestTypeDef,
    ListApplicationRevisionsOutputTypeDef,
    ListApplicationsInputRequestTypeDef,
    ListApplicationsOutputTypeDef,
    ListDeploymentConfigsInputRequestTypeDef,
    ListDeploymentConfigsOutputTypeDef,
    ListDeploymentGroupsInputRequestTypeDef,
    ListDeploymentGroupsOutputTypeDef,
    ListDeploymentInstancesInputRequestTypeDef,
    ListDeploymentInstancesOutputTypeDef,
    ListDeploymentTargetsInputRequestTypeDef,
    ListDeploymentTargetsOutputTypeDef,
    ListDeploymentsInputRequestTypeDef,
    ListDeploymentsOutputTypeDef,
    ListGitHubAccountTokenNamesInputRequestTypeDef,
    ListGitHubAccountTokenNamesOutputTypeDef,
    ListOnPremisesInstancesInputRequestTypeDef,
    ListOnPremisesInstancesOutputTypeDef,
    ListTagsForResourceInputRequestTypeDef,
    ListTagsForResourceOutputTypeDef,
    LoadBalancerInfoTypeDef,
    MinimumHealthyHostsTypeDef,
    OnPremisesTagSetTypeDef,
    PaginatorConfigTypeDef,
    PutLifecycleEventHookExecutionStatusInputRequestTypeDef,
    PutLifecycleEventHookExecutionStatusOutputTypeDef,
    RawStringTypeDef,
    RegisterApplicationRevisionInputRequestTypeDef,
    RegisterOnPremisesInstanceInputRequestTypeDef,
    RelatedDeploymentsTypeDef,
    RemoveTagsFromOnPremisesInstancesInputRequestTypeDef,
    ResponseMetadataTypeDef,
    RevisionInfoTypeDef,
    RevisionLocationTypeDef,
    RollbackInfoTypeDef,
    S3LocationTypeDef,
    SkipWaitTimeForInstanceTerminationInputRequestTypeDef,
    StopDeploymentInputRequestTypeDef,
    StopDeploymentOutputTypeDef,
    TagFilterTypeDef,
    TagResourceInputRequestTypeDef,
    TagTypeDef,
    TargetGroupInfoTypeDef,
    TargetGroupPairInfoTypeDef,
    TargetInstancesTypeDef,
    TimeBasedCanaryTypeDef,
    TimeBasedLinearTypeDef,
    TimeRangeTypeDef,
    TrafficRouteTypeDef,
    TrafficRoutingConfigTypeDef,
    TriggerConfigTypeDef,
    UntagResourceInputRequestTypeDef,
    UpdateApplicationInputRequestTypeDef,
    UpdateDeploymentGroupInputRequestTypeDef,
    UpdateDeploymentGroupOutputTypeDef,
    WaiterConfigTypeDef,
)

def get_structure() -> AddTagsToOnPremisesInstancesInputRequestTypeDef:
    return {
      ...
    }
```

<a id="versioning"></a>

## Versioning

`types-aiobotocore-codedeploy` version is the same as related `boto3` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="documentation"></a>

## Documentation

All type annotations can be found in
[types-aiobotocore-codedeploy docs](https://vemel.github.io/types_aiobotocore_docs/types_aiobotocore_codedeploy/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
repository.


