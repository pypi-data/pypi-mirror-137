Metadata-Version: 2.1
Name: ecoshard
Version: 0.7.0
Summary: EcoShard GIS data
Home-page: https://github.com/therealspring/ecoshard
Maintainer: Rich Sharp
Maintainer-email: richpsharp@gmail.com
License: BSD
Keywords: computing reproduction
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3.7
Classifier: License :: OSI Approved :: BSD License
License-File: LICENSE.txt

Ecoshard
========

Ecoshard provides GIS utilities, parallel execution functionality, and
command line file and GIS file hashing and other useful manipulation.


Release History
===============

0.7.0 (2022/02/07)
------------------
* Added ``--hash_length`` flag to command line to limit the hash character
  length of hashed files.
* Added functionality to run ``python -m ecoshard process ...`` command in
  parallel if multiple files match the file pattern target.

0.6.1 (2022/01/24)
------------------
* Added a ``run_parallel`` flag to allow for parallel warps
  ``geoprocessing.stitch_rasters`` for parallel warping of rasters.

0.6.0 (2022/01/24)
------------------
* Added functionality to publish a local file directly to an EcoShard server.
  This is available in the command line publish command whose arguments have
  been redefined from the previous version.
* Added flag to allow for multi-thread version of TaskGraph.
* Fixed issue with geoprocessing bounding box projection on exotic projections
  such as sinusoidal to wgs84.
* Added a ``get_utm_zone`` function that calculates the EPSG code for the
  major UTM zones given a lat/lng coordinate.
* Fixed an issue that would cause a crash in stitching rasters where the base
  raster was too far up/left of the target stitch raster but still overlapped
  with the stitch target.
* Added functionality to ``geoprocessing.routing`` to extract stream layer
  based on Strahler stream order and build subwatersheds and vector stream
  layer from that information.

    * ``geoproceesing.routing.extract_strahler_streams_d8``
    * ``geoprocessing.routing.calculate_subwatershed_boundary``

* Added functionality to detect the lowest drain or sink in a DEM in
  ``geoprocessing.routing.detect_lowest_drain_and_sink``.
* Added functionality to detect all outlets as a geometry layer in
  ``geoprocessing.routing.detect_outlets``.
* Added a ``--hash_substring_len`` flag to limit the number of characters in
  the hash generated by ``--hash_file``.

0.4.0 (2019/04/13)
------------------
* Changed behavior of command line function, now takes one of two primary
  commands ``process`` or ``publish``. The command ``process`` behaves like
  the original command line utility with same arguments and behavior. The
  ``publish`` command takes a Google Bucket URI, host to an ecoshard server,
  and an api key and published the raster to that server.
* Fixed an issue when summing up that would ignore nodata values.
* Fixes an issue where the overview interpolation argument was ignored.
* Added a ``download_and_unzip`` function to the API.

0.3.3 (2019/11/09)
------------------
* Fixed an issue that would cause the download rate to be under estimated.

0.3.1 (2019/10/07)
------------------
* Fixing an issue in download_to_url where the file might not be flushed and the
  final log message is not printed.

0.3.0 (2019/09/26)
------------------
* Added a new command line mode â€“reduce_factor that reduces the number of pixels
  in a raster by that integer amount. Ex:

    ``python -m ecoshard base.tif --reduce_factor 4 max target.tif``

    this call makes the size of the pixels in base.tif 4 times larger on the
    edge, thus reducing the total size of the image by 16 times, the convolution
    upsample is done with a "max" and the output file is ``target.tif``. The
    modes "min", "max", "sum", "average", "mode" are available.

0.2.2 (2019/09/24)
------------------
* Added a ``download_url`` function to ``ecoshard`` to fetch files via
  http(s).
* Developing Flask module to visualize ecoshards.

0.2.1 (2019/06/28)
------------------
* Hotfix: gs to gsutil for copying to buckets.

0.2.0 (2019/06/28)
------------------
* Added functionality to download a url.
* Added functionality to copy to a google bucket.
* Fixed an issue on functions that should write a token file but didn't.

0.1.1 (2019/06/27)
------------------
* Added a ``--force`` flag to the command line utility.

0.0.2 (2019/06/26)
------------------
* Initial release.


