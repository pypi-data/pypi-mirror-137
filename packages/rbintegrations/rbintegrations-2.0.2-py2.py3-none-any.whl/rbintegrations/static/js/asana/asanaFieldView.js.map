{"version":3,"sources":["asanaFieldView.es6.js"],"names":[],"mappings":"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","file":"asanaFieldView.js","sourcesContent":["(function() {\n\n\n/**\n * An inline editor view for selecting Asana tasks.\n */\nconst AsanaInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(selected.map(\n                    key => _.pick(\n                        selectize.options[key],\n                        ['completed', 'gid', 'workspace_id', 'name'])));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return initialValue !== value;\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        RB.InlineEditorView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"asana-field\">');\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        RB.InlineEditorView.prototype.setupEvents.call(this);\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        RB.InlineEditorView.prototype.showEditor.call(this, options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    },\n});\n\n\n/**\n * A review request field view for selecting Asana tasks.\n */\nRB.ReviewRequestFields.AsanaFieldView =\n    RB.ReviewRequestFields.TextFieldView.extend({\n    autocomplete: {},\n    multiline: true,\n    useEditIconOnly: true,\n\n    taskTemplate: _.template(dedent`\n        <<%- tagName %> class=\"asana-task<% if (completed) { %> completed<% } %>\">\n         <a href=\"https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/\">\n          <div class=\"asana-task-checkbox\">\n           <svg viewBox=\"0 0 32 32\">'\n            <polygon points=\"27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615\"></polygon>\n           </svg>\n          </div>\n          <span><%- taskSummary %></span>\n         </a>\n        </<%- tagName %>>\n        `),\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const fieldName = this.jsonFieldName || this.fieldID;\n        const opts = { useExtraData: this.useExtraData };\n        const tasks = JSON.parse(this.model.getDraftField(fieldName, opts));\n        this._renderValue(tasks);\n    },\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     tasks (Array of object):\n     *         The current value of the field.\n     */\n    _renderValue(tasks) {\n        const lis = tasks.map(task => this.taskTemplate({\n            completed: task.completed,\n            workspaceId: task.workspace_id,\n            taskId: task.gid,\n            taskSummary: task.name,\n            tagName: 'li',\n        }));\n\n        this.$el.html(`<ul>${lis.join('')}</ul>`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return AsanaInlineEditorView;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/asana/${localSite}task-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const tasks = this.$el.data('raw-value');\n\n        tasks.forEach(task => {\n            if (task.gid === undefined) {\n                task.gid = String(task.id);\n            }\n        });\n\n        this._renderValue(tasks || []);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            labelField: 'name',\n            valueField: 'gid',\n            multiple: true,\n            options: tasks,\n            items: tasks.map(task => task.gid),\n            optgroupLabelField: 'workspace',\n            searchField: 'name',\n            sortField: [\n                { 'field': 'completed' },\n                { 'field': 'name' },\n            ],\n            render: {\n                option: (data, escape) => {\n                    return this.taskTemplate({\n                        completed: data.completed,\n                        workspaceId: data.workspace_id,\n                        taskId: data.gid,\n                        taskSummary: data.name,\n                        tagName: 'div',\n                    });\n                }\n            },\n            load(query, callback) {\n                const params = $.param({ q: query });\n\n                $.ajax({\n                    url: `${url}?${params}`,\n                    type: 'GET',\n                    error: callback.bind(this),\n                    success: res => {\n                        const items = [];\n\n                        this.clearOptionGroups();\n\n                        for (let i = 0; i < res.length; i++) {\n                            const group = res[i];\n                            this.addOptionGroup(group.workspace, group);\n\n                            for (let j = 0; j < group.tasks.length; j++) {\n                                const task = group.tasks[j];\n                                task.optgroup = group.workspace;\n                                task.workspace_id = group.workspace_id;\n\n                                const notesLines = task.notes.split('\\n');\n                                task.notes = notesLines.splice(8).join('\\n');\n\n                                items.push(task);\n                            }\n                        }\n\n                        this.refreshOptions();\n                        callback(items);\n                    },\n                });\n            },\n        });\n    },\n});\n\n\n})();\n"]}