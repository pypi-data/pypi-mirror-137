{"version":3,"sources":["trelloFieldView.es6.js"],"names":[],"mappings":"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","file":"trelloFieldView.js","sourcesContent":["(function() {\n\n\n/**\n * An inline editor view for selecting Trello cards.\n */\nconst TrelloInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(\n                    selected.map(key => selectize.options[key]));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return (initialValue !== value);\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        RB.InlineEditorView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"trello-field\">');\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        RB.InlineEditorView.prototype.setupEvents.call(this);\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        RB.InlineEditorView.prototype.showEditor.call(this, options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    },\n});\n\n\n/**\n * A review request field view for selecting Trello cards.\n */\nRB.ReviewRequestFields.TrelloFieldView =\n    RB.ReviewRequestFields.TextFieldView.extend({\n    autocomplete: {},\n    multiline: true,\n    useEditIconOnly: true,\n\n    cardTemplate: _.template(dedent`\n        <<%- tagName %> class=\"trello-card\">\n         <div class=\"trello-card-card\">\n          <a href=\"<%- url %>\"><%- name %></a>\n         </div>\n         <div class=\"trello-card-details\">\n          on <span class=\"trello-card-list\"><%- list %></span>\n          in <span class=\"trello-card-board\"><%- board %></span>\n         </div>\n        </<%- tagName %>>\n        `),\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const cards = JSON.parse(this.model.getDraftField(\n            this.jsonFieldName || this.fieldID, {\n                useExtraData: this.useExtraData,\n            }));\n        this._renderValue(cards);\n    },\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     cards (Array of object):\n     *         The current set of cards to list.\n     */\n    _renderValue(cards) {\n        const items = cards.map(card => this.cardTemplate(_.defaults({\n            tagName: 'li',\n        }, card)));\n        this.$el.html(`<ul>${items.join('')}</ul>`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return TrelloInlineEditorView;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/trello/${localSite}card-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const cards = this.$el.data('raw-value');\n\n        this._renderValue(cards || []);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            multiple: true,\n            labelField: 'name',\n            valueField: 'id',\n            searchField: 'name',\n            options: cards,\n            items: _.pluck(cards, 'id'),\n            render: {\n                option: (data, escape) => this.cardTemplate(_.defaults({\n                    tagName: 'div',\n                }, data)),\n            },\n            load(query, callback) {\n                const params = $.param({ q: query });\n\n                $.ajax({\n                    url: `${url}?${params}`,\n                    type: 'GET',\n                    error: callback.bind(this),\n                    success: res => callback(res),\n                });\n            },\n        });\n    },\n});\n\n\n})();\n"]}