# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class PipelineComponentOperations(object):
    """PipelineComponentOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def register_component(
            self, subscription_id, resource_group_name, workspace_name, validate_only=False, upgrade_if_exists=False, include_run_setting_params=True, overwrite_component_version=None, get_yaml=False, remove_client_not_used_fields=True, keep_complete_parameters=False, run_setting_type="Released", body=None, custom_headers=None, raw=False, **operation_config):
        """

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which
         the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param validate_only:
        :type validate_only: bool
        :param upgrade_if_exists:
        :type upgrade_if_exists: bool
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param overwrite_component_version:
        :type overwrite_component_version: str
        :param get_yaml:
        :type get_yaml: bool
        :param remove_client_not_used_fields:
        :type remove_client_not_used_fields: bool
        :param keep_complete_parameters:
        :type keep_complete_parameters: bool
        :param run_setting_type: Possible values include: 'Default', 'All',
         'Released', 'Testing', 'Legacy', 'Full'
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ModuleDto or ClientRawResponse if raw=true
        :rtype: ~designer.models.ModuleDto or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.register_component.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if validate_only is not None:
            query_parameters['validateOnly'] = self._serialize.query("validate_only", validate_only, 'bool')
        if upgrade_if_exists is not None:
            query_parameters['upgradeIfExists'] = self._serialize.query("upgrade_if_exists", upgrade_if_exists, 'bool')
        if include_run_setting_params is not None:
            query_parameters['includeRunSettingParams'] = self._serialize.query("include_run_setting_params", include_run_setting_params, 'bool')
        if overwrite_component_version is not None:
            query_parameters['overwriteComponentVersion'] = self._serialize.query("overwrite_component_version", overwrite_component_version, 'str')
        if get_yaml is not None:
            query_parameters['getYaml'] = self._serialize.query("get_yaml", get_yaml, 'bool')
        if remove_client_not_used_fields is not None:
            query_parameters['removeClientNotUsedFields'] = self._serialize.query("remove_client_not_used_fields", remove_client_not_used_fields, 'bool')
        if keep_complete_parameters is not None:
            query_parameters['keepCompleteParameters'] = self._serialize.query("keep_complete_parameters", keep_complete_parameters, 'bool')
        if run_setting_type is not None:
            query_parameters['runSettingType'] = self._serialize.query("run_setting_type", run_setting_type, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 302]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    register_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent'}

    def validate_component(
            self, subscription_id, resource_group_name, workspace_name, run_setting_type="Released", body=None, custom_headers=None, raw=False, **operation_config):
        """

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which
         the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param run_setting_type: Possible values include: 'Default', 'All',
         'Released', 'Testing', 'Legacy', 'Full'
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ModuleDtoWithValidateStatus or ClientRawResponse if raw=true
        :rtype: ~designer.models.ModuleDtoWithValidateStatus or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.validate_component.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if run_setting_type is not None:
            query_parameters['runSettingType'] = self._serialize.query("run_setting_type", run_setting_type, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 302]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDtoWithValidateStatus', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    validate_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/validate'}

    def parse_component(
            self, subscription_id, resource_group_name, workspace_name, get_yaml=False, run_setting_type="Released", body=None, custom_headers=None, raw=False, **operation_config):
        """

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which
         the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param get_yaml:
        :type get_yaml: bool
        :param run_setting_type: Possible values include: 'Default', 'All',
         'Released', 'Testing', 'Legacy', 'Full'
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ModuleDto or ClientRawResponse if raw=true
        :rtype: ~designer.models.ModuleDto or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.parse_component.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if get_yaml is not None:
            query_parameters['getYaml'] = self._serialize.query("get_yaml", get_yaml, 'bool')
        if run_setting_type is not None:
            query_parameters['runSettingType'] = self._serialize.query("run_setting_type", run_setting_type, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 302]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    parse_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/parse'}

    def upgrade_component(
            self, subscription_id, resource_group_name, workspace_name, component_name, validate_only=False, overwrite_component_version=None, get_yaml=False, run_setting_type="Released", body=None, custom_headers=None, raw=False, **operation_config):
        """

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which
         the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param component_name:
        :type component_name: str
        :param validate_only:
        :type validate_only: bool
        :param overwrite_component_version:
        :type overwrite_component_version: str
        :param get_yaml:
        :type get_yaml: bool
        :param run_setting_type: Possible values include: 'Default', 'All',
         'Released', 'Testing', 'Legacy', 'Full'
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ModuleDto or ClientRawResponse if raw=true
        :rtype: ~designer.models.ModuleDto or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.upgrade_component.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'componentName': self._serialize.url("component_name", component_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if validate_only is not None:
            query_parameters['validateOnly'] = self._serialize.query("validate_only", validate_only, 'bool')
        if overwrite_component_version is not None:
            query_parameters['overwriteComponentVersion'] = self._serialize.query("overwrite_component_version", overwrite_component_version, 'str')
        if get_yaml is not None:
            query_parameters['getYaml'] = self._serialize.query("get_yaml", get_yaml, 'bool')
        if run_setting_type is not None:
            query_parameters['runSettingType'] = self._serialize.query("run_setting_type", run_setting_type, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 302]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    upgrade_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/{componentName}'}

    def get_pipeline_component_graph(
            self, subscription_id, resource_group_name, workspace_name, graph_id=None, graph_draft_id=None, include_run_setting_params=False, has_namespace_concept=False, skip_dataset_load=True, referenced_node_id=None, fetch_nested_graphs=False, custom_headers=None, raw=False, **operation_config):
        """

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which
         the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param graph_id:
        :type graph_id: str
        :param graph_draft_id:
        :type graph_draft_id: str
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param has_namespace_concept:
        :type has_namespace_concept: bool
        :param skip_dataset_load:
        :type skip_dataset_load: bool
        :param referenced_node_id:
        :type referenced_node_id: str
        :param fetch_nested_graphs:
        :type fetch_nested_graphs: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineGraph or ClientRawResponse if raw=true
        :rtype: ~designer.models.PipelineGraph or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.get_pipeline_component_graph.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if graph_id is not None:
            query_parameters['graphId'] = self._serialize.query("graph_id", graph_id, 'str')
        if graph_draft_id is not None:
            query_parameters['graphDraftId'] = self._serialize.query("graph_draft_id", graph_draft_id, 'str')
        if include_run_setting_params is not None:
            query_parameters['includeRunSettingParams'] = self._serialize.query("include_run_setting_params", include_run_setting_params, 'bool')
        if has_namespace_concept is not None:
            query_parameters['hasNamespaceConcept'] = self._serialize.query("has_namespace_concept", has_namespace_concept, 'bool')
        if skip_dataset_load is not None:
            query_parameters['skipDatasetLoad'] = self._serialize.query("skip_dataset_load", skip_dataset_load, 'bool')
        if referenced_node_id is not None:
            query_parameters['referencedNodeId'] = self._serialize.query("referenced_node_id", referenced_node_id, 'str')
        if fetch_nested_graphs is not None:
            query_parameters['fetchNestedGraphs'] = self._serialize.query("fetch_nested_graphs", fetch_nested_graphs, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineGraph', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pipeline_component_graph.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/graph'}
