# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ForecastingSettings(Model):
    """ForecastingSettings.

    :param country_or_region_for_holidays:
    :type country_or_region_for_holidays: str
    :param time_column_name:
    :type time_column_name: str
    :param target_lags:
    :type target_lags: ~designer.models.TargetLags
    :param target_rolling_window_size:
    :type target_rolling_window_size: ~designer.models.TargetRollingWindowSize
    :param forecast_horizon:
    :type forecast_horizon: ~designer.models.ForecastHorizon
    :param time_series_id_column_names:
    :type time_series_id_column_names: list[str]
    :param frequency:
    :type frequency: str
    :param feature_lags:
    :type feature_lags: str
    :param seasonality:
    :type seasonality: ~designer.models.Seasonality
    :param short_series_handling_config: Possible values include: 'Auto',
     'Pad', 'Drop'
    :type short_series_handling_config: str or
     ~designer.models.ShortSeriesHandlingConfiguration
    :param use_stl: Possible values include: 'Season', 'SeasonTrend'
    :type use_stl: str or ~designer.models.UseStl
    :param target_aggregate_function: Possible values include: 'Sum', 'Max',
     'Min', 'Mean'
    :type target_aggregate_function: str or
     ~designer.models.TargetAggregationFunction
    """

    _attribute_map = {
        'country_or_region_for_holidays': {'key': 'countryOrRegionForHolidays', 'type': 'str'},
        'time_column_name': {'key': 'timeColumnName', 'type': 'str'},
        'target_lags': {'key': 'targetLags', 'type': 'TargetLags'},
        'target_rolling_window_size': {'key': 'targetRollingWindowSize', 'type': 'TargetRollingWindowSize'},
        'forecast_horizon': {'key': 'forecastHorizon', 'type': 'ForecastHorizon'},
        'time_series_id_column_names': {'key': 'timeSeriesIdColumnNames', 'type': '[str]'},
        'frequency': {'key': 'frequency', 'type': 'str'},
        'feature_lags': {'key': 'featureLags', 'type': 'str'},
        'seasonality': {'key': 'seasonality', 'type': 'Seasonality'},
        'short_series_handling_config': {'key': 'shortSeriesHandlingConfig', 'type': 'str'},
        'use_stl': {'key': 'useStl', 'type': 'str'},
        'target_aggregate_function': {'key': 'targetAggregateFunction', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ForecastingSettings, self).__init__(**kwargs)
        self.country_or_region_for_holidays = kwargs.get('country_or_region_for_holidays', None)
        self.time_column_name = kwargs.get('time_column_name', None)
        self.target_lags = kwargs.get('target_lags', None)
        self.target_rolling_window_size = kwargs.get('target_rolling_window_size', None)
        self.forecast_horizon = kwargs.get('forecast_horizon', None)
        self.time_series_id_column_names = kwargs.get('time_series_id_column_names', None)
        self.frequency = kwargs.get('frequency', None)
        self.feature_lags = kwargs.get('feature_lags', None)
        self.seasonality = kwargs.get('seasonality', None)
        self.short_series_handling_config = kwargs.get('short_series_handling_config', None)
        self.use_stl = kwargs.get('use_stl', None)
        self.target_aggregate_function = kwargs.get('target_aggregate_function', None)
