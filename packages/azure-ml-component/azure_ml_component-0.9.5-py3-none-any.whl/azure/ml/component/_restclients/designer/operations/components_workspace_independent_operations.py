# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class ComponentsWorkspaceIndependentOperations(object):
    """ComponentsWorkspaceIndependentOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def get_component_run_setting_parameters_mapping(
            self, run_setting_type="Released", custom_headers=None, raw=False, **operation_config):
        """

        :param run_setting_type: Possible values include: 'Default', 'All',
         'Released', 'Testing', 'Legacy', 'Full'
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, list[~designer.models.RunSettingParameter]] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.get_component_run_setting_parameters_mapping.metadata['url']

        # Construct parameters
        query_parameters = {}
        if run_setting_type is not None:
            query_parameters['runSettingType'] = self._serialize.query("run_setting_type", run_setting_type, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{[RunSettingParameter]}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_component_run_setting_parameters_mapping.metadata = {'url': '/component/v1.0/admin/RunSettingParametersMapping'}

    def register_registry_component(
            self, validate_only=False, upgrade_if_exists=False, set_as_default_version=True, overwrite_component_version=None, snapshot_source_zip_file=None, properties=None, custom_headers=None, raw=False, **operation_config):
        """

        :param validate_only:
        :type validate_only: bool
        :param upgrade_if_exists:
        :type upgrade_if_exists: bool
        :param set_as_default_version:
        :type set_as_default_version: bool
        :param overwrite_component_version:
        :type overwrite_component_version: str
        :param snapshot_source_zip_file:
        :type snapshot_source_zip_file: str
        :param properties: RegistryName: string, SnapshotId: string,
         ModuleSourceType: string, YamlFile: string, DevopsArtifactsZipUrl:
         string, ModuleWorkingMechanism: string, IsPrivateRepo: boolean,
         DataTypeMechanism: string, BlobFileInfo.DataStoreName: string,
         BlobFileInfo.RootBlobUri: string, SerializedModuleInfo: string
        :type properties: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.register_registry_component.metadata['url']

        # Construct parameters
        query_parameters = {}
        if validate_only is not None:
            query_parameters['validateOnly'] = self._serialize.query("validate_only", validate_only, 'bool')
        if upgrade_if_exists is not None:
            query_parameters['upgradeIfExists'] = self._serialize.query("upgrade_if_exists", upgrade_if_exists, 'bool')
        if set_as_default_version is not None:
            query_parameters['setAsDefaultVersion'] = self._serialize.query("set_as_default_version", set_as_default_version, 'bool')
        if overwrite_component_version is not None:
            query_parameters['overwriteComponentVersion'] = self._serialize.query("overwrite_component_version", overwrite_component_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'SnapshotSourceZipFile': snapshot_source_zip_file,
            'properties': properties,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise models.ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    register_registry_component.metadata = {'url': '/component/v1.0/admin/registry'}

    def list_registry_components(
            self, registry_names=None, name=None, continuation_token=None, continuation_token1=None, count=500, active_only=True, get_yaml=False, run_setting_type="Released", module_dto_fields="31", custom_headers=None, raw=False, **operation_config):
        """

        :param registry_names:
        :type registry_names: list[str]
        :param name:
        :type name: str
        :param continuation_token:
        :type continuation_token: str
        :param continuation_token1:
        :type continuation_token1: str
        :param count:
        :type count: int
        :param active_only:
        :type active_only: bool
        :param get_yaml:
        :type get_yaml: bool
        :param run_setting_type: Possible values include: 'Default', 'All',
         'Released', 'Testing', 'Legacy', 'Full'
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param module_dto_fields: Possible values include: 'Definition',
         'YamlStr', 'RegistrationContext', 'Minimal', 'Basic',
         'RunSettingParameters', 'Default', 'RunDefinition', 'All'
        :type module_dto_fields: str or ~designer.models.ModuleDtoFields
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaginatedModuleDtoList or ClientRawResponse if raw=true
        :rtype: ~designer.models.PaginatedModuleDtoList or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<designer.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.list_registry_components.metadata['url']

        # Construct parameters
        query_parameters = {}
        if registry_names is not None:
            query_parameters['registryNames'] = self._serialize.query("registry_names", registry_names, '[str]', div=',')
        if name is not None:
            query_parameters['name'] = self._serialize.query("name", name, 'str')
        if continuation_token is not None:
            query_parameters['continuationToken'] = self._serialize.query("continuation_token", continuation_token, 'str')
        if count is not None:
            query_parameters['count'] = self._serialize.query("count", count, 'int')
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')
        if get_yaml is not None:
            query_parameters['getYaml'] = self._serialize.query("get_yaml", get_yaml, 'bool')
        if run_setting_type is not None:
            query_parameters['runSettingType'] = self._serialize.query("run_setting_type", run_setting_type, 'str')
        if module_dto_fields is not None:
            query_parameters['moduleDtoFields'] = self._serialize.query("module_dto_fields", module_dto_fields, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if continuation_token1 is not None:
            header_parameters['continuationToken'] = self._serialize.header("continuation_token1", continuation_token1, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PaginatedModuleDtoList', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_registry_components.metadata = {'url': '/component/v1.0/admin/registry'}
