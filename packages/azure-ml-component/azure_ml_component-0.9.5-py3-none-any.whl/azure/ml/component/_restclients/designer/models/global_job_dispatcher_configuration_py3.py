# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GlobalJobDispatcherConfiguration(Model):
    """GlobalJobDispatcherConfiguration.

    :param vm_size:
    :type vm_size: list[str]
    :param compute_type: Possible values include: 'AmlCompute', 'AmlK8s'
    :type compute_type: str or
     ~designer.models.GlobalJobDispatcherSupportedComputeType
    :param region:
    :type region: list[str]
    :param my_resource_only:
    :type my_resource_only: bool
    :param redispatch_allowed:
    :type redispatch_allowed: bool
    :param low_priority_vm_tolerant:
    :type low_priority_vm_tolerant: bool
    :param vc_list:
    :type vc_list: list[str]
    :param plan_id:
    :type plan_id: str
    :param plan_region_id:
    :type plan_region_id: str
    :param vc_block_list:
    :type vc_block_list: list[str]
    :param cluster_block_list:
    :type cluster_block_list: list[str]
    """

    _attribute_map = {
        'vm_size': {'key': 'vmSize', 'type': '[str]'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'region': {'key': 'region', 'type': '[str]'},
        'my_resource_only': {'key': 'myResourceOnly', 'type': 'bool'},
        'redispatch_allowed': {'key': 'redispatchAllowed', 'type': 'bool'},
        'low_priority_vm_tolerant': {'key': 'lowPriorityVMTolerant', 'type': 'bool'},
        'vc_list': {'key': 'vcList', 'type': '[str]'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'plan_region_id': {'key': 'planRegionId', 'type': 'str'},
        'vc_block_list': {'key': 'vcBlockList', 'type': '[str]'},
        'cluster_block_list': {'key': 'clusterBlockList', 'type': '[str]'},
    }

    def __init__(self, *, vm_size=None, compute_type=None, region=None, my_resource_only: bool=None, redispatch_allowed: bool=None, low_priority_vm_tolerant: bool=None, vc_list=None, plan_id: str=None, plan_region_id: str=None, vc_block_list=None, cluster_block_list=None, **kwargs) -> None:
        super(GlobalJobDispatcherConfiguration, self).__init__(**kwargs)
        self.vm_size = vm_size
        self.compute_type = compute_type
        self.region = region
        self.my_resource_only = my_resource_only
        self.redispatch_allowed = redispatch_allowed
        self.low_priority_vm_tolerant = low_priority_vm_tolerant
        self.vc_list = vc_list
        self.plan_id = plan_id
        self.plan_region_id = plan_region_id
        self.vc_block_list = vc_block_list
        self.cluster_block_list = cluster_block_list
