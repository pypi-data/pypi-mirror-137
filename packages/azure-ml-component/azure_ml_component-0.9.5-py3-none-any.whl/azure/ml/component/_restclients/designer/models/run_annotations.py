# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class RunAnnotations(Model):
    """RunAnnotations.

    :param display_name:
    :type display_name: str
    :param status:
    :type status: str
    :param primary_metric_name:
    :type primary_metric_name: str
    :param estimated_cost:
    :type estimated_cost: float
    :param primary_metric_summary:
    :type primary_metric_summary: ~designer.models.RunIndexMetricSummary1
    :param metrics:
    :type metrics: dict[str,
     ~designer.models.RunIndexMetricSummary1SystemObject]
    :param parameters:
    :type parameters: dict[str, object]
    :param settings:
    :type settings: dict[str, str]
    :param modified_time:
    :type modified_time: datetime
    :param retain_for_lifetime_of_workspace:
    :type retain_for_lifetime_of_workspace: bool
    :param error:
    :type error: ~designer.models.IndexedErrorResponse
    :param resource_metric_summary:
    :type resource_metric_summary:
     ~designer.models.RunIndexResourceMetricSummary
    :param job_cost:
    :type job_cost: ~designer.models.JobCost
    :param compute_duration:
    :type compute_duration: str
    :param compute_duration_milliseconds:
    :type compute_duration_milliseconds: float
    :param effective_start_time_utc:
    :type effective_start_time_utc: datetime
    :param name:
    :type name: str
    :param description:
    :type description: str
    :param archived:
    :type archived: bool
    :param tags:
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'primary_metric_name': {'key': 'primaryMetricName', 'type': 'str'},
        'estimated_cost': {'key': 'estimatedCost', 'type': 'float'},
        'primary_metric_summary': {'key': 'primaryMetricSummary', 'type': 'RunIndexMetricSummary1'},
        'metrics': {'key': 'metrics', 'type': '{RunIndexMetricSummary1SystemObject}'},
        'parameters': {'key': 'parameters', 'type': '{object}'},
        'settings': {'key': 'settings', 'type': '{str}'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'retain_for_lifetime_of_workspace': {'key': 'retainForLifetimeOfWorkspace', 'type': 'bool'},
        'error': {'key': 'error', 'type': 'IndexedErrorResponse'},
        'resource_metric_summary': {'key': 'resourceMetricSummary', 'type': 'RunIndexResourceMetricSummary'},
        'job_cost': {'key': 'jobCost', 'type': 'JobCost'},
        'compute_duration': {'key': 'computeDuration', 'type': 'str'},
        'compute_duration_milliseconds': {'key': 'computeDurationMilliseconds', 'type': 'float'},
        'effective_start_time_utc': {'key': 'effectiveStartTimeUtc', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'archived': {'key': 'archived', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(RunAnnotations, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.status = kwargs.get('status', None)
        self.primary_metric_name = kwargs.get('primary_metric_name', None)
        self.estimated_cost = kwargs.get('estimated_cost', None)
        self.primary_metric_summary = kwargs.get('primary_metric_summary', None)
        self.metrics = kwargs.get('metrics', None)
        self.parameters = kwargs.get('parameters', None)
        self.settings = kwargs.get('settings', None)
        self.modified_time = kwargs.get('modified_time', None)
        self.retain_for_lifetime_of_workspace = kwargs.get('retain_for_lifetime_of_workspace', None)
        self.error = kwargs.get('error', None)
        self.resource_metric_summary = kwargs.get('resource_metric_summary', None)
        self.job_cost = kwargs.get('job_cost', None)
        self.compute_duration = kwargs.get('compute_duration', None)
        self.compute_duration_milliseconds = kwargs.get('compute_duration_milliseconds', None)
        self.effective_start_time_utc = kwargs.get('effective_start_time_utc', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.archived = kwargs.get('archived', None)
        self.tags = kwargs.get('tags', None)
