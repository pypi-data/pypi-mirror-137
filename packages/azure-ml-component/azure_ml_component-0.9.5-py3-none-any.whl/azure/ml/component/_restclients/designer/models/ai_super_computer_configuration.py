# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AISuperComputerConfiguration(Model):
    """AISuperComputerConfiguration.

    :param instance_type:
    :type instance_type: str
    :param image_version:
    :type image_version: str
    :param location:
    :type location: str
    :param ai_super_computer_storage_data:
    :type ai_super_computer_storage_data: dict[str,
     ~designer.models.AISuperComputerStorageReferenceConfiguration]
    :param interactive:
    :type interactive: bool
    :param scale_policy:
    :type scale_policy: ~designer.models.AISuperComputerScalePolicy
    :param virtual_cluster_arm_id:
    :type virtual_cluster_arm_id: str
    :param tensorboard_log_directory:
    :type tensorboard_log_directory: str
    :param ssh_public_key:
    :type ssh_public_key: str
    :param ssh_public_keys:
    :type ssh_public_keys: list[str]
    :param enable_azml_int:
    :type enable_azml_int: bool
    :param priority:
    :type priority: str
    :param sla_tier:
    :type sla_tier: str
    :param user_alias:
    :type user_alias: str
    """

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'image_version': {'key': 'imageVersion', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'ai_super_computer_storage_data': {'key': 'aiSuperComputerStorageData', 'type': '{AISuperComputerStorageReferenceConfiguration}'},
        'interactive': {'key': 'interactive', 'type': 'bool'},
        'scale_policy': {'key': 'scalePolicy', 'type': 'AISuperComputerScalePolicy'},
        'virtual_cluster_arm_id': {'key': 'virtualClusterArmId', 'type': 'str'},
        'tensorboard_log_directory': {'key': 'tensorboardLogDirectory', 'type': 'str'},
        'ssh_public_key': {'key': 'sshPublicKey', 'type': 'str'},
        'ssh_public_keys': {'key': 'sshPublicKeys', 'type': '[str]'},
        'enable_azml_int': {'key': 'enableAzmlInt', 'type': 'bool'},
        'priority': {'key': 'priority', 'type': 'str'},
        'sla_tier': {'key': 'slaTier', 'type': 'str'},
        'user_alias': {'key': 'userAlias', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AISuperComputerConfiguration, self).__init__(**kwargs)
        self.instance_type = kwargs.get('instance_type', None)
        self.image_version = kwargs.get('image_version', None)
        self.location = kwargs.get('location', None)
        self.ai_super_computer_storage_data = kwargs.get('ai_super_computer_storage_data', None)
        self.interactive = kwargs.get('interactive', None)
        self.scale_policy = kwargs.get('scale_policy', None)
        self.virtual_cluster_arm_id = kwargs.get('virtual_cluster_arm_id', None)
        self.tensorboard_log_directory = kwargs.get('tensorboard_log_directory', None)
        self.ssh_public_key = kwargs.get('ssh_public_key', None)
        self.ssh_public_keys = kwargs.get('ssh_public_keys', None)
        self.enable_azml_int = kwargs.get('enable_azml_int', None)
        self.priority = kwargs.get('priority', None)
        self.sla_tier = kwargs.get('sla_tier', None)
        self.user_alias = kwargs.get('user_alias', None)
